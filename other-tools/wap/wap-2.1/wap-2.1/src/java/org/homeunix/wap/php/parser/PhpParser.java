// $ANTLR 3.4 Php.g 2015-10-03 23:49:42

package org.homeunix.wap.php.parser; 


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class PhpParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ABSTRACT", "AMPERSAND", "ARRAY_ASSIGN", "ASTERISK", "AccessModifier", "Apply", "Array", "ArrayWord", "AssignmentOperator", "BANG", "BREAK", "Block", "BodyString", "Boolean", "CASE", "CATCH", "CLASS", "CLASS_MEMBER", "CLONE", "CLOSE_BRACE", "CLOSE_CURLY_BRACE", "CLOSE_SQUARE_BRACE", "COLON", "COMMA", "COMMENT", "CONST", "CONTINUE", "Cast", "ComparisionOperator", "ConcatAssigmentOperator", "DEFAULT", "DIE", "DNum", "DO", "DOLLAR", "DOT", "Decimal", "Digits", "DoubleQuotedString", "ECHO", "ELSE", "ELSE_IF", "EQUALS", "EqualityOperator", "EscapeCharector", "Exponent_DNum", "Extends", "FOR", "FORWARD_SLASH", "FOR_EACH", "FUNCTION", "Field", "FirstBodyString", "ForeachVar", "GLOBAL", "HEX_DIGIT", "HereDoc", "HereDocContents", "Hexadecimal", "IF", "INSTANCE_MEMBER", "INSTANCE_OF", "IfExpression", "IgnoreConditions", "IgnoreStmContents", "IgnoreStmDeclare", "IgnoreStmImplements", "IgnoreStmInterface", "IncrementOperator", "Integer", "LOGICAL_AND", "LOGICAL_OR", "List", "ListAssign", "MINUS", "Method", "Modifiers", "NEW", "OCTAL_ESC", "OPEN_BRACE", "OPEN_CURLY_BRACE", "OPEN_SQUARE_BRACE", "Octal", "PERCENT", "PIPE", "PLUS", "PRINT", "PRINTF", "Params", "PhpStatement", "Postfix", "Prefix", "QUESTION_MARK", "RETURN", "Real", "RequireOperator", "SEMICOLON", "SUPPRESS_WARNINGS", "SWITCH", "ShiftOperator", "SingleQuotedString", "THROW", "TILDE", "TRY", "UNICODE_ESC", "USE", "UnquotedString", "VAR", "WHILE", "WhiteSpace", "'AND'", "'OR'", "'XOR'", "'and'", "'final'", "'list'", "'null'", "'or'", "'static'", "'xor'"
    };

    public static final int EOF=-1;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int ABSTRACT=4;
    public static final int AMPERSAND=5;
    public static final int ARRAY_ASSIGN=6;
    public static final int ASTERISK=7;
    public static final int AccessModifier=8;
    public static final int Apply=9;
    public static final int Array=10;
    public static final int ArrayWord=11;
    public static final int AssignmentOperator=12;
    public static final int BANG=13;
    public static final int BREAK=14;
    public static final int Block=15;
    public static final int BodyString=16;
    public static final int Boolean=17;
    public static final int CASE=18;
    public static final int CATCH=19;
    public static final int CLASS=20;
    public static final int CLASS_MEMBER=21;
    public static final int CLONE=22;
    public static final int CLOSE_BRACE=23;
    public static final int CLOSE_CURLY_BRACE=24;
    public static final int CLOSE_SQUARE_BRACE=25;
    public static final int COLON=26;
    public static final int COMMA=27;
    public static final int COMMENT=28;
    public static final int CONST=29;
    public static final int CONTINUE=30;
    public static final int Cast=31;
    public static final int ComparisionOperator=32;
    public static final int ConcatAssigmentOperator=33;
    public static final int DEFAULT=34;
    public static final int DIE=35;
    public static final int DNum=36;
    public static final int DO=37;
    public static final int DOLLAR=38;
    public static final int DOT=39;
    public static final int Decimal=40;
    public static final int Digits=41;
    public static final int DoubleQuotedString=42;
    public static final int ECHO=43;
    public static final int ELSE=44;
    public static final int ELSE_IF=45;
    public static final int EQUALS=46;
    public static final int EqualityOperator=47;
    public static final int EscapeCharector=48;
    public static final int Exponent_DNum=49;
    public static final int Extends=50;
    public static final int FOR=51;
    public static final int FORWARD_SLASH=52;
    public static final int FOR_EACH=53;
    public static final int FUNCTION=54;
    public static final int Field=55;
    public static final int FirstBodyString=56;
    public static final int ForeachVar=57;
    public static final int GLOBAL=58;
    public static final int HEX_DIGIT=59;
    public static final int HereDoc=60;
    public static final int HereDocContents=61;
    public static final int Hexadecimal=62;
    public static final int IF=63;
    public static final int INSTANCE_MEMBER=64;
    public static final int INSTANCE_OF=65;
    public static final int IfExpression=66;
    public static final int IgnoreConditions=67;
    public static final int IgnoreStmContents=68;
    public static final int IgnoreStmDeclare=69;
    public static final int IgnoreStmImplements=70;
    public static final int IgnoreStmInterface=71;
    public static final int IncrementOperator=72;
    public static final int Integer=73;
    public static final int LOGICAL_AND=74;
    public static final int LOGICAL_OR=75;
    public static final int List=76;
    public static final int ListAssign=77;
    public static final int MINUS=78;
    public static final int Method=79;
    public static final int Modifiers=80;
    public static final int NEW=81;
    public static final int OCTAL_ESC=82;
    public static final int OPEN_BRACE=83;
    public static final int OPEN_CURLY_BRACE=84;
    public static final int OPEN_SQUARE_BRACE=85;
    public static final int Octal=86;
    public static final int PERCENT=87;
    public static final int PIPE=88;
    public static final int PLUS=89;
    public static final int PRINT=90;
    public static final int PRINTF=91;
    public static final int Params=92;
    public static final int PhpStatement=93;
    public static final int Postfix=94;
    public static final int Prefix=95;
    public static final int QUESTION_MARK=96;
    public static final int RETURN=97;
    public static final int Real=98;
    public static final int RequireOperator=99;
    public static final int SEMICOLON=100;
    public static final int SUPPRESS_WARNINGS=101;
    public static final int SWITCH=102;
    public static final int ShiftOperator=103;
    public static final int SingleQuotedString=104;
    public static final int THROW=105;
    public static final int TILDE=106;
    public static final int TRY=107;
    public static final int UNICODE_ESC=108;
    public static final int USE=109;
    public static final int UnquotedString=110;
    public static final int VAR=111;
    public static final int WHILE=112;
    public static final int WhiteSpace=113;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public PhpParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public PhpParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
        this.state.ruleMemo = new HashMap[210+1];
         

    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return PhpParser.tokenNames; }
    public String getGrammarFileName() { return "Php.g"; }


    	/** Override this method to change where error messages go */
    	@Override
    	public void emitErrorMessage(String msg) {}

    	@Override
    	protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) throws RecognitionException {
    		RecognitionException e = null;
    		// if next token is what we are looking for then "delete" this token
    		try{
    		if ( mismatchIsUnwantedToken(input, ttype) ) {
    			e = new UnwantedTokenException(ttype, input);
    			beginResync();
    			input.consume(); // simply delete extra token
    			endResync();
    			reportError(e); // report after consuming so AW sees the token in the exception
    			// we want to return the token we're actually matching
    			Object matchedSymbol = getCurrentInputSymbol(input);
    			input.consume(); // move past ttype token as if all were ok
    			return matchedSymbol;
    		}
    		} catch (Exception ee){}

    		try{
    		// can't recover with single token deletion, try insertion
    		if ( mismatchIsMissingToken(input, follow) ) {
    			Object inserted = getMissingSymbol(input, e, ttype, follow);
    			e = new MissingTokenException(ttype, input, inserted);
    			reportError(e); // report after inserting so AW sees the token in the exception
    			return inserted;
    		}
    		} catch (Exception ee){} 
    			// even that didn't work; must throw the exception
    			e = new MismatchedTokenException(ttype, input);
    			throw e;
    	}
    	
    	@Override
    	public void reportError(RecognitionException e) {
    		try{
    		// if we've already reported an error and have not matched a token
    		// yet successfully, don't report any errors.
    		if ( state.errorRecovery ) {
    			return;
    		}
    		state.syntaxErrors++; // don't count spurious
    		state.errorRecovery = true;

    		//displayRecognitionError(this.getTokenNames(), e);
    		} catch (Exception ee){} 
    	}		


    public static class compilationUnit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "compilationUnit"
    // Php.g:135:1: compilationUnit : prog ;
    public final PhpParser.compilationUnit_return compilationUnit() throws RecognitionException {
        PhpParser.compilationUnit_return retval = new PhpParser.compilationUnit_return();
        retval.start = input.LT(1);

        int compilationUnit_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.prog_return prog1 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }

            // Php.g:136:5: ( prog )
            // Php.g:136:9: prog
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_prog_in_compilationUnit230);
            prog1=prog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prog1.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "compilationUnit"


    public static class prog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prog"
    // Php.g:139:1: prog : ( statement )* ;
    public final PhpParser.prog_return prog() throws RecognitionException {
        PhpParser.prog_return retval = new PhpParser.prog_return();
        retval.start = input.LT(1);

        int prog_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.statement_return statement2 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }

            // Php.g:139:6: ( ( statement )* )
            // Php.g:139:8: ( statement )*
            {
            root_0 = (CommonTree)adaptor.nil();


            // Php.g:139:8: ( statement )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( ((LA1_0 >= ABSTRACT && LA1_0 <= AMPERSAND)||LA1_0==ArrayWord||LA1_0==BANG||(LA1_0 >= BodyString && LA1_0 <= Boolean)||LA1_0==CLASS||LA1_0==CLONE||LA1_0==DIE||(LA1_0 >= DO && LA1_0 <= DOLLAR)||(LA1_0 >= DoubleQuotedString && LA1_0 <= ECHO)||LA1_0==FUNCTION||LA1_0==GLOBAL||LA1_0==HereDoc||LA1_0==IF||(LA1_0 >= IncrementOperator && LA1_0 <= Integer)||LA1_0==MINUS||LA1_0==NEW||(LA1_0 >= OPEN_BRACE && LA1_0 <= OPEN_CURLY_BRACE)||(LA1_0 >= PRINT && LA1_0 <= PRINTF)||LA1_0==PhpStatement||(LA1_0 >= RETURN && LA1_0 <= RequireOperator)||(LA1_0 >= SUPPRESS_WARNINGS && LA1_0 <= SWITCH)||LA1_0==SingleQuotedString||(LA1_0 >= TILDE && LA1_0 <= TRY)||LA1_0==UnquotedString||(LA1_0 >= 119 && LA1_0 <= 120)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Php.g:139:8: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_prog243);
            	    statement2=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement2.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 2, prog_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "prog"


    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "statement"
    // Php.g:141:1: statement : ( ignoreStatement | ( simpleStatement )? BodyString | '{' statement '}' ( ';' )? -> statement | bracketedBlock ( ';' !)? | classDefinition | complexStatement | simpleStatement ( ';' !)* );
    public final PhpParser.statement_return statement() throws RecognitionException {
        PhpParser.statement_return retval = new PhpParser.statement_return();
        retval.start = input.LT(1);

        int statement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token BodyString5=null;
        Token char_literal6=null;
        Token char_literal8=null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal15=null;
        PhpParser.ignoreStatement_return ignoreStatement3 =null;

        PhpParser.simpleStatement_return simpleStatement4 =null;

        PhpParser.statement_return statement7 =null;

        PhpParser.bracketedBlock_return bracketedBlock10 =null;

        PhpParser.classDefinition_return classDefinition12 =null;

        PhpParser.complexStatement_return complexStatement13 =null;

        PhpParser.simpleStatement_return simpleStatement14 =null;


        CommonTree BodyString5_tree=null;
        CommonTree char_literal6_tree=null;
        CommonTree char_literal8_tree=null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal15_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }

            // Php.g:142:5: ( ignoreStatement | ( simpleStatement )? BodyString | '{' statement '}' ( ';' )? -> statement | bracketedBlock ( ';' !)? | classDefinition | complexStatement | simpleStatement ( ';' !)* )
            int alt6=7;
            alt6 = dfa6.predict(input);
            switch (alt6) {
                case 1 :
                    // Php.g:142:7: ignoreStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_ignoreStatement_in_statement256);
                    ignoreStatement3=ignoreStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ignoreStatement3.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:143:7: ( simpleStatement )? BodyString
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    // Php.g:143:7: ( simpleStatement )?
                    int alt2=2;
                    int LA2_0 = input.LA(1);

                    if ( (LA2_0==AMPERSAND||LA2_0==ArrayWord||LA2_0==BANG||LA2_0==Boolean||LA2_0==CLONE||LA2_0==DIE||LA2_0==DOLLAR||(LA2_0 >= DoubleQuotedString && LA2_0 <= ECHO)||LA2_0==GLOBAL||LA2_0==HereDoc||(LA2_0 >= IncrementOperator && LA2_0 <= Integer)||LA2_0==MINUS||LA2_0==NEW||LA2_0==OPEN_BRACE||(LA2_0 >= PRINT && LA2_0 <= PRINTF)||LA2_0==PhpStatement||(LA2_0 >= RETURN && LA2_0 <= RequireOperator)||LA2_0==SUPPRESS_WARNINGS||LA2_0==SingleQuotedString||LA2_0==TILDE||LA2_0==UnquotedString||(LA2_0 >= 119 && LA2_0 <= 120)) ) {
                        alt2=1;
                    }
                    switch (alt2) {
                        case 1 :
                            // Php.g:143:7: simpleStatement
                            {
                            pushFollow(FOLLOW_simpleStatement_in_statement264);
                            simpleStatement4=simpleStatement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleStatement4.getTree());

                            }
                            break;

                    }


                    BodyString5=(Token)match(input,BodyString,FOLLOW_BodyString_in_statement267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BodyString5_tree = 
                    (CommonTree)adaptor.create(BodyString5)
                    ;
                    adaptor.addChild(root_0, BodyString5_tree);
                    }

                    }
                    break;
                case 3 :
                    // Php.g:144:7: '{' statement '}' ( ';' )?
                    {
                    char_literal6=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_statement275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(char_literal6);


                    pushFollow(FOLLOW_statement_in_statement277);
                    statement7=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement7.getTree());

                    char_literal8=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_statement279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(char_literal8);


                    // Php.g:144:25: ( ';' )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==SEMICOLON) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // Php.g:144:26: ';'
                            {
                            char_literal9=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_statement282); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMICOLON.add(char_literal9);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 144:32: -> statement
                    {
                        adaptor.addChild(root_0, stream_statement.nextTree());

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // Php.g:145:7: bracketedBlock ( ';' !)?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_bracketedBlock_in_statement296);
                    bracketedBlock10=bracketedBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracketedBlock10.getTree());

                    // Php.g:145:22: ( ';' !)?
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==SEMICOLON) ) {
                        alt4=1;
                    }
                    switch (alt4) {
                        case 1 :
                            // Php.g:145:23: ';' !
                            {
                            char_literal11=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_statement299); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // Php.g:146:7: classDefinition
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_classDefinition_in_statement310);
                    classDefinition12=classDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classDefinition12.getTree());

                    }
                    break;
                case 6 :
                    // Php.g:147:7: complexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_complexStatement_in_statement318);
                    complexStatement13=complexStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, complexStatement13.getTree());

                    }
                    break;
                case 7 :
                    // Php.g:148:7: simpleStatement ( ';' !)*
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_simpleStatement_in_statement326);
                    simpleStatement14=simpleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleStatement14.getTree());

                    // Php.g:148:23: ( ';' !)*
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==SEMICOLON) ) {
                            alt5=1;
                        }


                        switch (alt5) {
                    	case 1 :
                    	    // Php.g:148:24: ';' !
                    	    {
                    	    char_literal15=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_statement329); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 3, statement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "statement"


    public static class bracketedBlock_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bracketedBlock"
    // Php.g:151:1: bracketedBlock : '{' ( statement )* '}' -> ^( Block ( statement )* ) ;
    public final PhpParser.bracketedBlock_return bracketedBlock() throws RecognitionException {
        PhpParser.bracketedBlock_return retval = new PhpParser.bracketedBlock_return();
        retval.start = input.LT(1);

        int bracketedBlock_StartIndex = input.index();

        CommonTree root_0 = null;

        Token char_literal16=null;
        Token char_literal18=null;
        PhpParser.statement_return statement17 =null;


        CommonTree char_literal16_tree=null;
        CommonTree char_literal18_tree=null;
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }

            // Php.g:152:5: ( '{' ( statement )* '}' -> ^( Block ( statement )* ) )
            // Php.g:152:7: '{' ( statement )* '}'
            {
            char_literal16=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_bracketedBlock349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(char_literal16);


            // Php.g:152:11: ( statement )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( ((LA7_0 >= ABSTRACT && LA7_0 <= AMPERSAND)||LA7_0==ArrayWord||LA7_0==BANG||(LA7_0 >= BodyString && LA7_0 <= Boolean)||LA7_0==CLASS||LA7_0==CLONE||LA7_0==DIE||(LA7_0 >= DO && LA7_0 <= DOLLAR)||(LA7_0 >= DoubleQuotedString && LA7_0 <= ECHO)||LA7_0==FUNCTION||LA7_0==GLOBAL||LA7_0==HereDoc||LA7_0==IF||(LA7_0 >= IncrementOperator && LA7_0 <= Integer)||LA7_0==MINUS||LA7_0==NEW||(LA7_0 >= OPEN_BRACE && LA7_0 <= OPEN_CURLY_BRACE)||(LA7_0 >= PRINT && LA7_0 <= PRINTF)||LA7_0==PhpStatement||(LA7_0 >= RETURN && LA7_0 <= RequireOperator)||(LA7_0 >= SUPPRESS_WARNINGS && LA7_0 <= SWITCH)||LA7_0==SingleQuotedString||(LA7_0 >= TILDE && LA7_0 <= TRY)||LA7_0==UnquotedString||(LA7_0 >= 119 && LA7_0 <= 120)) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // Php.g:152:11: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_bracketedBlock351);
            	    statement17=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_statement.add(statement17.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            char_literal18=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_bracketedBlock354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(char_literal18);


            // AST REWRITE
            // elements: statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 152:26: -> ^( Block ( statement )* )
            {
                // Php.g:152:29: ^( Block ( statement )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(Block, "Block")
                , root_1);

                // Php.g:152:37: ( statement )*
                while ( stream_statement.hasNext() ) {
                    adaptor.addChild(root_1, stream_statement.nextTree());

                }
                stream_statement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 4, bracketedBlock_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bracketedBlock"


    public static class classDefinition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classDefinition"
    // Php.g:155:1: classDefinition : ( classModifier )? CLASS className ( extendsclass )? ( classImplements )? '{' ( classMember )* '}' -> ^( CLASS ^( Modifiers ( classModifier )? ) className ( extendsclass )? ( classImplements )? ( classMember )* ) ;
    public final PhpParser.classDefinition_return classDefinition() throws RecognitionException {
        PhpParser.classDefinition_return retval = new PhpParser.classDefinition_return();
        retval.start = input.LT(1);

        int classDefinition_StartIndex = input.index();

        CommonTree root_0 = null;

        Token CLASS20=null;
        Token char_literal24=null;
        Token char_literal26=null;
        PhpParser.classModifier_return classModifier19 =null;

        PhpParser.className_return className21 =null;

        PhpParser.extendsclass_return extendsclass22 =null;

        PhpParser.classImplements_return classImplements23 =null;

        PhpParser.classMember_return classMember25 =null;


        CommonTree CLASS20_tree=null;
        CommonTree char_literal24_tree=null;
        CommonTree char_literal26_tree=null;
        RewriteRuleTokenStream stream_CLASS=new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleSubtreeStream stream_classModifier=new RewriteRuleSubtreeStream(adaptor,"rule classModifier");
        RewriteRuleSubtreeStream stream_className=new RewriteRuleSubtreeStream(adaptor,"rule className");
        RewriteRuleSubtreeStream stream_classMember=new RewriteRuleSubtreeStream(adaptor,"rule classMember");
        RewriteRuleSubtreeStream stream_extendsclass=new RewriteRuleSubtreeStream(adaptor,"rule extendsclass");
        RewriteRuleSubtreeStream stream_classImplements=new RewriteRuleSubtreeStream(adaptor,"rule classImplements");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }

            // Php.g:156:5: ( ( classModifier )? CLASS className ( extendsclass )? ( classImplements )? '{' ( classMember )* '}' -> ^( CLASS ^( Modifiers ( classModifier )? ) className ( extendsclass )? ( classImplements )? ( classMember )* ) )
            // Php.g:156:7: ( classModifier )? CLASS className ( extendsclass )? ( classImplements )? '{' ( classMember )* '}'
            {
            // Php.g:156:7: ( classModifier )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==ABSTRACT) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // Php.g:156:7: classModifier
                    {
                    pushFollow(FOLLOW_classModifier_in_classDefinition380);
                    classModifier19=classModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classModifier.add(classModifier19.getTree());

                    }
                    break;

            }


            CLASS20=(Token)match(input,CLASS,FOLLOW_CLASS_in_classDefinition390); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLASS.add(CLASS20);


            pushFollow(FOLLOW_className_in_classDefinition392);
            className21=className();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_className.add(className21.getTree());

            // Php.g:158:7: ( extendsclass )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==Extends) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // Php.g:158:7: extendsclass
                    {
                    pushFollow(FOLLOW_extendsclass_in_classDefinition400);
                    extendsclass22=extendsclass();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_extendsclass.add(extendsclass22.getTree());

                    }
                    break;

            }


            // Php.g:159:7: ( classImplements )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==PhpStatement) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // Php.g:159:7: classImplements
                    {
                    pushFollow(FOLLOW_classImplements_in_classDefinition410);
                    classImplements23=classImplements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classImplements.add(classImplements23.getTree());

                    }
                    break;

            }


            char_literal24=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_classDefinition415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(char_literal24);


            // Php.g:161:7: ( classMember )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==ABSTRACT||LA11_0==AccessModifier||LA11_0==CONST||LA11_0==DOLLAR||LA11_0==FUNCTION||LA11_0==VAR||LA11_0==118||LA11_0==122) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // Php.g:161:7: classMember
            	    {
            	    pushFollow(FOLLOW_classMember_in_classDefinition423);
            	    classMember25=classMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classMember.add(classMember25.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            char_literal26=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_classDefinition428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(char_literal26);


            // AST REWRITE
            // elements: extendsclass, classMember, className, classModifier, CLASS, classImplements
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 163:7: -> ^( CLASS ^( Modifiers ( classModifier )? ) className ( extendsclass )? ( classImplements )? ( classMember )* )
            {
                // Php.g:163:10: ^( CLASS ^( Modifiers ( classModifier )? ) className ( extendsclass )? ( classImplements )? ( classMember )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_CLASS.nextNode()
                , root_1);

                // Php.g:163:18: ^( Modifiers ( classModifier )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(Modifiers, "Modifiers")
                , root_2);

                // Php.g:163:30: ( classModifier )?
                if ( stream_classModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_classModifier.nextTree());

                }
                stream_classModifier.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_1, stream_className.nextTree());

                // Php.g:163:56: ( extendsclass )?
                if ( stream_extendsclass.hasNext() ) {
                    adaptor.addChild(root_1, stream_extendsclass.nextTree());

                }
                stream_extendsclass.reset();

                // Php.g:163:70: ( classImplements )?
                if ( stream_classImplements.hasNext() ) {
                    adaptor.addChild(root_1, stream_classImplements.nextTree());

                }
                stream_classImplements.reset();

                // Php.g:163:87: ( classMember )*
                while ( stream_classMember.hasNext() ) {
                    adaptor.addChild(root_1, stream_classMember.nextTree());

                }
                stream_classMember.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 5, classDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classDefinition"


    public static class className_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "className"
    // Php.g:166:1: className : UnquotedString ;
    public final PhpParser.className_return className() throws RecognitionException {
        PhpParser.className_return retval = new PhpParser.className_return();
        retval.start = input.LT(1);

        int className_StartIndex = input.index();

        CommonTree root_0 = null;

        Token UnquotedString27=null;

        CommonTree UnquotedString27_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }

            // Php.g:167:5: ( UnquotedString )
            // Php.g:167:7: UnquotedString
            {
            root_0 = (CommonTree)adaptor.nil();


            UnquotedString27=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_className476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UnquotedString27_tree = 
            (CommonTree)adaptor.create(UnquotedString27)
            ;
            adaptor.addChild(root_0, UnquotedString27_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 6, className_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "className"


    public static class extendsclass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extendsclass"
    // Php.g:170:1: extendsclass : Extends ^ UnquotedString ;
    public final PhpParser.extendsclass_return extendsclass() throws RecognitionException {
        PhpParser.extendsclass_return retval = new PhpParser.extendsclass_return();
        retval.start = input.LT(1);

        int extendsclass_StartIndex = input.index();

        CommonTree root_0 = null;

        Token Extends28=null;
        Token UnquotedString29=null;

        CommonTree Extends28_tree=null;
        CommonTree UnquotedString29_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }

            // Php.g:171:5: ( Extends ^ UnquotedString )
            // Php.g:171:7: Extends ^ UnquotedString
            {
            root_0 = (CommonTree)adaptor.nil();


            Extends28=(Token)match(input,Extends,FOLLOW_Extends_in_extendsclass494); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Extends28_tree = 
            (CommonTree)adaptor.create(Extends28)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(Extends28_tree, root_0);
            }

            UnquotedString29=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_extendsclass497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UnquotedString29_tree = 
            (CommonTree)adaptor.create(UnquotedString29)
            ;
            adaptor.addChild(root_0, UnquotedString29_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 7, extendsclass_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "extendsclass"


    public static class classImplements_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classImplements"
    // Php.g:174:1: classImplements : ignoreStatement ;
    public final PhpParser.classImplements_return classImplements() throws RecognitionException {
        PhpParser.classImplements_return retval = new PhpParser.classImplements_return();
        retval.start = input.LT(1);

        int classImplements_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.ignoreStatement_return ignoreStatement30 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }

            // Php.g:175:5: ( ignoreStatement )
            // Php.g:175:8: ignoreStatement
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_ignoreStatement_in_classImplements520);
            ignoreStatement30=ignoreStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ignoreStatement30.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 8, classImplements_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classImplements"


    public static class classMember_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classMember"
    // Php.g:178:1: classMember : ( ( fieldModifier )* FUNCTION UnquotedString parametersDefinition ( bracketedBlock | ';' ) -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? ) | definitionAttribute );
    public final PhpParser.classMember_return classMember() throws RecognitionException {
        PhpParser.classMember_return retval = new PhpParser.classMember_return();
        retval.start = input.LT(1);

        int classMember_StartIndex = input.index();

        CommonTree root_0 = null;

        Token FUNCTION32=null;
        Token UnquotedString33=null;
        Token char_literal36=null;
        PhpParser.fieldModifier_return fieldModifier31 =null;

        PhpParser.parametersDefinition_return parametersDefinition34 =null;

        PhpParser.bracketedBlock_return bracketedBlock35 =null;

        PhpParser.definitionAttribute_return definitionAttribute37 =null;


        CommonTree FUNCTION32_tree=null;
        CommonTree UnquotedString33_tree=null;
        CommonTree char_literal36_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_UnquotedString=new RewriteRuleTokenStream(adaptor,"token UnquotedString");
        RewriteRuleSubtreeStream stream_parametersDefinition=new RewriteRuleSubtreeStream(adaptor,"rule parametersDefinition");
        RewriteRuleSubtreeStream stream_fieldModifier=new RewriteRuleSubtreeStream(adaptor,"rule fieldModifier");
        RewriteRuleSubtreeStream stream_bracketedBlock=new RewriteRuleSubtreeStream(adaptor,"rule bracketedBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }

            // Php.g:179:5: ( ( fieldModifier )* FUNCTION UnquotedString parametersDefinition ( bracketedBlock | ';' ) -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? ) | definitionAttribute )
            int alt14=2;
            switch ( input.LA(1) ) {
            case ABSTRACT:
            case AccessModifier:
            case 118:
            case 122:
                {
                switch ( input.LA(2) ) {
                case FUNCTION:
                    {
                    alt14=1;
                    }
                    break;
                case ABSTRACT:
                case AccessModifier:
                case 118:
                case 122:
                    {
                    int LA14_7 = input.LA(3);

                    if ( (synpred19_Php()) ) {
                        alt14=1;
                    }
                    else if ( (true) ) {
                        alt14=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 7, input);

                        throw nvae;

                    }
                    }
                    break;
                case DOLLAR:
                    {
                    alt14=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }

                }
                break;
            case FUNCTION:
                {
                alt14=1;
                }
                break;
            case CONST:
            case DOLLAR:
            case VAR:
                {
                alt14=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // Php.g:179:7: ( fieldModifier )* FUNCTION UnquotedString parametersDefinition ( bracketedBlock | ';' )
                    {
                    // Php.g:179:7: ( fieldModifier )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==ABSTRACT||LA12_0==AccessModifier||LA12_0==118||LA12_0==122) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // Php.g:179:7: fieldModifier
                    	    {
                    	    pushFollow(FOLLOW_fieldModifier_in_classMember537);
                    	    fieldModifier31=fieldModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_fieldModifier.add(fieldModifier31.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    FUNCTION32=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_classMember540); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION32);


                    UnquotedString33=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_classMember542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UnquotedString.add(UnquotedString33);


                    pushFollow(FOLLOW_parametersDefinition_in_classMember544);
                    parametersDefinition34=parametersDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parametersDefinition.add(parametersDefinition34.getTree());

                    // Php.g:179:67: ( bracketedBlock | ';' )
                    int alt13=2;
                    int LA13_0 = input.LA(1);

                    if ( (LA13_0==OPEN_CURLY_BRACE) ) {
                        alt13=1;
                    }
                    else if ( (LA13_0==SEMICOLON) ) {
                        alt13=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 0, input);

                        throw nvae;

                    }
                    switch (alt13) {
                        case 1 :
                            // Php.g:179:68: bracketedBlock
                            {
                            pushFollow(FOLLOW_bracketedBlock_in_classMember547);
                            bracketedBlock35=bracketedBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_bracketedBlock.add(bracketedBlock35.getTree());

                            }
                            break;
                        case 2 :
                            // Php.g:179:85: ';'
                            {
                            char_literal36=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_classMember551); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_SEMICOLON.add(char_literal36);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: UnquotedString, parametersDefinition, fieldModifier, bracketedBlock
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 180:9: -> ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? )
                    {
                        // Php.g:180:12: ^( Method ^( Modifiers ( fieldModifier )* ) UnquotedString parametersDefinition ( bracketedBlock )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Method, "Method")
                        , root_1);

                        // Php.g:180:21: ^( Modifiers ( fieldModifier )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Modifiers, "Modifiers")
                        , root_2);

                        // Php.g:180:33: ( fieldModifier )*
                        while ( stream_fieldModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldModifier.nextTree());

                        }
                        stream_fieldModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_1, 
                        stream_UnquotedString.nextNode()
                        );

                        adaptor.addChild(root_1, stream_parametersDefinition.nextTree());

                        // Php.g:180:85: ( bracketedBlock )?
                        if ( stream_bracketedBlock.hasNext() ) {
                            adaptor.addChild(root_1, stream_bracketedBlock.nextTree());

                        }
                        stream_bracketedBlock.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Php.g:181:7: definitionAttribute
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_definitionAttribute_in_classMember588);
                    definitionAttribute37=definitionAttribute();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, definitionAttribute37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 9, classMember_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classMember"


    public static class definitionAttribute_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "definitionAttribute"
    // Php.g:184:1: definitionAttribute : ( VAR DOLLAR UnquotedString ( EQUALS value )? ';' -> ^( VAR ^( DOLLAR UnquotedString ) ( value )? ) | CONST UnquotedString ( EQUALS value )? ';' -> ^( CONST UnquotedString ( value )? ) | ( fieldModifier )* ( DOLLAR UnquotedString ) ( EQUALS value )? ';' -> ^( Field ^( Modifiers ( fieldModifier )* ) ^( DOLLAR UnquotedString ) ( value )? ) );
    public final PhpParser.definitionAttribute_return definitionAttribute() throws RecognitionException {
        PhpParser.definitionAttribute_return retval = new PhpParser.definitionAttribute_return();
        retval.start = input.LT(1);

        int definitionAttribute_StartIndex = input.index();

        CommonTree root_0 = null;

        Token VAR38=null;
        Token DOLLAR39=null;
        Token UnquotedString40=null;
        Token EQUALS41=null;
        Token char_literal43=null;
        Token CONST44=null;
        Token UnquotedString45=null;
        Token EQUALS46=null;
        Token char_literal48=null;
        Token DOLLAR50=null;
        Token UnquotedString51=null;
        Token EQUALS52=null;
        Token char_literal54=null;
        PhpParser.value_return value42 =null;

        PhpParser.value_return value47 =null;

        PhpParser.fieldModifier_return fieldModifier49 =null;

        PhpParser.value_return value53 =null;


        CommonTree VAR38_tree=null;
        CommonTree DOLLAR39_tree=null;
        CommonTree UnquotedString40_tree=null;
        CommonTree EQUALS41_tree=null;
        CommonTree char_literal43_tree=null;
        CommonTree CONST44_tree=null;
        CommonTree UnquotedString45_tree=null;
        CommonTree EQUALS46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree DOLLAR50_tree=null;
        CommonTree UnquotedString51_tree=null;
        CommonTree EQUALS52_tree=null;
        CommonTree char_literal54_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_VAR=new RewriteRuleTokenStream(adaptor,"token VAR");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_UnquotedString=new RewriteRuleTokenStream(adaptor,"token UnquotedString");
        RewriteRuleTokenStream stream_CONST=new RewriteRuleTokenStream(adaptor,"token CONST");
        RewriteRuleSubtreeStream stream_fieldModifier=new RewriteRuleSubtreeStream(adaptor,"rule fieldModifier");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }

            // Php.g:185:5: ( VAR DOLLAR UnquotedString ( EQUALS value )? ';' -> ^( VAR ^( DOLLAR UnquotedString ) ( value )? ) | CONST UnquotedString ( EQUALS value )? ';' -> ^( CONST UnquotedString ( value )? ) | ( fieldModifier )* ( DOLLAR UnquotedString ) ( EQUALS value )? ';' -> ^( Field ^( Modifiers ( fieldModifier )* ) ^( DOLLAR UnquotedString ) ( value )? ) )
            int alt19=3;
            switch ( input.LA(1) ) {
            case VAR:
                {
                alt19=1;
                }
                break;
            case CONST:
                {
                alt19=2;
                }
                break;
            case ABSTRACT:
            case AccessModifier:
            case DOLLAR:
            case 118:
            case 122:
                {
                alt19=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }

            switch (alt19) {
                case 1 :
                    // Php.g:185:7: VAR DOLLAR UnquotedString ( EQUALS value )? ';'
                    {
                    VAR38=(Token)match(input,VAR,FOLLOW_VAR_in_definitionAttribute613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VAR.add(VAR38);


                    DOLLAR39=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_definitionAttribute615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR39);


                    UnquotedString40=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_definitionAttribute617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UnquotedString.add(UnquotedString40);


                    // Php.g:185:33: ( EQUALS value )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==EQUALS) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // Php.g:185:34: EQUALS value
                            {
                            EQUALS41=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_definitionAttribute620); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS41);


                            pushFollow(FOLLOW_value_in_definitionAttribute622);
                            value42=value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_value.add(value42.getTree());

                            }
                            break;

                    }


                    char_literal43=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_definitionAttribute626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(char_literal43);


                    // AST REWRITE
                    // elements: value, UnquotedString, VAR, DOLLAR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 185:53: -> ^( VAR ^( DOLLAR UnquotedString ) ( value )? )
                    {
                        // Php.g:185:56: ^( VAR ^( DOLLAR UnquotedString ) ( value )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_VAR.nextNode()
                        , root_1);

                        // Php.g:185:62: ^( DOLLAR UnquotedString )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        stream_DOLLAR.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_UnquotedString.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // Php.g:185:87: ( value )?
                        if ( stream_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_value.nextTree());

                        }
                        stream_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Php.g:186:7: CONST UnquotedString ( EQUALS value )? ';'
                    {
                    CONST44=(Token)match(input,CONST,FOLLOW_CONST_in_definitionAttribute650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONST.add(CONST44);


                    UnquotedString45=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_definitionAttribute652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UnquotedString.add(UnquotedString45);


                    // Php.g:186:28: ( EQUALS value )?
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( (LA16_0==EQUALS) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // Php.g:186:29: EQUALS value
                            {
                            EQUALS46=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_definitionAttribute655); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS46);


                            pushFollow(FOLLOW_value_in_definitionAttribute657);
                            value47=value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_value.add(value47.getTree());

                            }
                            break;

                    }


                    char_literal48=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_definitionAttribute661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(char_literal48);


                    // AST REWRITE
                    // elements: value, CONST, UnquotedString
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 186:48: -> ^( CONST UnquotedString ( value )? )
                    {
                        // Php.g:186:51: ^( CONST UnquotedString ( value )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_CONST.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_UnquotedString.nextNode()
                        );

                        // Php.g:186:74: ( value )?
                        if ( stream_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_value.nextTree());

                        }
                        stream_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Php.g:187:7: ( fieldModifier )* ( DOLLAR UnquotedString ) ( EQUALS value )? ';'
                    {
                    // Php.g:187:7: ( fieldModifier )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==ABSTRACT||LA17_0==AccessModifier||LA17_0==118||LA17_0==122) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // Php.g:187:7: fieldModifier
                    	    {
                    	    pushFollow(FOLLOW_fieldModifier_in_definitionAttribute680);
                    	    fieldModifier49=fieldModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_fieldModifier.add(fieldModifier49.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);


                    // Php.g:187:22: ( DOLLAR UnquotedString )
                    // Php.g:187:23: DOLLAR UnquotedString
                    {
                    DOLLAR50=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_definitionAttribute684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR50);


                    UnquotedString51=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_definitionAttribute686); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UnquotedString.add(UnquotedString51);


                    }


                    // Php.g:187:46: ( EQUALS value )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==EQUALS) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // Php.g:187:47: EQUALS value
                            {
                            EQUALS52=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_definitionAttribute690); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS52);


                            pushFollow(FOLLOW_value_in_definitionAttribute692);
                            value53=value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_value.add(value53.getTree());

                            }
                            break;

                    }


                    char_literal54=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_definitionAttribute696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(char_literal54);


                    // AST REWRITE
                    // elements: UnquotedString, value, DOLLAR, fieldModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 187:66: -> ^( Field ^( Modifiers ( fieldModifier )* ) ^( DOLLAR UnquotedString ) ( value )? )
                    {
                        // Php.g:187:69: ^( Field ^( Modifiers ( fieldModifier )* ) ^( DOLLAR UnquotedString ) ( value )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Field, "Field")
                        , root_1);

                        // Php.g:187:77: ^( Modifiers ( fieldModifier )* )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Modifiers, "Modifiers")
                        , root_2);

                        // Php.g:187:89: ( fieldModifier )*
                        while ( stream_fieldModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_fieldModifier.nextTree());

                        }
                        stream_fieldModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        // Php.g:187:105: ^( DOLLAR UnquotedString )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        stream_DOLLAR.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_UnquotedString.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        // Php.g:187:130: ( value )?
                        if ( stream_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_value.nextTree());

                        }
                        stream_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 10, definitionAttribute_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "definitionAttribute"


    public static class classModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classModifier"
    // Php.g:190:1: classModifier : 'abstract' ;
    public final PhpParser.classModifier_return classModifier() throws RecognitionException {
        PhpParser.classModifier_return retval = new PhpParser.classModifier_return();
        retval.start = input.LT(1);

        int classModifier_StartIndex = input.index();

        CommonTree root_0 = null;

        Token string_literal55=null;

        CommonTree string_literal55_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }

            // Php.g:191:5: ( 'abstract' )
            // Php.g:191:7: 'abstract'
            {
            root_0 = (CommonTree)adaptor.nil();


            string_literal55=(Token)match(input,ABSTRACT,FOLLOW_ABSTRACT_in_classModifier738); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal55_tree = 
            (CommonTree)adaptor.create(string_literal55)
            ;
            adaptor.addChild(root_0, string_literal55_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 11, classModifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "classModifier"


    public static class fieldModifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fieldModifier"
    // Php.g:193:1: fieldModifier : ( AccessModifier | 'abstract' | 'static' | 'final' );
    public final PhpParser.fieldModifier_return fieldModifier() throws RecognitionException {
        PhpParser.fieldModifier_return retval = new PhpParser.fieldModifier_return();
        retval.start = input.LT(1);

        int fieldModifier_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set56=null;

        CommonTree set56_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }

            // Php.g:194:5: ( AccessModifier | 'abstract' | 'static' | 'final' )
            // Php.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set56=(Token)input.LT(1);

            if ( input.LA(1)==ABSTRACT||input.LA(1)==AccessModifier||input.LA(1)==118||input.LA(1)==122 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set56)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 12, fieldModifier_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "fieldModifier"


    public static class value_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Php.g:197:1: value : ( 'null' | UnquotedString | atom );
    public final PhpParser.value_return value() throws RecognitionException {
        PhpParser.value_return retval = new PhpParser.value_return();
        retval.start = input.LT(1);

        int value_StartIndex = input.index();

        CommonTree root_0 = null;

        Token string_literal57=null;
        Token UnquotedString58=null;
        PhpParser.atom_return atom59 =null;


        CommonTree string_literal57_tree=null;
        CommonTree UnquotedString58_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }

            // Php.g:198:5: ( 'null' | UnquotedString | atom )
            int alt20=3;
            switch ( input.LA(1) ) {
            case 120:
                {
                int LA20_1 = input.LA(2);

                if ( (synpred29_Php()) ) {
                    alt20=1;
                }
                else if ( (true) ) {
                    alt20=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 20, 1, input);

                    throw nvae;

                }
                }
                break;
            case UnquotedString:
                {
                alt20=2;
                }
                break;
            case ArrayWord:
            case Boolean:
            case DoubleQuotedString:
            case HereDoc:
            case Integer:
            case Real:
            case SingleQuotedString:
            case 119:
                {
                alt20=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // Php.g:198:7: 'null'
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    string_literal57=(Token)match(input,120,FOLLOW_120_in_value783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal57_tree = 
                    (CommonTree)adaptor.create(string_literal57)
                    ;
                    adaptor.addChild(root_0, string_literal57_tree);
                    }

                    }
                    break;
                case 2 :
                    // Php.g:199:7: UnquotedString
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    UnquotedString58=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_value791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UnquotedString58_tree = 
                    (CommonTree)adaptor.create(UnquotedString58)
                    ;
                    adaptor.addChild(root_0, UnquotedString58_tree);
                    }

                    }
                    break;
                case 3 :
                    // Php.g:200:7: atom
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_atom_in_value799);
                    atom59=atom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, atom59.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 13, value_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "value"


    public static class complexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "complexStatement"
    // Php.g:203:1: complexStatement : ( ifStatement | ( FOR )=> forHeader statement -> ^( FOR forHeader statement ) | ( FOR_EACH )=> forHeader statement -> ^( FOR_EACH forHeader statement ) | ( WHILE )=> whileCondition statement -> ^( WHILE whileCondition statement ) | DO statement whileCondition -> ^( DO statement whileCondition ) | SWITCH '(' expression ')' '{' cases '}' -> ^( SWITCH expression cases ) | functionDefinition | TRY statement catchStatement -> ^( TRY statement catchStatement ) );
    public final PhpParser.complexStatement_return complexStatement() throws RecognitionException {
        PhpParser.complexStatement_return retval = new PhpParser.complexStatement_return();
        retval.start = input.LT(1);

        int complexStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DO67=null;
        Token SWITCH70=null;
        Token char_literal71=null;
        Token char_literal73=null;
        Token char_literal74=null;
        Token char_literal76=null;
        Token TRY78=null;
        PhpParser.ifStatement_return ifStatement60 =null;

        PhpParser.forHeader_return forHeader61 =null;

        PhpParser.statement_return statement62 =null;

        PhpParser.forHeader_return forHeader63 =null;

        PhpParser.statement_return statement64 =null;

        PhpParser.whileCondition_return whileCondition65 =null;

        PhpParser.statement_return statement66 =null;

        PhpParser.statement_return statement68 =null;

        PhpParser.whileCondition_return whileCondition69 =null;

        PhpParser.expression_return expression72 =null;

        PhpParser.cases_return cases75 =null;

        PhpParser.functionDefinition_return functionDefinition77 =null;

        PhpParser.statement_return statement79 =null;

        PhpParser.catchStatement_return catchStatement80 =null;


        CommonTree DO67_tree=null;
        CommonTree SWITCH70_tree=null;
        CommonTree char_literal71_tree=null;
        CommonTree char_literal73_tree=null;
        CommonTree char_literal74_tree=null;
        CommonTree char_literal76_tree=null;
        CommonTree TRY78_tree=null;
        RewriteRuleTokenStream stream_DO=new RewriteRuleTokenStream(adaptor,"token DO");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_CURLY_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_CURLY_BRACE");
        RewriteRuleTokenStream stream_TRY=new RewriteRuleTokenStream(adaptor,"token TRY");
        RewriteRuleTokenStream stream_SWITCH=new RewriteRuleTokenStream(adaptor,"token SWITCH");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_cases=new RewriteRuleSubtreeStream(adaptor,"rule cases");
        RewriteRuleSubtreeStream stream_catchStatement=new RewriteRuleSubtreeStream(adaptor,"rule catchStatement");
        RewriteRuleSubtreeStream stream_forHeader=new RewriteRuleSubtreeStream(adaptor,"rule forHeader");
        RewriteRuleSubtreeStream stream_whileCondition=new RewriteRuleSubtreeStream(adaptor,"rule whileCondition");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }

            // Php.g:204:5: ( ifStatement | ( FOR )=> forHeader statement -> ^( FOR forHeader statement ) | ( FOR_EACH )=> forHeader statement -> ^( FOR_EACH forHeader statement ) | ( WHILE )=> whileCondition statement -> ^( WHILE whileCondition statement ) | DO statement whileCondition -> ^( DO statement whileCondition ) | SWITCH '(' expression ')' '{' cases '}' -> ^( SWITCH expression cases ) | functionDefinition | TRY statement catchStatement -> ^( TRY statement catchStatement ) )
            int alt21=8;
            switch ( input.LA(1) ) {
            case IF:
                {
                alt21=1;
                }
                break;
            case PhpStatement:
                {
                switch ( input.LA(2) ) {
                case PhpStatement:
                    {
                    int LA21_7 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 7, input);

                        throw nvae;

                    }
                    }
                    break;
                case GLOBAL:
                    {
                    int LA21_8 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 8, input);

                        throw nvae;

                    }
                    }
                    break;
                case RETURN:
                    {
                    int LA21_9 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 9, input);

                        throw nvae;

                    }
                    }
                    break;
                case RequireOperator:
                    {
                    int LA21_10 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 10, input);

                        throw nvae;

                    }
                    }
                    break;
                case ECHO:
                    {
                    int LA21_11 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 11, input);

                        throw nvae;

                    }
                    }
                    break;
                case PRINT:
                    {
                    int LA21_12 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 12, input);

                        throw nvae;

                    }
                    }
                    break;
                case PRINTF:
                    {
                    int LA21_13 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 13, input);

                        throw nvae;

                    }
                    }
                    break;
                case DIE:
                    {
                    int LA21_14 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 14, input);

                        throw nvae;

                    }
                    }
                    break;
                case UnquotedString:
                    {
                    int LA21_15 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 15, input);

                        throw nvae;

                    }
                    }
                    break;
                case DOLLAR:
                    {
                    int LA21_16 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 16, input);

                        throw nvae;

                    }
                    }
                    break;
                case BANG:
                    {
                    int LA21_17 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 17, input);

                        throw nvae;

                    }
                    }
                    break;
                case MINUS:
                case SUPPRESS_WARNINGS:
                case TILDE:
                    {
                    int LA21_18 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 18, input);

                        throw nvae;

                    }
                    }
                    break;
                case OPEN_BRACE:
                    {
                    int LA21_19 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 19, input);

                        throw nvae;

                    }
                    }
                    break;
                case IncrementOperator:
                    {
                    int LA21_20 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 20, input);

                        throw nvae;

                    }
                    }
                    break;
                case NEW:
                    {
                    int LA21_21 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 21, input);

                        throw nvae;

                    }
                    }
                    break;
                case CLONE:
                    {
                    int LA21_22 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 22, input);

                        throw nvae;

                    }
                    }
                    break;
                case SingleQuotedString:
                    {
                    int LA21_23 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 23, input);

                        throw nvae;

                    }
                    }
                    break;
                case DoubleQuotedString:
                    {
                    int LA21_24 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 24, input);

                        throw nvae;

                    }
                    }
                    break;
                case HereDoc:
                    {
                    int LA21_25 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 25, input);

                        throw nvae;

                    }
                    }
                    break;
                case Integer:
                    {
                    int LA21_26 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 26, input);

                        throw nvae;

                    }
                    }
                    break;
                case Real:
                    {
                    int LA21_27 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 27, input);

                        throw nvae;

                    }
                    }
                    break;
                case Boolean:
                    {
                    int LA21_28 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 28, input);

                        throw nvae;

                    }
                    }
                    break;
                case ArrayWord:
                    {
                    int LA21_29 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 29, input);

                        throw nvae;

                    }
                    }
                    break;
                case 119:
                    {
                    int LA21_30 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 30, input);

                        throw nvae;

                    }
                    }
                    break;
                case 120:
                    {
                    int LA21_31 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 31, input);

                        throw nvae;

                    }
                    }
                    break;
                case AMPERSAND:
                    {
                    int LA21_32 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 32, input);

                        throw nvae;

                    }
                    }
                    break;
                case BodyString:
                    {
                    int LA21_33 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 33, input);

                        throw nvae;

                    }
                    }
                    break;
                case OPEN_CURLY_BRACE:
                    {
                    int LA21_34 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 34, input);

                        throw nvae;

                    }
                    }
                    break;
                case ABSTRACT:
                    {
                    int LA21_35 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 35, input);

                        throw nvae;

                    }
                    }
                    break;
                case CLASS:
                    {
                    int LA21_36 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 36, input);

                        throw nvae;

                    }
                    }
                    break;
                case IF:
                    {
                    int LA21_37 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 37, input);

                        throw nvae;

                    }
                    }
                    break;
                case DO:
                    {
                    int LA21_38 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 38, input);

                        throw nvae;

                    }
                    }
                    break;
                case SWITCH:
                    {
                    int LA21_39 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 39, input);

                        throw nvae;

                    }
                    }
                    break;
                case FUNCTION:
                    {
                    int LA21_40 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 40, input);

                        throw nvae;

                    }
                    }
                    break;
                case TRY:
                    {
                    int LA21_41 = input.LA(3);

                    if ( (synpred32_Php()) ) {
                        alt21=2;
                    }
                    else if ( (synpred33_Php()) ) {
                        alt21=3;
                    }
                    else if ( (synpred34_Php()) ) {
                        alt21=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 41, input);

                        throw nvae;

                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 2, input);

                    throw nvae;

                }

                }
                break;
            case DO:
                {
                alt21=5;
                }
                break;
            case SWITCH:
                {
                alt21=6;
                }
                break;
            case FUNCTION:
                {
                alt21=7;
                }
                break;
            case TRY:
                {
                alt21=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }

            switch (alt21) {
                case 1 :
                    // Php.g:204:7: ifStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_ifStatement_in_complexStatement816);
                    ifStatement60=ifStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifStatement60.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:205:7: ( FOR )=> forHeader statement
                    {
                    pushFollow(FOLLOW_forHeader_in_complexStatement829);
                    forHeader61=forHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forHeader.add(forHeader61.getTree());

                    pushFollow(FOLLOW_statement_in_complexStatement831);
                    statement62=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement62.getTree());

                    // AST REWRITE
                    // elements: forHeader, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 205:35: -> ^( FOR forHeader statement )
                    {
                        // Php.g:205:38: ^( FOR forHeader statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FOR, "FOR")
                        , root_1);

                        adaptor.addChild(root_1, stream_forHeader.nextTree());

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Php.g:206:7: ( FOR_EACH )=> forHeader statement
                    {
                    pushFollow(FOLLOW_forHeader_in_complexStatement854);
                    forHeader63=forHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forHeader.add(forHeader63.getTree());

                    pushFollow(FOLLOW_statement_in_complexStatement856);
                    statement64=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement64.getTree());

                    // AST REWRITE
                    // elements: statement, forHeader
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 206:40: -> ^( FOR_EACH forHeader statement )
                    {
                        // Php.g:206:43: ^( FOR_EACH forHeader statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(FOR_EACH, "FOR_EACH")
                        , root_1);

                        adaptor.addChild(root_1, stream_forHeader.nextTree());

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // Php.g:207:7: ( WHILE )=> whileCondition statement
                    {
                    pushFollow(FOLLOW_whileCondition_in_complexStatement879);
                    whileCondition65=whileCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whileCondition.add(whileCondition65.getTree());

                    pushFollow(FOLLOW_statement_in_complexStatement881);
                    statement66=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement66.getTree());

                    // AST REWRITE
                    // elements: whileCondition, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 207:42: -> ^( WHILE whileCondition statement )
                    {
                        // Php.g:207:45: ^( WHILE whileCondition statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(WHILE, "WHILE")
                        , root_1);

                        adaptor.addChild(root_1, stream_whileCondition.nextTree());

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // Php.g:208:7: DO statement whileCondition
                    {
                    DO67=(Token)match(input,DO,FOLLOW_DO_in_complexStatement899); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DO.add(DO67);


                    pushFollow(FOLLOW_statement_in_complexStatement901);
                    statement68=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement68.getTree());

                    pushFollow(FOLLOW_whileCondition_in_complexStatement903);
                    whileCondition69=whileCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whileCondition.add(whileCondition69.getTree());

                    // AST REWRITE
                    // elements: DO, whileCondition, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 208:35: -> ^( DO statement whileCondition )
                    {
                        // Php.g:208:38: ^( DO statement whileCondition )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_DO.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_1, stream_whileCondition.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // Php.g:209:7: SWITCH '(' expression ')' '{' cases '}'
                    {
                    SWITCH70=(Token)match(input,SWITCH,FOLLOW_SWITCH_in_complexStatement921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SWITCH.add(SWITCH70);


                    char_literal71=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_complexStatement923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(char_literal71);


                    pushFollow(FOLLOW_expression_in_complexStatement925);
                    expression72=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression72.getTree());

                    char_literal73=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_complexStatement927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(char_literal73);


                    char_literal74=(Token)match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_complexStatement929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_CURLY_BRACE.add(char_literal74);


                    pushFollow(FOLLOW_cases_in_complexStatement930);
                    cases75=cases();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cases.add(cases75.getTree());

                    char_literal76=(Token)match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_complexStatement931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_CURLY_BRACE.add(char_literal76);


                    // AST REWRITE
                    // elements: expression, cases, SWITCH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 209:45: -> ^( SWITCH expression cases )
                    {
                        // Php.g:209:48: ^( SWITCH expression cases )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_SWITCH.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_cases.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // Php.g:210:7: functionDefinition
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_functionDefinition_in_complexStatement949);
                    functionDefinition77=functionDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, functionDefinition77.getTree());

                    }
                    break;
                case 8 :
                    // Php.g:211:7: TRY statement catchStatement
                    {
                    TRY78=(Token)match(input,TRY,FOLLOW_TRY_in_complexStatement957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TRY.add(TRY78);


                    pushFollow(FOLLOW_statement_in_complexStatement959);
                    statement79=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement79.getTree());

                    pushFollow(FOLLOW_catchStatement_in_complexStatement961);
                    catchStatement80=catchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_catchStatement.add(catchStatement80.getTree());

                    // AST REWRITE
                    // elements: TRY, statement, catchStatement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 211:36: -> ^( TRY statement catchStatement )
                    {
                        // Php.g:211:39: ^( TRY statement catchStatement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_TRY.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_1, stream_catchStatement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 14, complexStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "complexStatement"


    public static class catchStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catchStatement"
    // Php.g:214:1: catchStatement : ( CATCH )=> whileCondition statement -> ^( CATCH whileCondition statement ) ;
    public final PhpParser.catchStatement_return catchStatement() throws RecognitionException {
        PhpParser.catchStatement_return retval = new PhpParser.catchStatement_return();
        retval.start = input.LT(1);

        int catchStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.whileCondition_return whileCondition81 =null;

        PhpParser.statement_return statement82 =null;


        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_whileCondition=new RewriteRuleSubtreeStream(adaptor,"rule whileCondition");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }

            // Php.g:215:2: ( ( CATCH )=> whileCondition statement -> ^( CATCH whileCondition statement ) )
            // Php.g:215:4: ( CATCH )=> whileCondition statement
            {
            pushFollow(FOLLOW_whileCondition_in_catchStatement993);
            whileCondition81=whileCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_whileCondition.add(whileCondition81.getTree());

            pushFollow(FOLLOW_statement_in_catchStatement995);
            statement82=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement82.getTree());

            // AST REWRITE
            // elements: whileCondition, statement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 215:39: -> ^( CATCH whileCondition statement )
            {
                // Php.g:215:42: ^( CATCH whileCondition statement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(CATCH, "CATCH")
                , root_1);

                adaptor.addChild(root_1, stream_whileCondition.nextTree());

                adaptor.addChild(root_1, stream_statement.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 15, catchStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "catchStatement"


    public static class simpleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simpleStatement"
    // Php.g:219:1: simpleStatement : ( GLOBAL ^ name ( ',' ! name )* | RETURN ^ ( expression )? | simpleRequire | ( ECHO | PRINT | PRINTF | DIE )=> outputFunctions | ( BREAK | CONTINUE | THROW | USE )=> ignoreOthers | expression );
    public final PhpParser.simpleStatement_return simpleStatement() throws RecognitionException {
        PhpParser.simpleStatement_return retval = new PhpParser.simpleStatement_return();
        retval.start = input.LT(1);

        int simpleStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token GLOBAL83=null;
        Token char_literal85=null;
        Token RETURN87=null;
        PhpParser.name_return name84 =null;

        PhpParser.name_return name86 =null;

        PhpParser.expression_return expression88 =null;

        PhpParser.simpleRequire_return simpleRequire89 =null;

        PhpParser.outputFunctions_return outputFunctions90 =null;

        PhpParser.ignoreOthers_return ignoreOthers91 =null;

        PhpParser.expression_return expression92 =null;


        CommonTree GLOBAL83_tree=null;
        CommonTree char_literal85_tree=null;
        CommonTree RETURN87_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }

            // Php.g:220:5: ( GLOBAL ^ name ( ',' ! name )* | RETURN ^ ( expression )? | simpleRequire | ( ECHO | PRINT | PRINTF | DIE )=> outputFunctions | ( BREAK | CONTINUE | THROW | USE )=> ignoreOthers | expression )
            int alt24=6;
            alt24 = dfa24.predict(input);
            switch (alt24) {
                case 1 :
                    // Php.g:220:7: GLOBAL ^ name ( ',' ! name )*
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    GLOBAL83=(Token)match(input,GLOBAL,FOLLOW_GLOBAL_in_simpleStatement1020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GLOBAL83_tree = 
                    (CommonTree)adaptor.create(GLOBAL83)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(GLOBAL83_tree, root_0);
                    }

                    pushFollow(FOLLOW_name_in_simpleStatement1023);
                    name84=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name84.getTree());

                    // Php.g:220:20: ( ',' ! name )*
                    loop22:
                    do {
                        int alt22=2;
                        int LA22_0 = input.LA(1);

                        if ( (LA22_0==COMMA) ) {
                            alt22=1;
                        }


                        switch (alt22) {
                    	case 1 :
                    	    // Php.g:220:21: ',' ! name
                    	    {
                    	    char_literal85=(Token)match(input,COMMA,FOLLOW_COMMA_in_simpleStatement1026); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_name_in_simpleStatement1029);
                    	    name86=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name86.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop22;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // Php.g:221:7: RETURN ^ ( expression )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    RETURN87=(Token)match(input,RETURN,FOLLOW_RETURN_in_simpleStatement1039); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETURN87_tree = 
                    (CommonTree)adaptor.create(RETURN87)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(RETURN87_tree, root_0);
                    }

                    // Php.g:221:15: ( expression )?
                    int alt23=2;
                    alt23 = dfa23.predict(input);
                    switch (alt23) {
                        case 1 :
                            // Php.g:221:15: expression
                            {
                            pushFollow(FOLLOW_expression_in_simpleStatement1042);
                            expression88=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression88.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Php.g:222:7: simpleRequire
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_simpleRequire_in_simpleStatement1051);
                    simpleRequire89=simpleRequire();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleRequire89.getTree());

                    }
                    break;
                case 4 :
                    // Php.g:223:7: ( ECHO | PRINT | PRINTF | DIE )=> outputFunctions
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_outputFunctions_in_simpleStatement1076);
                    outputFunctions90=outputFunctions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputFunctions90.getTree());

                    }
                    break;
                case 5 :
                    // Php.g:224:7: ( BREAK | CONTINUE | THROW | USE )=> ignoreOthers
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_ignoreOthers_in_simpleStatement1105);
                    ignoreOthers91=ignoreOthers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ignoreOthers91.getTree());

                    }
                    break;
                case 6 :
                    // Php.g:225:7: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_simpleStatement1115);
                    expression92=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression92.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 16, simpleStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simpleStatement"


    public static class simpleRequire_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simpleRequire"
    // Php.g:228:1: simpleRequire : RequireOperator ^ expression ;
    public final PhpParser.simpleRequire_return simpleRequire() throws RecognitionException {
        PhpParser.simpleRequire_return retval = new PhpParser.simpleRequire_return();
        retval.start = input.LT(1);

        int simpleRequire_StartIndex = input.index();

        CommonTree root_0 = null;

        Token RequireOperator93=null;
        PhpParser.expression_return expression94 =null;


        CommonTree RequireOperator93_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }

            // Php.g:229:5: ( RequireOperator ^ expression )
            // Php.g:229:7: RequireOperator ^ expression
            {
            root_0 = (CommonTree)adaptor.nil();


            RequireOperator93=(Token)match(input,RequireOperator,FOLLOW_RequireOperator_in_simpleRequire1132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RequireOperator93_tree = 
            (CommonTree)adaptor.create(RequireOperator93)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(RequireOperator93_tree, root_0);
            }

            pushFollow(FOLLOW_expression_in_simpleRequire1135);
            expression94=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression94.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 17, simpleRequire_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "simpleRequire"


    public static class ifStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ifStatement"
    // Php.g:232:1: ifStatement options {backtrack=true; } : IF '(' expression ')' statement ( conditional )? -> ^( IF expression statement ( conditional )? ) ;
    public final PhpParser.ifStatement_return ifStatement() throws RecognitionException {
        PhpParser.ifStatement_return retval = new PhpParser.ifStatement_return();
        retval.start = input.LT(1);

        int ifStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IF95=null;
        Token char_literal96=null;
        Token char_literal98=null;
        PhpParser.expression_return expression97 =null;

        PhpParser.statement_return statement99 =null;

        PhpParser.conditional_return conditional100 =null;


        CommonTree IF95_tree=null;
        CommonTree char_literal96_tree=null;
        CommonTree char_literal98_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_conditional=new RewriteRuleSubtreeStream(adaptor,"rule conditional");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }

            // Php.g:234:5: ( IF '(' expression ')' statement ( conditional )? -> ^( IF expression statement ( conditional )? ) )
            // Php.g:234:7: IF '(' expression ')' statement ( conditional )?
            {
            IF95=(Token)match(input,IF,FOLLOW_IF_in_ifStatement1163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IF.add(IF95);


            char_literal96=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_ifStatement1165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(char_literal96);


            pushFollow(FOLLOW_expression_in_ifStatement1167);
            expression97=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression97.getTree());

            char_literal98=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_ifStatement1169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(char_literal98);


            pushFollow(FOLLOW_statement_in_ifStatement1171);
            statement99=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_statement.add(statement99.getTree());

            // Php.g:234:39: ( conditional )?
            int alt25=2;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    // Php.g:234:39: conditional
                    {
                    pushFollow(FOLLOW_conditional_in_ifStatement1173);
                    conditional100=conditional();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditional.add(conditional100.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: conditional, statement, expression, IF
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 234:52: -> ^( IF expression statement ( conditional )? )
            {
                // Php.g:234:55: ^( IF expression statement ( conditional )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_IF.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_1, stream_statement.nextTree());

                // Php.g:234:81: ( conditional )?
                if ( stream_conditional.hasNext() ) {
                    adaptor.addChild(root_1, stream_conditional.nextTree());

                }
                stream_conditional.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 18, ifStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ifStatement"


    public static class conditional_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "conditional"
    // Php.g:237:1: conditional : ( ( ELSE )=> ELSE statement -> ^( ELSE statement ) | ( ELSE_IF )=> ELSE_IF '(' expression ')' statement ( conditional )? -> ^( IF expression statement ( conditional )? ) );
    public final PhpParser.conditional_return conditional() throws RecognitionException {
        PhpParser.conditional_return retval = new PhpParser.conditional_return();
        retval.start = input.LT(1);

        int conditional_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ELSE101=null;
        Token ELSE_IF103=null;
        Token char_literal104=null;
        Token char_literal106=null;
        PhpParser.statement_return statement102 =null;

        PhpParser.expression_return expression105 =null;

        PhpParser.statement_return statement107 =null;

        PhpParser.conditional_return conditional108 =null;


        CommonTree ELSE101_tree=null;
        CommonTree ELSE_IF103_tree=null;
        CommonTree char_literal104_tree=null;
        CommonTree char_literal106_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_ELSE_IF=new RewriteRuleTokenStream(adaptor,"token ELSE_IF");
        RewriteRuleTokenStream stream_ELSE=new RewriteRuleTokenStream(adaptor,"token ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_conditional=new RewriteRuleSubtreeStream(adaptor,"rule conditional");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }

            // Php.g:238:5: ( ( ELSE )=> ELSE statement -> ^( ELSE statement ) | ( ELSE_IF )=> ELSE_IF '(' expression ')' statement ( conditional )? -> ^( IF expression statement ( conditional )? ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ELSE) && (synpred53_Php())) {
                alt27=1;
            }
            else if ( (LA27_0==ELSE_IF) && (synpred54_Php())) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // Php.g:238:7: ( ELSE )=> ELSE statement
                    {
                    ELSE101=(Token)match(input,ELSE,FOLLOW_ELSE_in_conditional1209); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE.add(ELSE101);


                    pushFollow(FOLLOW_statement_in_conditional1211);
                    statement102=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement102.getTree());

                    // AST REWRITE
                    // elements: statement, ELSE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 238:31: -> ^( ELSE statement )
                    {
                        // Php.g:238:34: ^( ELSE statement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_ELSE.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Php.g:239:7: ( ELSE_IF )=> ELSE_IF '(' expression ')' statement ( conditional )?
                    {
                    ELSE_IF103=(Token)match(input,ELSE_IF,FOLLOW_ELSE_IF_in_conditional1232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELSE_IF.add(ELSE_IF103);


                    char_literal104=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_conditional1234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(char_literal104);


                    pushFollow(FOLLOW_expression_in_conditional1236);
                    expression105=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression105.getTree());

                    char_literal106=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_conditional1238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(char_literal106);


                    pushFollow(FOLLOW_statement_in_conditional1240);
                    statement107=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement107.getTree());

                    // Php.g:239:56: ( conditional )?
                    int alt26=2;
                    alt26 = dfa26.predict(input);
                    switch (alt26) {
                        case 1 :
                            // Php.g:239:56: conditional
                            {
                            pushFollow(FOLLOW_conditional_in_conditional1242);
                            conditional108=conditional();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_conditional.add(conditional108.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: expression, conditional, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 239:69: -> ^( IF expression statement ( conditional )? )
                    {
                        // Php.g:239:72: ^( IF expression statement ( conditional )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(IF, "IF")
                        , root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_statement.nextTree());

                        // Php.g:239:98: ( conditional )?
                        if ( stream_conditional.hasNext() ) {
                            adaptor.addChild(root_1, stream_conditional.nextTree());

                        }
                        stream_conditional.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 19, conditional_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "conditional"


    public static class forHeader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forHeader"
    // Php.g:242:1: forHeader : ignoreStatement ;
    public final PhpParser.forHeader_return forHeader() throws RecognitionException {
        PhpParser.forHeader_return retval = new PhpParser.forHeader_return();
        retval.start = input.LT(1);

        int forHeader_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.ignoreStatement_return ignoreStatement109 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }

            // Php.g:243:5: ( ignoreStatement )
            // Php.g:243:7: ignoreStatement
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_ignoreStatement_in_forHeader1273);
            ignoreStatement109=ignoreStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ignoreStatement109.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 20, forHeader_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "forHeader"


    public static class whileCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "whileCondition"
    // Php.g:246:1: whileCondition : ignoreStatement ;
    public final PhpParser.whileCondition_return whileCondition() throws RecognitionException {
        PhpParser.whileCondition_return retval = new PhpParser.whileCondition_return();
        retval.start = input.LT(1);

        int whileCondition_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.ignoreStatement_return ignoreStatement110 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }

            // Php.g:247:5: ( ignoreStatement )
            // Php.g:247:7: ignoreStatement
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_ignoreStatement_in_whileCondition1290);
            ignoreStatement110=ignoreStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ignoreStatement110.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 21, whileCondition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "whileCondition"


    public static class ignoreOthers_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ignoreOthers"
    // Php.g:250:1: ignoreOthers : ignoreStatement ;
    public final PhpParser.ignoreOthers_return ignoreOthers() throws RecognitionException {
        PhpParser.ignoreOthers_return retval = new PhpParser.ignoreOthers_return();
        retval.start = input.LT(1);

        int ignoreOthers_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.ignoreStatement_return ignoreStatement111 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }

            // Php.g:251:5: ( ignoreStatement )
            // Php.g:251:7: ignoreStatement
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_ignoreStatement_in_ignoreOthers1307);
            ignoreStatement111=ignoreStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ignoreStatement111.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 22, ignoreOthers_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ignoreOthers"


    public static class cases_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cases"
    // Php.g:254:1: cases : ( casestatement )* ( defaultcase )? ;
    public final PhpParser.cases_return cases() throws RecognitionException {
        PhpParser.cases_return retval = new PhpParser.cases_return();
        retval.start = input.LT(1);

        int cases_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.casestatement_return casestatement112 =null;

        PhpParser.defaultcase_return defaultcase113 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }

            // Php.g:255:5: ( ( casestatement )* ( defaultcase )? )
            // Php.g:255:7: ( casestatement )* ( defaultcase )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // Php.g:255:7: ( casestatement )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==CASE) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // Php.g:255:7: casestatement
            	    {
            	    pushFollow(FOLLOW_casestatement_in_cases1325);
            	    casestatement112=casestatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, casestatement112.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // Php.g:255:23: ( defaultcase )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==DEFAULT) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // Php.g:255:23: defaultcase
                    {
                    pushFollow(FOLLOW_defaultcase_in_cases1329);
                    defaultcase113=defaultcase();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultcase113.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 23, cases_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "cases"


    public static class casestatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "casestatement"
    // Php.g:258:1: casestatement : CASE ^ expression ':' ! ( statement )* ;
    public final PhpParser.casestatement_return casestatement() throws RecognitionException {
        PhpParser.casestatement_return retval = new PhpParser.casestatement_return();
        retval.start = input.LT(1);

        int casestatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token CASE114=null;
        Token char_literal116=null;
        PhpParser.expression_return expression115 =null;

        PhpParser.statement_return statement117 =null;


        CommonTree CASE114_tree=null;
        CommonTree char_literal116_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }

            // Php.g:259:5: ( CASE ^ expression ':' ! ( statement )* )
            // Php.g:259:7: CASE ^ expression ':' ! ( statement )*
            {
            root_0 = (CommonTree)adaptor.nil();


            CASE114=(Token)match(input,CASE,FOLLOW_CASE_in_casestatement1347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CASE114_tree = 
            (CommonTree)adaptor.create(CASE114)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(CASE114_tree, root_0);
            }

            pushFollow(FOLLOW_expression_in_casestatement1350);
            expression115=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression115.getTree());

            char_literal116=(Token)match(input,COLON,FOLLOW_COLON_in_casestatement1352); if (state.failed) return retval;

            // Php.g:259:29: ( statement )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( ((LA30_0 >= ABSTRACT && LA30_0 <= AMPERSAND)||LA30_0==ArrayWord||LA30_0==BANG||(LA30_0 >= BodyString && LA30_0 <= Boolean)||LA30_0==CLASS||LA30_0==CLONE||LA30_0==DIE||(LA30_0 >= DO && LA30_0 <= DOLLAR)||(LA30_0 >= DoubleQuotedString && LA30_0 <= ECHO)||LA30_0==FUNCTION||LA30_0==GLOBAL||LA30_0==HereDoc||LA30_0==IF||(LA30_0 >= IncrementOperator && LA30_0 <= Integer)||LA30_0==MINUS||LA30_0==NEW||(LA30_0 >= OPEN_BRACE && LA30_0 <= OPEN_CURLY_BRACE)||(LA30_0 >= PRINT && LA30_0 <= PRINTF)||LA30_0==PhpStatement||(LA30_0 >= RETURN && LA30_0 <= RequireOperator)||(LA30_0 >= SUPPRESS_WARNINGS && LA30_0 <= SWITCH)||LA30_0==SingleQuotedString||(LA30_0 >= TILDE && LA30_0 <= TRY)||LA30_0==UnquotedString||(LA30_0 >= 119 && LA30_0 <= 120)) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // Php.g:259:29: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_casestatement1355);
            	    statement117=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement117.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 24, casestatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "casestatement"


    public static class defaultcase_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "defaultcase"
    // Php.g:262:1: defaultcase : ( DEFAULT ^ ':' ! ( statement )* ) ;
    public final PhpParser.defaultcase_return defaultcase() throws RecognitionException {
        PhpParser.defaultcase_return retval = new PhpParser.defaultcase_return();
        retval.start = input.LT(1);

        int defaultcase_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DEFAULT118=null;
        Token char_literal119=null;
        PhpParser.statement_return statement120 =null;


        CommonTree DEFAULT118_tree=null;
        CommonTree char_literal119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }

            // Php.g:263:5: ( ( DEFAULT ^ ':' ! ( statement )* ) )
            // Php.g:263:7: ( DEFAULT ^ ':' ! ( statement )* )
            {
            root_0 = (CommonTree)adaptor.nil();


            // Php.g:263:7: ( DEFAULT ^ ':' ! ( statement )* )
            // Php.g:263:8: DEFAULT ^ ':' ! ( statement )*
            {
            DEFAULT118=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultcase1375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEFAULT118_tree = 
            (CommonTree)adaptor.create(DEFAULT118)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(DEFAULT118_tree, root_0);
            }

            char_literal119=(Token)match(input,COLON,FOLLOW_COLON_in_defaultcase1378); if (state.failed) return retval;

            // Php.g:263:22: ( statement )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( ((LA31_0 >= ABSTRACT && LA31_0 <= AMPERSAND)||LA31_0==ArrayWord||LA31_0==BANG||(LA31_0 >= BodyString && LA31_0 <= Boolean)||LA31_0==CLASS||LA31_0==CLONE||LA31_0==DIE||(LA31_0 >= DO && LA31_0 <= DOLLAR)||(LA31_0 >= DoubleQuotedString && LA31_0 <= ECHO)||LA31_0==FUNCTION||LA31_0==GLOBAL||LA31_0==HereDoc||LA31_0==IF||(LA31_0 >= IncrementOperator && LA31_0 <= Integer)||LA31_0==MINUS||LA31_0==NEW||(LA31_0 >= OPEN_BRACE && LA31_0 <= OPEN_CURLY_BRACE)||(LA31_0 >= PRINT && LA31_0 <= PRINTF)||LA31_0==PhpStatement||(LA31_0 >= RETURN && LA31_0 <= RequireOperator)||(LA31_0 >= SUPPRESS_WARNINGS && LA31_0 <= SWITCH)||LA31_0==SingleQuotedString||(LA31_0 >= TILDE && LA31_0 <= TRY)||LA31_0==UnquotedString||(LA31_0 >= 119 && LA31_0 <= 120)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // Php.g:263:22: statement
            	    {
            	    pushFollow(FOLLOW_statement_in_defaultcase1381);
            	    statement120=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement120.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 25, defaultcase_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "defaultcase"


    public static class functionDefinition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "functionDefinition"
    // Php.g:266:1: functionDefinition : FUNCTION UnquotedString parametersDefinition bracketedBlock -> ^( FUNCTION UnquotedString parametersDefinition bracketedBlock ) ;
    public final PhpParser.functionDefinition_return functionDefinition() throws RecognitionException {
        PhpParser.functionDefinition_return retval = new PhpParser.functionDefinition_return();
        retval.start = input.LT(1);

        int functionDefinition_StartIndex = input.index();

        CommonTree root_0 = null;

        Token FUNCTION121=null;
        Token UnquotedString122=null;
        PhpParser.parametersDefinition_return parametersDefinition123 =null;

        PhpParser.bracketedBlock_return bracketedBlock124 =null;


        CommonTree FUNCTION121_tree=null;
        CommonTree UnquotedString122_tree=null;
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_UnquotedString=new RewriteRuleTokenStream(adaptor,"token UnquotedString");
        RewriteRuleSubtreeStream stream_parametersDefinition=new RewriteRuleSubtreeStream(adaptor,"rule parametersDefinition");
        RewriteRuleSubtreeStream stream_bracketedBlock=new RewriteRuleSubtreeStream(adaptor,"rule bracketedBlock");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }

            // Php.g:267:5: ( FUNCTION UnquotedString parametersDefinition bracketedBlock -> ^( FUNCTION UnquotedString parametersDefinition bracketedBlock ) )
            // Php.g:267:7: FUNCTION UnquotedString parametersDefinition bracketedBlock
            {
            FUNCTION121=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDefinition1400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FUNCTION.add(FUNCTION121);


            UnquotedString122=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_functionDefinition1402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UnquotedString.add(UnquotedString122);


            pushFollow(FOLLOW_parametersDefinition_in_functionDefinition1404);
            parametersDefinition123=parametersDefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_parametersDefinition.add(parametersDefinition123.getTree());

            pushFollow(FOLLOW_bracketedBlock_in_functionDefinition1406);
            bracketedBlock124=bracketedBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bracketedBlock.add(bracketedBlock124.getTree());

            // AST REWRITE
            // elements: FUNCTION, UnquotedString, bracketedBlock, parametersDefinition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 267:67: -> ^( FUNCTION UnquotedString parametersDefinition bracketedBlock )
            {
                // Php.g:268:9: ^( FUNCTION UnquotedString parametersDefinition bracketedBlock )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_FUNCTION.nextNode()
                , root_1);

                adaptor.addChild(root_1, 
                stream_UnquotedString.nextNode()
                );

                adaptor.addChild(root_1, stream_parametersDefinition.nextTree());

                adaptor.addChild(root_1, stream_bracketedBlock.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 26, functionDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "functionDefinition"


    public static class parametersDefinition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "parametersDefinition"
    // Php.g:271:1: parametersDefinition : OPEN_BRACE ( paramDef ( COMMA paramDef )* )? CLOSE_BRACE -> ^( Params ( paramDef )* ) ;
    public final PhpParser.parametersDefinition_return parametersDefinition() throws RecognitionException {
        PhpParser.parametersDefinition_return retval = new PhpParser.parametersDefinition_return();
        retval.start = input.LT(1);

        int parametersDefinition_StartIndex = input.index();

        CommonTree root_0 = null;

        Token OPEN_BRACE125=null;
        Token COMMA127=null;
        Token CLOSE_BRACE129=null;
        PhpParser.paramDef_return paramDef126 =null;

        PhpParser.paramDef_return paramDef128 =null;


        CommonTree OPEN_BRACE125_tree=null;
        CommonTree COMMA127_tree=null;
        CommonTree CLOSE_BRACE129_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_paramDef=new RewriteRuleSubtreeStream(adaptor,"rule paramDef");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }

            // Php.g:272:5: ( OPEN_BRACE ( paramDef ( COMMA paramDef )* )? CLOSE_BRACE -> ^( Params ( paramDef )* ) )
            // Php.g:272:7: OPEN_BRACE ( paramDef ( COMMA paramDef )* )? CLOSE_BRACE
            {
            OPEN_BRACE125=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_parametersDefinition1444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE125);


            // Php.g:272:18: ( paramDef ( COMMA paramDef )* )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==AMPERSAND||LA33_0==ArrayWord||LA33_0==DOLLAR||LA33_0==UnquotedString) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // Php.g:272:19: paramDef ( COMMA paramDef )*
                    {
                    pushFollow(FOLLOW_paramDef_in_parametersDefinition1447);
                    paramDef126=paramDef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_paramDef.add(paramDef126.getTree());

                    // Php.g:272:28: ( COMMA paramDef )*
                    loop32:
                    do {
                        int alt32=2;
                        int LA32_0 = input.LA(1);

                        if ( (LA32_0==COMMA) ) {
                            alt32=1;
                        }


                        switch (alt32) {
                    	case 1 :
                    	    // Php.g:272:29: COMMA paramDef
                    	    {
                    	    COMMA127=(Token)match(input,COMMA,FOLLOW_COMMA_in_parametersDefinition1450); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA127);


                    	    pushFollow(FOLLOW_paramDef_in_parametersDefinition1452);
                    	    paramDef128=paramDef();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_paramDef.add(paramDef128.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop32;
                        }
                    } while (true);


                    }
                    break;

            }


            CLOSE_BRACE129=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_parametersDefinition1458); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE129);


            // AST REWRITE
            // elements: paramDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 272:60: -> ^( Params ( paramDef )* )
            {
                // Php.g:272:63: ^( Params ( paramDef )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(Params, "Params")
                , root_1);

                // Php.g:272:72: ( paramDef )*
                while ( stream_paramDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_paramDef.nextTree());

                }
                stream_paramDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 27, parametersDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "parametersDefinition"


    public static class paramDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "paramDef"
    // Php.g:275:1: paramDef : ( UnquotedString | ArrayWord )? paramName ( EQUALS ^ atomOrReference )? ;
    public final PhpParser.paramDef_return paramDef() throws RecognitionException {
        PhpParser.paramDef_return retval = new PhpParser.paramDef_return();
        retval.start = input.LT(1);

        int paramDef_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set130=null;
        Token EQUALS132=null;
        PhpParser.paramName_return paramName131 =null;

        PhpParser.atomOrReference_return atomOrReference133 =null;


        CommonTree set130_tree=null;
        CommonTree EQUALS132_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }

            // Php.g:276:5: ( ( UnquotedString | ArrayWord )? paramName ( EQUALS ^ atomOrReference )? )
            // Php.g:276:7: ( UnquotedString | ArrayWord )? paramName ( EQUALS ^ atomOrReference )?
            {
            root_0 = (CommonTree)adaptor.nil();


            // Php.g:276:7: ( UnquotedString | ArrayWord )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==ArrayWord||LA34_0==UnquotedString) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // Php.g:
                    {
                    set130=(Token)input.LT(1);

                    if ( input.LA(1)==ArrayWord||input.LA(1)==UnquotedString ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (CommonTree)adaptor.create(set130)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_paramName_in_paramDef1494);
            paramName131=paramName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, paramName131.getTree());

            // Php.g:276:47: ( EQUALS ^ atomOrReference )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==EQUALS) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // Php.g:276:48: EQUALS ^ atomOrReference
                    {
                    EQUALS132=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_paramDef1497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS132_tree = 
                    (CommonTree)adaptor.create(EQUALS132)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(EQUALS132_tree, root_0);
                    }

                    pushFollow(FOLLOW_atomOrReference_in_paramDef1500);
                    atomOrReference133=atomOrReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, atomOrReference133.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 28, paramDef_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "paramDef"


    public static class paramName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "paramName"
    // Php.g:279:1: paramName : ( DOLLAR ^ UnquotedString | AMPERSAND DOLLAR UnquotedString -> ^( AMPERSAND ^( DOLLAR UnquotedString ) ) );
    public final PhpParser.paramName_return paramName() throws RecognitionException {
        PhpParser.paramName_return retval = new PhpParser.paramName_return();
        retval.start = input.LT(1);

        int paramName_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DOLLAR134=null;
        Token UnquotedString135=null;
        Token AMPERSAND136=null;
        Token DOLLAR137=null;
        Token UnquotedString138=null;

        CommonTree DOLLAR134_tree=null;
        CommonTree UnquotedString135_tree=null;
        CommonTree AMPERSAND136_tree=null;
        CommonTree DOLLAR137_tree=null;
        CommonTree UnquotedString138_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_AMPERSAND=new RewriteRuleTokenStream(adaptor,"token AMPERSAND");
        RewriteRuleTokenStream stream_UnquotedString=new RewriteRuleTokenStream(adaptor,"token UnquotedString");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }

            // Php.g:280:5: ( DOLLAR ^ UnquotedString | AMPERSAND DOLLAR UnquotedString -> ^( AMPERSAND ^( DOLLAR UnquotedString ) ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DOLLAR) ) {
                alt36=1;
            }
            else if ( (LA36_0==AMPERSAND) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // Php.g:280:7: DOLLAR ^ UnquotedString
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    DOLLAR134=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_paramName1519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR134_tree = 
                    (CommonTree)adaptor.create(DOLLAR134)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(DOLLAR134_tree, root_0);
                    }

                    UnquotedString135=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_paramName1522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UnquotedString135_tree = 
                    (CommonTree)adaptor.create(UnquotedString135)
                    ;
                    adaptor.addChild(root_0, UnquotedString135_tree);
                    }

                    }
                    break;
                case 2 :
                    // Php.g:281:7: AMPERSAND DOLLAR UnquotedString
                    {
                    AMPERSAND136=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_paramName1530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AMPERSAND.add(AMPERSAND136);


                    DOLLAR137=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_paramName1532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR137);


                    UnquotedString138=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_paramName1534); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UnquotedString.add(UnquotedString138);


                    // AST REWRITE
                    // elements: DOLLAR, UnquotedString, AMPERSAND
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 281:39: -> ^( AMPERSAND ^( DOLLAR UnquotedString ) )
                    {
                        // Php.g:281:42: ^( AMPERSAND ^( DOLLAR UnquotedString ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_AMPERSAND.nextNode()
                        , root_1);

                        // Php.g:281:54: ^( DOLLAR UnquotedString )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(
                        stream_DOLLAR.nextNode()
                        , root_2);

                        adaptor.addChild(root_2, 
                        stream_UnquotedString.nextNode()
                        );

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 29, paramName_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "paramName"


    public static class outputFunctions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "outputFunctions"
    // Php.g:284:1: outputFunctions : ( ECHO ^ commaList | PRINT ^ commaList | PRINTF ^ '(' ! commaList ')' !| DIE ^ '(' ! commaList ')' !);
    public final PhpParser.outputFunctions_return outputFunctions() throws RecognitionException {
        PhpParser.outputFunctions_return retval = new PhpParser.outputFunctions_return();
        retval.start = input.LT(1);

        int outputFunctions_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ECHO139=null;
        Token PRINT141=null;
        Token PRINTF143=null;
        Token char_literal144=null;
        Token char_literal146=null;
        Token DIE147=null;
        Token char_literal148=null;
        Token char_literal150=null;
        PhpParser.commaList_return commaList140 =null;

        PhpParser.commaList_return commaList142 =null;

        PhpParser.commaList_return commaList145 =null;

        PhpParser.commaList_return commaList149 =null;


        CommonTree ECHO139_tree=null;
        CommonTree PRINT141_tree=null;
        CommonTree PRINTF143_tree=null;
        CommonTree char_literal144_tree=null;
        CommonTree char_literal146_tree=null;
        CommonTree DIE147_tree=null;
        CommonTree char_literal148_tree=null;
        CommonTree char_literal150_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }

            // Php.g:285:5: ( ECHO ^ commaList | PRINT ^ commaList | PRINTF ^ '(' ! commaList ')' !| DIE ^ '(' ! commaList ')' !)
            int alt37=4;
            switch ( input.LA(1) ) {
            case ECHO:
                {
                alt37=1;
                }
                break;
            case PRINT:
                {
                alt37=2;
                }
                break;
            case PRINTF:
                {
                alt37=3;
                }
                break;
            case DIE:
                {
                alt37=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }

            switch (alt37) {
                case 1 :
                    // Php.g:285:7: ECHO ^ commaList
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    ECHO139=(Token)match(input,ECHO,FOLLOW_ECHO_in_outputFunctions1563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ECHO139_tree = 
                    (CommonTree)adaptor.create(ECHO139)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(ECHO139_tree, root_0);
                    }

                    pushFollow(FOLLOW_commaList_in_outputFunctions1566);
                    commaList140=commaList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commaList140.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:286:7: PRINT ^ commaList
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    PRINT141=(Token)match(input,PRINT,FOLLOW_PRINT_in_outputFunctions1574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRINT141_tree = 
                    (CommonTree)adaptor.create(PRINT141)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(PRINT141_tree, root_0);
                    }

                    pushFollow(FOLLOW_commaList_in_outputFunctions1577);
                    commaList142=commaList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commaList142.getTree());

                    }
                    break;
                case 3 :
                    // Php.g:287:7: PRINTF ^ '(' ! commaList ')' !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    PRINTF143=(Token)match(input,PRINTF,FOLLOW_PRINTF_in_outputFunctions1585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRINTF143_tree = 
                    (CommonTree)adaptor.create(PRINTF143)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(PRINTF143_tree, root_0);
                    }

                    char_literal144=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_outputFunctions1588); if (state.failed) return retval;

                    pushFollow(FOLLOW_commaList_in_outputFunctions1591);
                    commaList145=commaList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commaList145.getTree());

                    char_literal146=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_outputFunctions1593); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // Php.g:288:7: DIE ^ '(' ! commaList ')' !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    DIE147=(Token)match(input,DIE,FOLLOW_DIE_in_outputFunctions1602); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIE147_tree = 
                    (CommonTree)adaptor.create(DIE147)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(DIE147_tree, root_0);
                    }

                    char_literal148=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_outputFunctions1605); if (state.failed) return retval;

                    pushFollow(FOLLOW_commaList_in_outputFunctions1608);
                    commaList149=commaList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commaList149.getTree());

                    char_literal150=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_outputFunctions1610); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 30, outputFunctions_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "outputFunctions"


    public static class commaList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "commaList"
    // Php.g:291:1: commaList : expression ( ',' ! expression )* ;
    public final PhpParser.commaList_return commaList() throws RecognitionException {
        PhpParser.commaList_return retval = new PhpParser.commaList_return();
        retval.start = input.LT(1);

        int commaList_StartIndex = input.index();

        CommonTree root_0 = null;

        Token char_literal152=null;
        PhpParser.expression_return expression151 =null;

        PhpParser.expression_return expression153 =null;


        CommonTree char_literal152_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }

            // Php.g:292:5: ( expression ( ',' ! expression )* )
            // Php.g:292:7: expression ( ',' ! expression )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_expression_in_commaList1628);
            expression151=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression151.getTree());

            // Php.g:292:18: ( ',' ! expression )*
            loop38:
            do {
                int alt38=2;
                alt38 = dfa38.predict(input);
                switch (alt38) {
            	case 1 :
            	    // Php.g:292:19: ',' ! expression
            	    {
            	    char_literal152=(Token)match(input,COMMA,FOLLOW_COMMA_in_commaList1631); if (state.failed) return retval;

            	    pushFollow(FOLLOW_expression_in_commaList1634);
            	    expression153=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression153.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 31, commaList_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "commaList"


    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Php.g:295:1: expression : weakLogicalOr ;
    public final PhpParser.expression_return expression() throws RecognitionException {
        PhpParser.expression_return retval = new PhpParser.expression_return();
        retval.start = input.LT(1);

        int expression_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.weakLogicalOr_return weakLogicalOr154 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }

            // Php.g:296:5: ( weakLogicalOr )
            // Php.g:296:7: weakLogicalOr
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_weakLogicalOr_in_expression1658);
            weakLogicalOr154=weakLogicalOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, weakLogicalOr154.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 32, expression_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class weakLogicalOr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "weakLogicalOr"
    // Php.g:299:1: weakLogicalOr : weakLogicalXor ( ( 'or' | 'OR' ) ^ weakLogicalXor )* ;
    public final PhpParser.weakLogicalOr_return weakLogicalOr() throws RecognitionException {
        PhpParser.weakLogicalOr_return retval = new PhpParser.weakLogicalOr_return();
        retval.start = input.LT(1);

        int weakLogicalOr_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set156=null;
        PhpParser.weakLogicalXor_return weakLogicalXor155 =null;

        PhpParser.weakLogicalXor_return weakLogicalXor157 =null;


        CommonTree set156_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }

            // Php.g:300:5: ( weakLogicalXor ( ( 'or' | 'OR' ) ^ weakLogicalXor )* )
            // Php.g:300:7: weakLogicalXor ( ( 'or' | 'OR' ) ^ weakLogicalXor )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_weakLogicalXor_in_weakLogicalOr1675);
            weakLogicalXor155=weakLogicalXor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, weakLogicalXor155.getTree());

            // Php.g:300:22: ( ( 'or' | 'OR' ) ^ weakLogicalXor )*
            loop39:
            do {
                int alt39=2;
                alt39 = dfa39.predict(input);
                switch (alt39) {
            	case 1 :
            	    // Php.g:300:23: ( 'or' | 'OR' ) ^ weakLogicalXor
            	    {
            	    set156=(Token)input.LT(1);

            	    set156=(Token)input.LT(1);

            	    if ( input.LA(1)==115||input.LA(1)==121 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(set156)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_weakLogicalXor_in_weakLogicalOr1685);
            	    weakLogicalXor157=weakLogicalXor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, weakLogicalXor157.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 33, weakLogicalOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "weakLogicalOr"


    public static class weakLogicalXor_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "weakLogicalXor"
    // Php.g:303:1: weakLogicalXor : weakLogicalAnd ( ( 'xor' | 'XOR' ) ^ weakLogicalAnd )* ;
    public final PhpParser.weakLogicalXor_return weakLogicalXor() throws RecognitionException {
        PhpParser.weakLogicalXor_return retval = new PhpParser.weakLogicalXor_return();
        retval.start = input.LT(1);

        int weakLogicalXor_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set159=null;
        PhpParser.weakLogicalAnd_return weakLogicalAnd158 =null;

        PhpParser.weakLogicalAnd_return weakLogicalAnd160 =null;


        CommonTree set159_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }

            // Php.g:304:5: ( weakLogicalAnd ( ( 'xor' | 'XOR' ) ^ weakLogicalAnd )* )
            // Php.g:304:7: weakLogicalAnd ( ( 'xor' | 'XOR' ) ^ weakLogicalAnd )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_weakLogicalAnd_in_weakLogicalXor1704);
            weakLogicalAnd158=weakLogicalAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, weakLogicalAnd158.getTree());

            // Php.g:304:22: ( ( 'xor' | 'XOR' ) ^ weakLogicalAnd )*
            loop40:
            do {
                int alt40=2;
                alt40 = dfa40.predict(input);
                switch (alt40) {
            	case 1 :
            	    // Php.g:304:23: ( 'xor' | 'XOR' ) ^ weakLogicalAnd
            	    {
            	    set159=(Token)input.LT(1);

            	    set159=(Token)input.LT(1);

            	    if ( input.LA(1)==116||input.LA(1)==123 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(set159)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_weakLogicalAnd_in_weakLogicalXor1714);
            	    weakLogicalAnd160=weakLogicalAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, weakLogicalAnd160.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 34, weakLogicalXor_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "weakLogicalXor"


    public static class weakLogicalAnd_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "weakLogicalAnd"
    // Php.g:307:1: weakLogicalAnd : assignment ( ( 'and' | 'AND' ) ^ assignment )* ;
    public final PhpParser.weakLogicalAnd_return weakLogicalAnd() throws RecognitionException {
        PhpParser.weakLogicalAnd_return retval = new PhpParser.weakLogicalAnd_return();
        retval.start = input.LT(1);

        int weakLogicalAnd_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set162=null;
        PhpParser.assignment_return assignment161 =null;

        PhpParser.assignment_return assignment163 =null;


        CommonTree set162_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }

            // Php.g:308:5: ( assignment ( ( 'and' | 'AND' ) ^ assignment )* )
            // Php.g:308:7: assignment ( ( 'and' | 'AND' ) ^ assignment )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_assignment_in_weakLogicalAnd1741);
            assignment161=assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment161.getTree());

            // Php.g:308:18: ( ( 'and' | 'AND' ) ^ assignment )*
            loop41:
            do {
                int alt41=2;
                alt41 = dfa41.predict(input);
                switch (alt41) {
            	case 1 :
            	    // Php.g:308:19: ( 'and' | 'AND' ) ^ assignment
            	    {
            	    set162=(Token)input.LT(1);

            	    set162=(Token)input.LT(1);

            	    if ( input.LA(1)==114||input.LA(1)==117 ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(set162)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_assignment_in_weakLogicalAnd1751);
            	    assignment163=assignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment163.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 35, weakLogicalAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "weakLogicalAnd"


    public static class assignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assignment"
    // Php.g:311:1: assignment : ( name EQUALS ^ ( ( RequireOperator )=> simpleRequire | assignment ) | name ( ( AssignmentOperator | ConcatAssigmentOperator ) ^ assignment ) | ternary );
    public final PhpParser.assignment_return assignment() throws RecognitionException {
        PhpParser.assignment_return retval = new PhpParser.assignment_return();
        retval.start = input.LT(1);

        int assignment_StartIndex = input.index();

        CommonTree root_0 = null;

        Token EQUALS165=null;
        Token set169=null;
        PhpParser.name_return name164 =null;

        PhpParser.simpleRequire_return simpleRequire166 =null;

        PhpParser.assignment_return assignment167 =null;

        PhpParser.name_return name168 =null;

        PhpParser.assignment_return assignment170 =null;

        PhpParser.ternary_return ternary171 =null;


        CommonTree EQUALS165_tree=null;
        CommonTree set169_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }

            // Php.g:312:5: ( name EQUALS ^ ( ( RequireOperator )=> simpleRequire | assignment ) | name ( ( AssignmentOperator | ConcatAssigmentOperator ) ^ assignment ) | ternary )
            int alt43=3;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // Php.g:312:7: name EQUALS ^ ( ( RequireOperator )=> simpleRequire | assignment )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_name_in_assignment1770);
                    name164=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name164.getTree());

                    EQUALS165=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_assignment1772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUALS165_tree = 
                    (CommonTree)adaptor.create(EQUALS165)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(EQUALS165_tree, root_0);
                    }

                    // Php.g:312:20: ( ( RequireOperator )=> simpleRequire | assignment )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==RequireOperator) && (synpred76_Php())) {
                        alt42=1;
                    }
                    else if ( (LA42_0==AMPERSAND||LA42_0==ArrayWord||LA42_0==BANG||LA42_0==Boolean||LA42_0==CLONE||LA42_0==DIE||LA42_0==DOLLAR||(LA42_0 >= DoubleQuotedString && LA42_0 <= ECHO)||LA42_0==HereDoc||(LA42_0 >= IncrementOperator && LA42_0 <= Integer)||LA42_0==MINUS||LA42_0==NEW||LA42_0==OPEN_BRACE||(LA42_0 >= PRINT && LA42_0 <= PRINTF)||LA42_0==Real||LA42_0==SUPPRESS_WARNINGS||LA42_0==SingleQuotedString||LA42_0==TILDE||LA42_0==UnquotedString||(LA42_0 >= 119 && LA42_0 <= 120)) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;

                    }
                    switch (alt42) {
                        case 1 :
                            // Php.g:312:21: ( RequireOperator )=> simpleRequire
                            {
                            pushFollow(FOLLOW_simpleRequire_in_assignment1781);
                            simpleRequire166=simpleRequire();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, simpleRequire166.getTree());

                            }
                            break;
                        case 2 :
                            // Php.g:312:57: assignment
                            {
                            pushFollow(FOLLOW_assignment_in_assignment1785);
                            assignment167=assignment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment167.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Php.g:313:7: name ( ( AssignmentOperator | ConcatAssigmentOperator ) ^ assignment )
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_name_in_assignment1795);
                    name168=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name168.getTree());

                    // Php.g:313:12: ( ( AssignmentOperator | ConcatAssigmentOperator ) ^ assignment )
                    // Php.g:313:13: ( AssignmentOperator | ConcatAssigmentOperator ) ^ assignment
                    {
                    set169=(Token)input.LT(1);

                    set169=(Token)input.LT(1);

                    if ( input.LA(1)==AssignmentOperator||input.LA(1)==ConcatAssigmentOperator ) {
                        input.consume();
                        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(set169)
                        , root_0);
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_assignment_in_assignment1807);
                    assignment170=assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment170.getTree());

                    }


                    }
                    break;
                case 3 :
                    // Php.g:314:7: ternary
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_ternary_in_assignment1816);
                    ternary171=ternary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ternary171.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 36, assignment_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "assignment"


    public static class ternary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ternary"
    // Php.g:317:1: ternary : ( logicalOr QUESTION_MARK expression COLON expression -> ^( IfExpression logicalOr expression expression ) | logicalOr );
    public final PhpParser.ternary_return ternary() throws RecognitionException {
        PhpParser.ternary_return retval = new PhpParser.ternary_return();
        retval.start = input.LT(1);

        int ternary_StartIndex = input.index();

        CommonTree root_0 = null;

        Token QUESTION_MARK173=null;
        Token COLON175=null;
        PhpParser.logicalOr_return logicalOr172 =null;

        PhpParser.expression_return expression174 =null;

        PhpParser.expression_return expression176 =null;

        PhpParser.logicalOr_return logicalOr177 =null;


        CommonTree QUESTION_MARK173_tree=null;
        CommonTree COLON175_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_QUESTION_MARK=new RewriteRuleTokenStream(adaptor,"token QUESTION_MARK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_logicalOr=new RewriteRuleSubtreeStream(adaptor,"rule logicalOr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }

            // Php.g:318:5: ( logicalOr QUESTION_MARK expression COLON expression -> ^( IfExpression logicalOr expression expression ) | logicalOr )
            int alt44=2;
            alt44 = dfa44.predict(input);
            switch (alt44) {
                case 1 :
                    // Php.g:318:7: logicalOr QUESTION_MARK expression COLON expression
                    {
                    pushFollow(FOLLOW_logicalOr_in_ternary1833);
                    logicalOr172=logicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_logicalOr.add(logicalOr172.getTree());

                    QUESTION_MARK173=(Token)match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_ternary1835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION_MARK.add(QUESTION_MARK173);


                    pushFollow(FOLLOW_expression_in_ternary1837);
                    expression174=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression174.getTree());

                    COLON175=(Token)match(input,COLON,FOLLOW_COLON_in_ternary1839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(COLON175);


                    pushFollow(FOLLOW_expression_in_ternary1841);
                    expression176=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression176.getTree());

                    // AST REWRITE
                    // elements: expression, expression, logicalOr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 318:59: -> ^( IfExpression logicalOr expression expression )
                    {
                        // Php.g:318:62: ^( IfExpression logicalOr expression expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(IfExpression, "IfExpression")
                        , root_1);

                        adaptor.addChild(root_1, stream_logicalOr.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Php.g:319:7: logicalOr
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_logicalOr_in_ternary1862);
                    logicalOr177=logicalOr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalOr177.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 37, ternary_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ternary"


    public static class logicalOr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalOr"
    // Php.g:322:1: logicalOr : logicalAnd ( LOGICAL_OR ^ logicalAnd )* ;
    public final PhpParser.logicalOr_return logicalOr() throws RecognitionException {
        PhpParser.logicalOr_return retval = new PhpParser.logicalOr_return();
        retval.start = input.LT(1);

        int logicalOr_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LOGICAL_OR179=null;
        PhpParser.logicalAnd_return logicalAnd178 =null;

        PhpParser.logicalAnd_return logicalAnd180 =null;


        CommonTree LOGICAL_OR179_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }

            // Php.g:323:5: ( logicalAnd ( LOGICAL_OR ^ logicalAnd )* )
            // Php.g:323:7: logicalAnd ( LOGICAL_OR ^ logicalAnd )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_logicalAnd_in_logicalOr1883);
            logicalAnd178=logicalAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAnd178.getTree());

            // Php.g:323:18: ( LOGICAL_OR ^ logicalAnd )*
            loop45:
            do {
                int alt45=2;
                alt45 = dfa45.predict(input);
                switch (alt45) {
            	case 1 :
            	    // Php.g:323:19: LOGICAL_OR ^ logicalAnd
            	    {
            	    LOGICAL_OR179=(Token)match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_logicalOr1886); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_OR179_tree = 
            	    (CommonTree)adaptor.create(LOGICAL_OR179)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR179_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_logicalAnd_in_logicalOr1889);
            	    logicalAnd180=logicalAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalAnd180.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 38, logicalOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalOr"


    public static class logicalAnd_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalAnd"
    // Php.g:326:1: logicalAnd : bitwiseOr ( LOGICAL_AND ^ bitwiseOr )* ;
    public final PhpParser.logicalAnd_return logicalAnd() throws RecognitionException {
        PhpParser.logicalAnd_return retval = new PhpParser.logicalAnd_return();
        retval.start = input.LT(1);

        int logicalAnd_StartIndex = input.index();

        CommonTree root_0 = null;

        Token LOGICAL_AND182=null;
        PhpParser.bitwiseOr_return bitwiseOr181 =null;

        PhpParser.bitwiseOr_return bitwiseOr183 =null;


        CommonTree LOGICAL_AND182_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }

            // Php.g:327:5: ( bitwiseOr ( LOGICAL_AND ^ bitwiseOr )* )
            // Php.g:327:7: bitwiseOr ( LOGICAL_AND ^ bitwiseOr )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_bitwiseOr_in_logicalAnd1908);
            bitwiseOr181=bitwiseOr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseOr181.getTree());

            // Php.g:327:17: ( LOGICAL_AND ^ bitwiseOr )*
            loop46:
            do {
                int alt46=2;
                alt46 = dfa46.predict(input);
                switch (alt46) {
            	case 1 :
            	    // Php.g:327:18: LOGICAL_AND ^ bitwiseOr
            	    {
            	    LOGICAL_AND182=(Token)match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_logicalAnd1911); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LOGICAL_AND182_tree = 
            	    (CommonTree)adaptor.create(LOGICAL_AND182)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_AND182_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_bitwiseOr_in_logicalAnd1914);
            	    bitwiseOr183=bitwiseOr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitwiseOr183.getTree());

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 39, logicalAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalAnd"


    public static class bitwiseOr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitwiseOr"
    // Php.g:330:1: bitwiseOr : bitWiseAnd ( PIPE ^ bitWiseAnd )* ;
    public final PhpParser.bitwiseOr_return bitwiseOr() throws RecognitionException {
        PhpParser.bitwiseOr_return retval = new PhpParser.bitwiseOr_return();
        retval.start = input.LT(1);

        int bitwiseOr_StartIndex = input.index();

        CommonTree root_0 = null;

        Token PIPE185=null;
        PhpParser.bitWiseAnd_return bitWiseAnd184 =null;

        PhpParser.bitWiseAnd_return bitWiseAnd186 =null;


        CommonTree PIPE185_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }

            // Php.g:331:5: ( bitWiseAnd ( PIPE ^ bitWiseAnd )* )
            // Php.g:331:7: bitWiseAnd ( PIPE ^ bitWiseAnd )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_bitWiseAnd_in_bitwiseOr1937);
            bitWiseAnd184=bitWiseAnd();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitWiseAnd184.getTree());

            // Php.g:331:18: ( PIPE ^ bitWiseAnd )*
            loop47:
            do {
                int alt47=2;
                alt47 = dfa47.predict(input);
                switch (alt47) {
            	case 1 :
            	    // Php.g:331:19: PIPE ^ bitWiseAnd
            	    {
            	    PIPE185=(Token)match(input,PIPE,FOLLOW_PIPE_in_bitwiseOr1940); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PIPE185_tree = 
            	    (CommonTree)adaptor.create(PIPE185)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(PIPE185_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_bitWiseAnd_in_bitwiseOr1943);
            	    bitWiseAnd186=bitWiseAnd();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitWiseAnd186.getTree());

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 40, bitwiseOr_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bitwiseOr"


    public static class bitWiseAnd_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitWiseAnd"
    // Php.g:334:1: bitWiseAnd : equalityCheck ( AMPERSAND ^ equalityCheck )* ;
    public final PhpParser.bitWiseAnd_return bitWiseAnd() throws RecognitionException {
        PhpParser.bitWiseAnd_return retval = new PhpParser.bitWiseAnd_return();
        retval.start = input.LT(1);

        int bitWiseAnd_StartIndex = input.index();

        CommonTree root_0 = null;

        Token AMPERSAND188=null;
        PhpParser.equalityCheck_return equalityCheck187 =null;

        PhpParser.equalityCheck_return equalityCheck189 =null;


        CommonTree AMPERSAND188_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }

            // Php.g:335:5: ( equalityCheck ( AMPERSAND ^ equalityCheck )* )
            // Php.g:335:7: equalityCheck ( AMPERSAND ^ equalityCheck )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_equalityCheck_in_bitWiseAnd1962);
            equalityCheck187=equalityCheck();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityCheck187.getTree());

            // Php.g:335:21: ( AMPERSAND ^ equalityCheck )*
            loop48:
            do {
                int alt48=2;
                alt48 = dfa48.predict(input);
                switch (alt48) {
            	case 1 :
            	    // Php.g:335:22: AMPERSAND ^ equalityCheck
            	    {
            	    AMPERSAND188=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_bitWiseAnd1965); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    AMPERSAND188_tree = 
            	    (CommonTree)adaptor.create(AMPERSAND188)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(AMPERSAND188_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_equalityCheck_in_bitWiseAnd1968);
            	    equalityCheck189=equalityCheck();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, equalityCheck189.getTree());

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 41, bitWiseAnd_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bitWiseAnd"


    public static class equalityCheck_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "equalityCheck"
    // Php.g:338:1: equalityCheck : comparisionCheck ( EqualityOperator ^ comparisionCheck )? ;
    public final PhpParser.equalityCheck_return equalityCheck() throws RecognitionException {
        PhpParser.equalityCheck_return retval = new PhpParser.equalityCheck_return();
        retval.start = input.LT(1);

        int equalityCheck_StartIndex = input.index();

        CommonTree root_0 = null;

        Token EqualityOperator191=null;
        PhpParser.comparisionCheck_return comparisionCheck190 =null;

        PhpParser.comparisionCheck_return comparisionCheck192 =null;


        CommonTree EqualityOperator191_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }

            // Php.g:339:5: ( comparisionCheck ( EqualityOperator ^ comparisionCheck )? )
            // Php.g:339:7: comparisionCheck ( EqualityOperator ^ comparisionCheck )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_comparisionCheck_in_equalityCheck1987);
            comparisionCheck190=comparisionCheck();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, comparisionCheck190.getTree());

            // Php.g:339:24: ( EqualityOperator ^ comparisionCheck )?
            int alt49=2;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // Php.g:339:25: EqualityOperator ^ comparisionCheck
                    {
                    EqualityOperator191=(Token)match(input,EqualityOperator,FOLLOW_EqualityOperator_in_equalityCheck1990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EqualityOperator191_tree = 
                    (CommonTree)adaptor.create(EqualityOperator191)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(EqualityOperator191_tree, root_0);
                    }

                    pushFollow(FOLLOW_comparisionCheck_in_equalityCheck1993);
                    comparisionCheck192=comparisionCheck();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comparisionCheck192.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 42, equalityCheck_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "equalityCheck"


    public static class comparisionCheck_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comparisionCheck"
    // Php.g:342:1: comparisionCheck : bitWiseShift ( ComparisionOperator ^ bitWiseShift )? ;
    public final PhpParser.comparisionCheck_return comparisionCheck() throws RecognitionException {
        PhpParser.comparisionCheck_return retval = new PhpParser.comparisionCheck_return();
        retval.start = input.LT(1);

        int comparisionCheck_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ComparisionOperator194=null;
        PhpParser.bitWiseShift_return bitWiseShift193 =null;

        PhpParser.bitWiseShift_return bitWiseShift195 =null;


        CommonTree ComparisionOperator194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }

            // Php.g:343:5: ( bitWiseShift ( ComparisionOperator ^ bitWiseShift )? )
            // Php.g:343:7: bitWiseShift ( ComparisionOperator ^ bitWiseShift )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_bitWiseShift_in_comparisionCheck2016);
            bitWiseShift193=bitWiseShift();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bitWiseShift193.getTree());

            // Php.g:343:20: ( ComparisionOperator ^ bitWiseShift )?
            int alt50=2;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // Php.g:343:21: ComparisionOperator ^ bitWiseShift
                    {
                    ComparisionOperator194=(Token)match(input,ComparisionOperator,FOLLOW_ComparisionOperator_in_comparisionCheck2019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ComparisionOperator194_tree = 
                    (CommonTree)adaptor.create(ComparisionOperator194)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(ComparisionOperator194_tree, root_0);
                    }

                    pushFollow(FOLLOW_bitWiseShift_in_comparisionCheck2022);
                    bitWiseShift195=bitWiseShift();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bitWiseShift195.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 43, comparisionCheck_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "comparisionCheck"


    public static class bitWiseShift_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bitWiseShift"
    // Php.g:346:1: bitWiseShift : addition ( ShiftOperator ^ addition )* ;
    public final PhpParser.bitWiseShift_return bitWiseShift() throws RecognitionException {
        PhpParser.bitWiseShift_return retval = new PhpParser.bitWiseShift_return();
        retval.start = input.LT(1);

        int bitWiseShift_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ShiftOperator197=null;
        PhpParser.addition_return addition196 =null;

        PhpParser.addition_return addition198 =null;


        CommonTree ShiftOperator197_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }

            // Php.g:347:5: ( addition ( ShiftOperator ^ addition )* )
            // Php.g:347:7: addition ( ShiftOperator ^ addition )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_addition_in_bitWiseShift2041);
            addition196=addition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, addition196.getTree());

            // Php.g:347:16: ( ShiftOperator ^ addition )*
            loop51:
            do {
                int alt51=2;
                alt51 = dfa51.predict(input);
                switch (alt51) {
            	case 1 :
            	    // Php.g:347:17: ShiftOperator ^ addition
            	    {
            	    ShiftOperator197=(Token)match(input,ShiftOperator,FOLLOW_ShiftOperator_in_bitWiseShift2044); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ShiftOperator197_tree = 
            	    (CommonTree)adaptor.create(ShiftOperator197)
            	    ;
            	    root_0 = (CommonTree)adaptor.becomeRoot(ShiftOperator197_tree, root_0);
            	    }

            	    pushFollow(FOLLOW_addition_in_bitWiseShift2047);
            	    addition198=addition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, addition198.getTree());

            	    }
            	    break;

            	default :
            	    break loop51;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 44, bitWiseShift_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "bitWiseShift"


    public static class addition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "addition"
    // Php.g:350:1: addition : multiplication ( ( PLUS | MINUS | DOT ) ^ multiplication )* ;
    public final PhpParser.addition_return addition() throws RecognitionException {
        PhpParser.addition_return retval = new PhpParser.addition_return();
        retval.start = input.LT(1);

        int addition_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set200=null;
        PhpParser.multiplication_return multiplication199 =null;

        PhpParser.multiplication_return multiplication201 =null;


        CommonTree set200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }

            // Php.g:351:5: ( multiplication ( ( PLUS | MINUS | DOT ) ^ multiplication )* )
            // Php.g:351:7: multiplication ( ( PLUS | MINUS | DOT ) ^ multiplication )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_multiplication_in_addition2070);
            multiplication199=multiplication();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplication199.getTree());

            // Php.g:351:22: ( ( PLUS | MINUS | DOT ) ^ multiplication )*
            loop52:
            do {
                int alt52=2;
                alt52 = dfa52.predict(input);
                switch (alt52) {
            	case 1 :
            	    // Php.g:351:23: ( PLUS | MINUS | DOT ) ^ multiplication
            	    {
            	    set200=(Token)input.LT(1);

            	    set200=(Token)input.LT(1);

            	    if ( input.LA(1)==DOT||input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(set200)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multiplication_in_addition2086);
            	    multiplication201=multiplication();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplication201.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 45, addition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "addition"


    public static class multiplication_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multiplication"
    // Php.g:354:1: multiplication : logicalNot ( ( ASTERISK | FORWARD_SLASH | PERCENT ) ^ logicalNot )* ;
    public final PhpParser.multiplication_return multiplication() throws RecognitionException {
        PhpParser.multiplication_return retval = new PhpParser.multiplication_return();
        retval.start = input.LT(1);

        int multiplication_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set203=null;
        PhpParser.logicalNot_return logicalNot202 =null;

        PhpParser.logicalNot_return logicalNot204 =null;


        CommonTree set203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }

            // Php.g:355:5: ( logicalNot ( ( ASTERISK | FORWARD_SLASH | PERCENT ) ^ logicalNot )* )
            // Php.g:355:7: logicalNot ( ( ASTERISK | FORWARD_SLASH | PERCENT ) ^ logicalNot )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_logicalNot_in_multiplication2105);
            logicalNot202=logicalNot();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalNot202.getTree());

            // Php.g:355:18: ( ( ASTERISK | FORWARD_SLASH | PERCENT ) ^ logicalNot )*
            loop53:
            do {
                int alt53=2;
                alt53 = dfa53.predict(input);
                switch (alt53) {
            	case 1 :
            	    // Php.g:355:19: ( ASTERISK | FORWARD_SLASH | PERCENT ) ^ logicalNot
            	    {
            	    set203=(Token)input.LT(1);

            	    set203=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==FORWARD_SLASH||input.LA(1)==PERCENT ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
            	        (CommonTree)adaptor.create(set203)
            	        , root_0);
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_logicalNot_in_multiplication2121);
            	    logicalNot204=logicalNot();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalNot204.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 46, multiplication_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "multiplication"


    public static class logicalNot_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "logicalNot"
    // Php.g:358:1: logicalNot : ( BANG ^ logicalNot ( EQUALS ^ logicalNot )? | instanceOf );
    public final PhpParser.logicalNot_return logicalNot() throws RecognitionException {
        PhpParser.logicalNot_return retval = new PhpParser.logicalNot_return();
        retval.start = input.LT(1);

        int logicalNot_StartIndex = input.index();

        CommonTree root_0 = null;

        Token BANG205=null;
        Token EQUALS207=null;
        PhpParser.logicalNot_return logicalNot206 =null;

        PhpParser.logicalNot_return logicalNot208 =null;

        PhpParser.instanceOf_return instanceOf209 =null;


        CommonTree BANG205_tree=null;
        CommonTree EQUALS207_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }

            // Php.g:359:5: ( BANG ^ logicalNot ( EQUALS ^ logicalNot )? | instanceOf )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==BANG) ) {
                alt55=1;
            }
            else if ( (LA55_0==AMPERSAND||LA55_0==ArrayWord||LA55_0==Boolean||LA55_0==CLONE||LA55_0==DIE||LA55_0==DOLLAR||(LA55_0 >= DoubleQuotedString && LA55_0 <= ECHO)||LA55_0==HereDoc||(LA55_0 >= IncrementOperator && LA55_0 <= Integer)||LA55_0==MINUS||LA55_0==NEW||LA55_0==OPEN_BRACE||(LA55_0 >= PRINT && LA55_0 <= PRINTF)||LA55_0==Real||LA55_0==SUPPRESS_WARNINGS||LA55_0==SingleQuotedString||LA55_0==TILDE||LA55_0==UnquotedString||(LA55_0 >= 119 && LA55_0 <= 120)) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // Php.g:359:7: BANG ^ logicalNot ( EQUALS ^ logicalNot )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    BANG205=(Token)match(input,BANG,FOLLOW_BANG_in_logicalNot2140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BANG205_tree = 
                    (CommonTree)adaptor.create(BANG205)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(BANG205_tree, root_0);
                    }

                    pushFollow(FOLLOW_logicalNot_in_logicalNot2143);
                    logicalNot206=logicalNot();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalNot206.getTree());

                    // Php.g:359:24: ( EQUALS ^ logicalNot )?
                    int alt54=2;
                    alt54 = dfa54.predict(input);
                    switch (alt54) {
                        case 1 :
                            // Php.g:359:25: EQUALS ^ logicalNot
                            {
                            EQUALS207=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_logicalNot2146); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQUALS207_tree = 
                            (CommonTree)adaptor.create(EQUALS207)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(EQUALS207_tree, root_0);
                            }

                            pushFollow(FOLLOW_logicalNot_in_logicalNot2149);
                            logicalNot208=logicalNot();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, logicalNot208.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Php.g:360:7: instanceOf
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_instanceOf_in_logicalNot2159);
                    instanceOf209=instanceOf();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, instanceOf209.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 47, logicalNot_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "logicalNot"


    public static class instanceOf_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "instanceOf"
    // Php.g:363:1: instanceOf : negateOrCast ( INSTANCE_OF ^ negateOrCast )? ;
    public final PhpParser.instanceOf_return instanceOf() throws RecognitionException {
        PhpParser.instanceOf_return retval = new PhpParser.instanceOf_return();
        retval.start = input.LT(1);

        int instanceOf_StartIndex = input.index();

        CommonTree root_0 = null;

        Token INSTANCE_OF211=null;
        PhpParser.negateOrCast_return negateOrCast210 =null;

        PhpParser.negateOrCast_return negateOrCast212 =null;


        CommonTree INSTANCE_OF211_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }

            // Php.g:364:5: ( negateOrCast ( INSTANCE_OF ^ negateOrCast )? )
            // Php.g:364:7: negateOrCast ( INSTANCE_OF ^ negateOrCast )?
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_negateOrCast_in_instanceOf2176);
            negateOrCast210=negateOrCast();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negateOrCast210.getTree());

            // Php.g:364:20: ( INSTANCE_OF ^ negateOrCast )?
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // Php.g:364:21: INSTANCE_OF ^ negateOrCast
                    {
                    INSTANCE_OF211=(Token)match(input,INSTANCE_OF,FOLLOW_INSTANCE_OF_in_instanceOf2179); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCE_OF211_tree = 
                    (CommonTree)adaptor.create(INSTANCE_OF211)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCE_OF211_tree, root_0);
                    }

                    pushFollow(FOLLOW_negateOrCast_in_instanceOf2182);
                    negateOrCast212=negateOrCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, negateOrCast212.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 48, instanceOf_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "instanceOf"


    public static class negateOrCast_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "negateOrCast"
    // Php.g:367:1: negateOrCast : ( ( TILDE | MINUS | SUPPRESS_WARNINGS ) ^ increment | OPEN_BRACE UnquotedString CLOSE_BRACE expression -> ^( Cast UnquotedString expression ) | OPEN_BRACE ! weakLogicalAnd CLOSE_BRACE !| increment );
    public final PhpParser.negateOrCast_return negateOrCast() throws RecognitionException {
        PhpParser.negateOrCast_return retval = new PhpParser.negateOrCast_return();
        retval.start = input.LT(1);

        int negateOrCast_StartIndex = input.index();

        CommonTree root_0 = null;

        Token set213=null;
        Token OPEN_BRACE215=null;
        Token UnquotedString216=null;
        Token CLOSE_BRACE217=null;
        Token OPEN_BRACE219=null;
        Token CLOSE_BRACE221=null;
        PhpParser.increment_return increment214 =null;

        PhpParser.expression_return expression218 =null;

        PhpParser.weakLogicalAnd_return weakLogicalAnd220 =null;

        PhpParser.increment_return increment222 =null;


        CommonTree set213_tree=null;
        CommonTree OPEN_BRACE215_tree=null;
        CommonTree UnquotedString216_tree=null;
        CommonTree CLOSE_BRACE217_tree=null;
        CommonTree OPEN_BRACE219_tree=null;
        CommonTree CLOSE_BRACE221_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_UnquotedString=new RewriteRuleTokenStream(adaptor,"token UnquotedString");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }

            // Php.g:368:5: ( ( TILDE | MINUS | SUPPRESS_WARNINGS ) ^ increment | OPEN_BRACE UnquotedString CLOSE_BRACE expression -> ^( Cast UnquotedString expression ) | OPEN_BRACE ! weakLogicalAnd CLOSE_BRACE !| increment )
            int alt57=4;
            switch ( input.LA(1) ) {
            case MINUS:
            case SUPPRESS_WARNINGS:
            case TILDE:
                {
                alt57=1;
                }
                break;
            case OPEN_BRACE:
                {
                int LA57_2 = input.LA(2);

                if ( (LA57_2==UnquotedString) ) {
                    int LA57_22 = input.LA(3);

                    if ( (synpred100_Php()) ) {
                        alt57=2;
                    }
                    else if ( (synpred101_Php()) ) {
                        alt57=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 57, 22, input);

                        throw nvae;

                    }
                }
                else if ( (LA57_2==AMPERSAND||LA57_2==ArrayWord||LA57_2==BANG||LA57_2==Boolean||LA57_2==CLONE||LA57_2==DIE||LA57_2==DOLLAR||(LA57_2 >= DoubleQuotedString && LA57_2 <= ECHO)||LA57_2==HereDoc||(LA57_2 >= IncrementOperator && LA57_2 <= Integer)||LA57_2==MINUS||LA57_2==NEW||LA57_2==OPEN_BRACE||(LA57_2 >= PRINT && LA57_2 <= PRINTF)||LA57_2==Real||LA57_2==SUPPRESS_WARNINGS||LA57_2==SingleQuotedString||LA57_2==TILDE||(LA57_2 >= 119 && LA57_2 <= 120)) ) {
                    alt57=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 57, 2, input);

                    throw nvae;

                }
                }
                break;
            case AMPERSAND:
            case ArrayWord:
            case Boolean:
            case CLONE:
            case DIE:
            case DOLLAR:
            case DoubleQuotedString:
            case ECHO:
            case HereDoc:
            case IncrementOperator:
            case Integer:
            case NEW:
            case PRINT:
            case PRINTF:
            case Real:
            case SingleQuotedString:
            case UnquotedString:
            case 119:
            case 120:
                {
                alt57=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }

            switch (alt57) {
                case 1 :
                    // Php.g:368:7: ( TILDE | MINUS | SUPPRESS_WARNINGS ) ^ increment
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    set213=(Token)input.LT(1);

                    set213=(Token)input.LT(1);

                    if ( input.LA(1)==MINUS||input.LA(1)==SUPPRESS_WARNINGS||input.LA(1)==TILDE ) {
                        input.consume();
                        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(set213)
                        , root_0);
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_increment_in_negateOrCast2214);
                    increment214=increment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment214.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:369:7: OPEN_BRACE UnquotedString CLOSE_BRACE expression
                    {
                    OPEN_BRACE215=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_negateOrCast2222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE215);


                    UnquotedString216=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_negateOrCast2224); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UnquotedString.add(UnquotedString216);


                    CLOSE_BRACE217=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_negateOrCast2226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE217);


                    pushFollow(FOLLOW_expression_in_negateOrCast2228);
                    expression218=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression218.getTree());

                    // AST REWRITE
                    // elements: UnquotedString, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 369:56: -> ^( Cast UnquotedString expression )
                    {
                        // Php.g:369:59: ^( Cast UnquotedString expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Cast, "Cast")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_UnquotedString.nextNode()
                        );

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Php.g:370:7: OPEN_BRACE ! weakLogicalAnd CLOSE_BRACE !
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    OPEN_BRACE219=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_negateOrCast2255); if (state.failed) return retval;

                    pushFollow(FOLLOW_weakLogicalAnd_in_negateOrCast2258);
                    weakLogicalAnd220=weakLogicalAnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weakLogicalAnd220.getTree());

                    CLOSE_BRACE221=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_negateOrCast2260); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // Php.g:371:7: increment
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_increment_in_negateOrCast2269);
                    increment222=increment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment222.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 49, negateOrCast_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "negateOrCast"


    public static class increment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment"
    // Php.g:374:1: increment : ( IncrementOperator name -> ^( Prefix IncrementOperator name ) | name IncrementOperator -> ^( Postfix IncrementOperator name ) | newOrClone );
    public final PhpParser.increment_return increment() throws RecognitionException {
        PhpParser.increment_return retval = new PhpParser.increment_return();
        retval.start = input.LT(1);

        int increment_StartIndex = input.index();

        CommonTree root_0 = null;

        Token IncrementOperator223=null;
        Token IncrementOperator226=null;
        PhpParser.name_return name224 =null;

        PhpParser.name_return name225 =null;

        PhpParser.newOrClone_return newOrClone227 =null;


        CommonTree IncrementOperator223_tree=null;
        CommonTree IncrementOperator226_tree=null;
        RewriteRuleTokenStream stream_IncrementOperator=new RewriteRuleTokenStream(adaptor,"token IncrementOperator");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }

            // Php.g:375:5: ( IncrementOperator name -> ^( Prefix IncrementOperator name ) | name IncrementOperator -> ^( Postfix IncrementOperator name ) | newOrClone )
            int alt58=3;
            alt58 = dfa58.predict(input);
            switch (alt58) {
                case 1 :
                    // Php.g:375:7: IncrementOperator name
                    {
                    IncrementOperator223=(Token)match(input,IncrementOperator,FOLLOW_IncrementOperator_in_increment2286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IncrementOperator.add(IncrementOperator223);


                    pushFollow(FOLLOW_name_in_increment2288);
                    name224=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name224.getTree());

                    // AST REWRITE
                    // elements: IncrementOperator, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 375:30: -> ^( Prefix IncrementOperator name )
                    {
                        // Php.g:375:33: ^( Prefix IncrementOperator name )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Prefix, "Prefix")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IncrementOperator.nextNode()
                        );

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Php.g:376:7: name IncrementOperator
                    {
                    pushFollow(FOLLOW_name_in_increment2306);
                    name225=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name225.getTree());

                    IncrementOperator226=(Token)match(input,IncrementOperator,FOLLOW_IncrementOperator_in_increment2308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IncrementOperator.add(IncrementOperator226);


                    // AST REWRITE
                    // elements: name, IncrementOperator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 376:30: -> ^( Postfix IncrementOperator name )
                    {
                        // Php.g:376:33: ^( Postfix IncrementOperator name )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Postfix, "Postfix")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_IncrementOperator.nextNode()
                        );

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // Php.g:377:7: newOrClone
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_newOrClone_in_increment2326);
                    newOrClone227=newOrClone();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, newOrClone227.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 50, increment_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "increment"


    public static class newOrClone_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "newOrClone"
    // Php.g:380:1: newOrClone : ( NEW ^ nameOrFunctionCall | CLONE ^ name | atomOrReference | outputFunctions );
    public final PhpParser.newOrClone_return newOrClone() throws RecognitionException {
        PhpParser.newOrClone_return retval = new PhpParser.newOrClone_return();
        retval.start = input.LT(1);

        int newOrClone_StartIndex = input.index();

        CommonTree root_0 = null;

        Token NEW228=null;
        Token CLONE230=null;
        PhpParser.nameOrFunctionCall_return nameOrFunctionCall229 =null;

        PhpParser.name_return name231 =null;

        PhpParser.atomOrReference_return atomOrReference232 =null;

        PhpParser.outputFunctions_return outputFunctions233 =null;


        CommonTree NEW228_tree=null;
        CommonTree CLONE230_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }

            // Php.g:381:5: ( NEW ^ nameOrFunctionCall | CLONE ^ name | atomOrReference | outputFunctions )
            int alt59=4;
            switch ( input.LA(1) ) {
            case NEW:
                {
                alt59=1;
                }
                break;
            case CLONE:
                {
                alt59=2;
                }
                break;
            case AMPERSAND:
            case ArrayWord:
            case Boolean:
            case DOLLAR:
            case DoubleQuotedString:
            case HereDoc:
            case Integer:
            case Real:
            case SingleQuotedString:
            case UnquotedString:
            case 119:
            case 120:
                {
                alt59=3;
                }
                break;
            case DIE:
            case ECHO:
            case PRINT:
            case PRINTF:
                {
                alt59=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }

            switch (alt59) {
                case 1 :
                    // Php.g:381:7: NEW ^ nameOrFunctionCall
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    NEW228=(Token)match(input,NEW,FOLLOW_NEW_in_newOrClone2343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEW228_tree = 
                    (CommonTree)adaptor.create(NEW228)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(NEW228_tree, root_0);
                    }

                    pushFollow(FOLLOW_nameOrFunctionCall_in_newOrClone2346);
                    nameOrFunctionCall229=nameOrFunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nameOrFunctionCall229.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:382:7: CLONE ^ name
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    CLONE230=(Token)match(input,CLONE,FOLLOW_CLONE_in_newOrClone2354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CLONE230_tree = 
                    (CommonTree)adaptor.create(CLONE230)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(CLONE230_tree, root_0);
                    }

                    pushFollow(FOLLOW_name_in_newOrClone2357);
                    name231=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name231.getTree());

                    }
                    break;
                case 3 :
                    // Php.g:383:7: atomOrReference
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_atomOrReference_in_newOrClone2365);
                    atomOrReference232=atomOrReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, atomOrReference232.getTree());

                    }
                    break;
                case 4 :
                    // Php.g:384:7: outputFunctions
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_outputFunctions_in_newOrClone2373);
                    outputFunctions233=outputFunctions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputFunctions233.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 51, newOrClone_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "newOrClone"


    public static class atomOrReference_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "atomOrReference"
    // Php.g:387:1: atomOrReference : ( atom | reference );
    public final PhpParser.atomOrReference_return atomOrReference() throws RecognitionException {
        PhpParser.atomOrReference_return retval = new PhpParser.atomOrReference_return();
        retval.start = input.LT(1);

        int atomOrReference_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.atom_return atom234 =null;

        PhpParser.reference_return reference235 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }

            // Php.g:388:5: ( atom | reference )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==ArrayWord||LA60_0==Boolean||LA60_0==DoubleQuotedString||LA60_0==HereDoc||LA60_0==Integer||LA60_0==Real||LA60_0==SingleQuotedString||(LA60_0 >= 119 && LA60_0 <= 120)) ) {
                alt60=1;
            }
            else if ( (LA60_0==AMPERSAND||LA60_0==DOLLAR||LA60_0==UnquotedString) ) {
                alt60=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // Php.g:388:7: atom
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_atom_in_atomOrReference2390);
                    atom234=atom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, atom234.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:389:7: reference
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_reference_in_atomOrReference2398);
                    reference235=reference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference235.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 52, atomOrReference_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "atomOrReference"


    public static class arrayDeclaration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayDeclaration"
    // Php.g:392:1: arrayDeclaration : ArrayWord OPEN_BRACE ( arrayEntry ( COMMA arrayEntry )* )? CLOSE_BRACE -> ^( Array ( arrayEntry )* ) ;
    public final PhpParser.arrayDeclaration_return arrayDeclaration() throws RecognitionException {
        PhpParser.arrayDeclaration_return retval = new PhpParser.arrayDeclaration_return();
        retval.start = input.LT(1);

        int arrayDeclaration_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ArrayWord236=null;
        Token OPEN_BRACE237=null;
        Token COMMA239=null;
        Token CLOSE_BRACE241=null;
        PhpParser.arrayEntry_return arrayEntry238 =null;

        PhpParser.arrayEntry_return arrayEntry240 =null;


        CommonTree ArrayWord236_tree=null;
        CommonTree OPEN_BRACE237_tree=null;
        CommonTree COMMA239_tree=null;
        CommonTree CLOSE_BRACE241_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_ArrayWord=new RewriteRuleTokenStream(adaptor,"token ArrayWord");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_arrayEntry=new RewriteRuleSubtreeStream(adaptor,"rule arrayEntry");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }

            // Php.g:393:5: ( ArrayWord OPEN_BRACE ( arrayEntry ( COMMA arrayEntry )* )? CLOSE_BRACE -> ^( Array ( arrayEntry )* ) )
            // Php.g:393:7: ArrayWord OPEN_BRACE ( arrayEntry ( COMMA arrayEntry )* )? CLOSE_BRACE
            {
            ArrayWord236=(Token)match(input,ArrayWord,FOLLOW_ArrayWord_in_arrayDeclaration2415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ArrayWord.add(ArrayWord236);


            OPEN_BRACE237=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_arrayDeclaration2417); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE237);


            // Php.g:393:28: ( arrayEntry ( COMMA arrayEntry )* )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==AMPERSAND||LA62_0==ArrayWord||LA62_0==BANG||LA62_0==Boolean||LA62_0==CLONE||LA62_0==DIE||LA62_0==DOLLAR||(LA62_0 >= DoubleQuotedString && LA62_0 <= ECHO)||LA62_0==HereDoc||(LA62_0 >= IncrementOperator && LA62_0 <= Integer)||LA62_0==MINUS||LA62_0==NEW||LA62_0==OPEN_BRACE||(LA62_0 >= PRINT && LA62_0 <= PRINTF)||LA62_0==Real||LA62_0==SUPPRESS_WARNINGS||LA62_0==SingleQuotedString||LA62_0==TILDE||LA62_0==UnquotedString||(LA62_0 >= 119 && LA62_0 <= 120)) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // Php.g:393:29: arrayEntry ( COMMA arrayEntry )*
                    {
                    pushFollow(FOLLOW_arrayEntry_in_arrayDeclaration2420);
                    arrayEntry238=arrayEntry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayEntry.add(arrayEntry238.getTree());

                    // Php.g:393:40: ( COMMA arrayEntry )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==COMMA) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // Php.g:393:41: COMMA arrayEntry
                    	    {
                    	    COMMA239=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayDeclaration2423); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA239);


                    	    pushFollow(FOLLOW_arrayEntry_in_arrayDeclaration2425);
                    	    arrayEntry240=arrayEntry();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arrayEntry.add(arrayEntry240.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);


                    }
                    break;

            }


            CLOSE_BRACE241=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_arrayDeclaration2431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE241);


            // AST REWRITE
            // elements: arrayEntry
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 393:74: -> ^( Array ( arrayEntry )* )
            {
                // Php.g:393:77: ^( Array ( arrayEntry )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(Array, "Array")
                , root_1);

                // Php.g:393:85: ( arrayEntry )*
                while ( stream_arrayEntry.hasNext() ) {
                    adaptor.addChild(root_1, stream_arrayEntry.nextTree());

                }
                stream_arrayEntry.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 53, arrayDeclaration_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayDeclaration"


    public static class arrayEntry_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayEntry"
    // Php.g:396:1: arrayEntry : ( keyValuePair | expression ) ;
    public final PhpParser.arrayEntry_return arrayEntry() throws RecognitionException {
        PhpParser.arrayEntry_return retval = new PhpParser.arrayEntry_return();
        retval.start = input.LT(1);

        int arrayEntry_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.keyValuePair_return keyValuePair242 =null;

        PhpParser.expression_return expression243 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }

            // Php.g:397:5: ( ( keyValuePair | expression ) )
            // Php.g:397:7: ( keyValuePair | expression )
            {
            root_0 = (CommonTree)adaptor.nil();


            // Php.g:397:7: ( keyValuePair | expression )
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // Php.g:397:8: keyValuePair
                    {
                    pushFollow(FOLLOW_keyValuePair_in_arrayEntry2458);
                    keyValuePair242=keyValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyValuePair242.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:397:23: expression
                    {
                    pushFollow(FOLLOW_expression_in_arrayEntry2462);
                    expression243=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression243.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 54, arrayEntry_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayEntry"


    public static class keyValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "keyValuePair"
    // Php.g:400:1: keyValuePair : ( expression ARRAY_ASSIGN expression ) -> ^( ARRAY_ASSIGN ( expression )* ) ;
    public final PhpParser.keyValuePair_return keyValuePair() throws RecognitionException {
        PhpParser.keyValuePair_return retval = new PhpParser.keyValuePair_return();
        retval.start = input.LT(1);

        int keyValuePair_StartIndex = input.index();

        CommonTree root_0 = null;

        Token ARRAY_ASSIGN245=null;
        PhpParser.expression_return expression244 =null;

        PhpParser.expression_return expression246 =null;


        CommonTree ARRAY_ASSIGN245_tree=null;
        RewriteRuleTokenStream stream_ARRAY_ASSIGN=new RewriteRuleTokenStream(adaptor,"token ARRAY_ASSIGN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }

            // Php.g:402:5: ( ( expression ARRAY_ASSIGN expression ) -> ^( ARRAY_ASSIGN ( expression )* ) )
            // Php.g:402:7: ( expression ARRAY_ASSIGN expression )
            {
            // Php.g:402:7: ( expression ARRAY_ASSIGN expression )
            // Php.g:402:8: expression ARRAY_ASSIGN expression
            {
            pushFollow(FOLLOW_expression_in_keyValuePair2482);
            expression244=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression244.getTree());

            ARRAY_ASSIGN245=(Token)match(input,ARRAY_ASSIGN,FOLLOW_ARRAY_ASSIGN_in_keyValuePair2484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ARRAY_ASSIGN.add(ARRAY_ASSIGN245);


            pushFollow(FOLLOW_expression_in_keyValuePair2486);
            expression246=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression246.getTree());

            }


            // AST REWRITE
            // elements: expression, ARRAY_ASSIGN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 402:44: -> ^( ARRAY_ASSIGN ( expression )* )
            {
                // Php.g:402:47: ^( ARRAY_ASSIGN ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_ARRAY_ASSIGN.nextNode()
                , root_1);

                // Php.g:402:62: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 55, keyValuePair_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "keyValuePair"


    public static class listDefinition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "listDefinition"
    // Php.g:405:1: listDefinition : 'list' OPEN_BRACE ( atomOrReference ( COMMA atomOrReference )* )? CLOSE_BRACE ( EQUALS listEntry )? -> ^( List ( atomOrReference )* ( ^( EQUALS listEntry ) )? ) ;
    public final PhpParser.listDefinition_return listDefinition() throws RecognitionException {
        PhpParser.listDefinition_return retval = new PhpParser.listDefinition_return();
        retval.start = input.LT(1);

        int listDefinition_StartIndex = input.index();

        CommonTree root_0 = null;

        Token string_literal247=null;
        Token OPEN_BRACE248=null;
        Token COMMA250=null;
        Token CLOSE_BRACE252=null;
        Token EQUALS253=null;
        PhpParser.atomOrReference_return atomOrReference249 =null;

        PhpParser.atomOrReference_return atomOrReference251 =null;

        PhpParser.listEntry_return listEntry254 =null;


        CommonTree string_literal247_tree=null;
        CommonTree OPEN_BRACE248_tree=null;
        CommonTree COMMA250_tree=null;
        CommonTree CLOSE_BRACE252_tree=null;
        CommonTree EQUALS253_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_atomOrReference=new RewriteRuleSubtreeStream(adaptor,"rule atomOrReference");
        RewriteRuleSubtreeStream stream_listEntry=new RewriteRuleSubtreeStream(adaptor,"rule listEntry");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }

            // Php.g:406:5: ( 'list' OPEN_BRACE ( atomOrReference ( COMMA atomOrReference )* )? CLOSE_BRACE ( EQUALS listEntry )? -> ^( List ( atomOrReference )* ( ^( EQUALS listEntry ) )? ) )
            // Php.g:406:7: 'list' OPEN_BRACE ( atomOrReference ( COMMA atomOrReference )* )? CLOSE_BRACE ( EQUALS listEntry )?
            {
            string_literal247=(Token)match(input,119,FOLLOW_119_in_listDefinition2513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(string_literal247);


            OPEN_BRACE248=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_listDefinition2515); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE248);


            // Php.g:406:25: ( atomOrReference ( COMMA atomOrReference )* )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==AMPERSAND||LA65_0==ArrayWord||LA65_0==Boolean||LA65_0==DOLLAR||LA65_0==DoubleQuotedString||LA65_0==HereDoc||LA65_0==Integer||LA65_0==Real||LA65_0==SingleQuotedString||LA65_0==UnquotedString||(LA65_0 >= 119 && LA65_0 <= 120)) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // Php.g:406:26: atomOrReference ( COMMA atomOrReference )*
                    {
                    pushFollow(FOLLOW_atomOrReference_in_listDefinition2518);
                    atomOrReference249=atomOrReference();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomOrReference.add(atomOrReference249.getTree());

                    // Php.g:406:42: ( COMMA atomOrReference )*
                    loop64:
                    do {
                        int alt64=2;
                        int LA64_0 = input.LA(1);

                        if ( (LA64_0==COMMA) ) {
                            alt64=1;
                        }


                        switch (alt64) {
                    	case 1 :
                    	    // Php.g:406:43: COMMA atomOrReference
                    	    {
                    	    COMMA250=(Token)match(input,COMMA,FOLLOW_COMMA_in_listDefinition2521); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA250);


                    	    pushFollow(FOLLOW_atomOrReference_in_listDefinition2523);
                    	    atomOrReference251=atomOrReference();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_atomOrReference.add(atomOrReference251.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);


                    }
                    break;

            }


            CLOSE_BRACE252=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_listDefinition2529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE252);


            // Php.g:406:81: ( EQUALS listEntry )?
            int alt66=2;
            alt66 = dfa66.predict(input);
            switch (alt66) {
                case 1 :
                    // Php.g:406:82: EQUALS listEntry
                    {
                    EQUALS253=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_listDefinition2532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS253);


                    pushFollow(FOLLOW_listEntry_in_listDefinition2534);
                    listEntry254=listEntry();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_listEntry.add(listEntry254.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: listEntry, atomOrReference, EQUALS
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 406:101: -> ^( List ( atomOrReference )* ( ^( EQUALS listEntry ) )? )
            {
                // Php.g:406:104: ^( List ( atomOrReference )* ( ^( EQUALS listEntry ) )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                (CommonTree)adaptor.create(List, "List")
                , root_1);

                // Php.g:406:111: ( atomOrReference )*
                while ( stream_atomOrReference.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomOrReference.nextTree());

                }
                stream_atomOrReference.reset();

                // Php.g:406:128: ( ^( EQUALS listEntry ) )?
                if ( stream_listEntry.hasNext()||stream_EQUALS.hasNext() ) {
                    // Php.g:406:129: ^( EQUALS listEntry )
                    {
                    CommonTree root_2 = (CommonTree)adaptor.nil();
                    root_2 = (CommonTree)adaptor.becomeRoot(
                    stream_EQUALS.nextNode()
                    , root_2);

                    adaptor.addChild(root_2, stream_listEntry.nextTree());

                    adaptor.addChild(root_1, root_2);
                    }

                }
                stream_listEntry.reset();
                stream_EQUALS.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 56, listDefinition_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "listDefinition"


    public static class listEntry_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "listEntry"
    // Php.g:409:1: listEntry : ( expression | OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE -> ^( ListAssign ( expression )* ) );
    public final PhpParser.listEntry_return listEntry() throws RecognitionException {
        PhpParser.listEntry_return retval = new PhpParser.listEntry_return();
        retval.start = input.LT(1);

        int listEntry_StartIndex = input.index();

        CommonTree root_0 = null;

        Token OPEN_BRACE256=null;
        Token COMMA258=null;
        Token CLOSE_BRACE260=null;
        PhpParser.expression_return expression255 =null;

        PhpParser.expression_return expression257 =null;

        PhpParser.expression_return expression259 =null;


        CommonTree OPEN_BRACE256_tree=null;
        CommonTree COMMA258_tree=null;
        CommonTree CLOSE_BRACE260_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }

            // Php.g:410:5: ( expression | OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE -> ^( ListAssign ( expression )* ) )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==AMPERSAND||LA68_0==ArrayWord||LA68_0==BANG||LA68_0==Boolean||LA68_0==CLONE||LA68_0==DIE||LA68_0==DOLLAR||(LA68_0 >= DoubleQuotedString && LA68_0 <= ECHO)||LA68_0==HereDoc||(LA68_0 >= IncrementOperator && LA68_0 <= Integer)||LA68_0==MINUS||LA68_0==NEW||(LA68_0 >= PRINT && LA68_0 <= PRINTF)||LA68_0==Real||LA68_0==SUPPRESS_WARNINGS||LA68_0==SingleQuotedString||LA68_0==TILDE||LA68_0==UnquotedString||(LA68_0 >= 119 && LA68_0 <= 120)) ) {
                alt68=1;
            }
            else if ( (LA68_0==OPEN_BRACE) ) {
                switch ( input.LA(2) ) {
                case UnquotedString:
                    {
                    int LA68_23 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 23, input);

                        throw nvae;

                    }
                    }
                    break;
                case DOLLAR:
                    {
                    int LA68_24 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 24, input);

                        throw nvae;

                    }
                    }
                    break;
                case BANG:
                    {
                    int LA68_25 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 25, input);

                        throw nvae;

                    }
                    }
                    break;
                case MINUS:
                case SUPPRESS_WARNINGS:
                case TILDE:
                    {
                    int LA68_26 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 26, input);

                        throw nvae;

                    }
                    }
                    break;
                case OPEN_BRACE:
                    {
                    int LA68_27 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 27, input);

                        throw nvae;

                    }
                    }
                    break;
                case IncrementOperator:
                    {
                    int LA68_28 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 28, input);

                        throw nvae;

                    }
                    }
                    break;
                case NEW:
                    {
                    int LA68_29 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 29, input);

                        throw nvae;

                    }
                    }
                    break;
                case CLONE:
                    {
                    int LA68_30 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 30, input);

                        throw nvae;

                    }
                    }
                    break;
                case SingleQuotedString:
                    {
                    int LA68_31 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 31, input);

                        throw nvae;

                    }
                    }
                    break;
                case DoubleQuotedString:
                    {
                    int LA68_32 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 32, input);

                        throw nvae;

                    }
                    }
                    break;
                case HereDoc:
                    {
                    int LA68_33 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 33, input);

                        throw nvae;

                    }
                    }
                    break;
                case Integer:
                    {
                    int LA68_34 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 34, input);

                        throw nvae;

                    }
                    }
                    break;
                case Real:
                    {
                    int LA68_35 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 35, input);

                        throw nvae;

                    }
                    }
                    break;
                case Boolean:
                    {
                    int LA68_36 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 36, input);

                        throw nvae;

                    }
                    }
                    break;
                case ArrayWord:
                    {
                    int LA68_37 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 37, input);

                        throw nvae;

                    }
                    }
                    break;
                case 119:
                    {
                    int LA68_38 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 38, input);

                        throw nvae;

                    }
                    }
                    break;
                case 120:
                    {
                    int LA68_39 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 39, input);

                        throw nvae;

                    }
                    }
                    break;
                case AMPERSAND:
                    {
                    int LA68_40 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 40, input);

                        throw nvae;

                    }
                    }
                    break;
                case ECHO:
                    {
                    int LA68_41 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 41, input);

                        throw nvae;

                    }
                    }
                    break;
                case PRINT:
                    {
                    int LA68_42 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 42, input);

                        throw nvae;

                    }
                    }
                    break;
                case PRINTF:
                    {
                    int LA68_43 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 43, input);

                        throw nvae;

                    }
                    }
                    break;
                case DIE:
                    {
                    int LA68_44 = input.LA(3);

                    if ( (synpred114_Php()) ) {
                        alt68=1;
                    }
                    else if ( (true) ) {
                        alt68=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 44, input);

                        throw nvae;

                    }
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 68, 5, input);

                    throw nvae;

                }

            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // Php.g:410:7: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_expression_in_listEntry2575);
                    expression255=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression255.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:411:7: OPEN_BRACE expression ( COMMA expression )* CLOSE_BRACE
                    {
                    OPEN_BRACE256=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_listEntry2583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE256);


                    pushFollow(FOLLOW_expression_in_listEntry2585);
                    expression257=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression257.getTree());

                    // Php.g:411:29: ( COMMA expression )*
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==COMMA) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // Php.g:411:30: COMMA expression
                    	    {
                    	    COMMA258=(Token)match(input,COMMA,FOLLOW_COMMA_in_listEntry2588); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA258);


                    	    pushFollow(FOLLOW_expression_in_listEntry2590);
                    	    expression259=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression259.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);


                    CLOSE_BRACE260=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_listEntry2594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE260);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 411:61: -> ^( ListAssign ( expression )* )
                    {
                        // Php.g:411:64: ^( ListAssign ( expression )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(ListAssign, "ListAssign")
                        , root_1);

                        // Php.g:411:77: ( expression )*
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 57, listEntry_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "listEntry"


    public static class atom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "atom"
    // Php.g:414:1: atom : ( SingleQuotedString | DoubleQuotedString | HereDoc | Integer | Real | Boolean | arrayDeclaration | listDefinition | 'null' );
    public final PhpParser.atom_return atom() throws RecognitionException {
        PhpParser.atom_return retval = new PhpParser.atom_return();
        retval.start = input.LT(1);

        int atom_StartIndex = input.index();

        CommonTree root_0 = null;

        Token SingleQuotedString261=null;
        Token DoubleQuotedString262=null;
        Token HereDoc263=null;
        Token Integer264=null;
        Token Real265=null;
        Token Boolean266=null;
        Token string_literal269=null;
        PhpParser.arrayDeclaration_return arrayDeclaration267 =null;

        PhpParser.listDefinition_return listDefinition268 =null;


        CommonTree SingleQuotedString261_tree=null;
        CommonTree DoubleQuotedString262_tree=null;
        CommonTree HereDoc263_tree=null;
        CommonTree Integer264_tree=null;
        CommonTree Real265_tree=null;
        CommonTree Boolean266_tree=null;
        CommonTree string_literal269_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }

            // Php.g:414:5: ( SingleQuotedString | DoubleQuotedString | HereDoc | Integer | Real | Boolean | arrayDeclaration | listDefinition | 'null' )
            int alt69=9;
            switch ( input.LA(1) ) {
            case SingleQuotedString:
                {
                alt69=1;
                }
                break;
            case DoubleQuotedString:
                {
                alt69=2;
                }
                break;
            case HereDoc:
                {
                alt69=3;
                }
                break;
            case Integer:
                {
                alt69=4;
                }
                break;
            case Real:
                {
                alt69=5;
                }
                break;
            case Boolean:
                {
                alt69=6;
                }
                break;
            case ArrayWord:
                {
                alt69=7;
                }
                break;
            case 119:
                {
                alt69=8;
                }
                break;
            case 120:
                {
                alt69=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }

            switch (alt69) {
                case 1 :
                    // Php.g:414:7: SingleQuotedString
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    SingleQuotedString261=(Token)match(input,SingleQuotedString,FOLLOW_SingleQuotedString_in_atom2615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SingleQuotedString261_tree = 
                    (CommonTree)adaptor.create(SingleQuotedString261)
                    ;
                    adaptor.addChild(root_0, SingleQuotedString261_tree);
                    }

                    }
                    break;
                case 2 :
                    // Php.g:414:28: DoubleQuotedString
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    DoubleQuotedString262=(Token)match(input,DoubleQuotedString,FOLLOW_DoubleQuotedString_in_atom2619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DoubleQuotedString262_tree = 
                    (CommonTree)adaptor.create(DoubleQuotedString262)
                    ;
                    adaptor.addChild(root_0, DoubleQuotedString262_tree);
                    }

                    }
                    break;
                case 3 :
                    // Php.g:414:49: HereDoc
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    HereDoc263=(Token)match(input,HereDoc,FOLLOW_HereDoc_in_atom2623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    HereDoc263_tree = 
                    (CommonTree)adaptor.create(HereDoc263)
                    ;
                    adaptor.addChild(root_0, HereDoc263_tree);
                    }

                    }
                    break;
                case 4 :
                    // Php.g:414:59: Integer
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    Integer264=(Token)match(input,Integer,FOLLOW_Integer_in_atom2627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Integer264_tree = 
                    (CommonTree)adaptor.create(Integer264)
                    ;
                    adaptor.addChild(root_0, Integer264_tree);
                    }

                    }
                    break;
                case 5 :
                    // Php.g:414:69: Real
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    Real265=(Token)match(input,Real,FOLLOW_Real_in_atom2631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Real265_tree = 
                    (CommonTree)adaptor.create(Real265)
                    ;
                    adaptor.addChild(root_0, Real265_tree);
                    }

                    }
                    break;
                case 6 :
                    // Php.g:414:76: Boolean
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    Boolean266=(Token)match(input,Boolean,FOLLOW_Boolean_in_atom2635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Boolean266_tree = 
                    (CommonTree)adaptor.create(Boolean266)
                    ;
                    adaptor.addChild(root_0, Boolean266_tree);
                    }

                    }
                    break;
                case 7 :
                    // Php.g:414:86: arrayDeclaration
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_arrayDeclaration_in_atom2639);
                    arrayDeclaration267=arrayDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayDeclaration267.getTree());

                    }
                    break;
                case 8 :
                    // Php.g:414:105: listDefinition
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_listDefinition_in_atom2643);
                    listDefinition268=listDefinition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, listDefinition268.getTree());

                    }
                    break;
                case 9 :
                    // Php.g:414:122: 'null'
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    string_literal269=(Token)match(input,120,FOLLOW_120_in_atom2647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal269_tree = 
                    (CommonTree)adaptor.create(string_literal269)
                    ;
                    adaptor.addChild(root_0, string_literal269_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 58, atom_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "atom"


    public static class reference_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "reference"
    // Php.g:417:1: reference : ( AMPERSAND ^ nameOrFunctionCall | nameOrFunctionCall );
    public final PhpParser.reference_return reference() throws RecognitionException {
        PhpParser.reference_return retval = new PhpParser.reference_return();
        retval.start = input.LT(1);

        int reference_StartIndex = input.index();

        CommonTree root_0 = null;

        Token AMPERSAND270=null;
        PhpParser.nameOrFunctionCall_return nameOrFunctionCall271 =null;

        PhpParser.nameOrFunctionCall_return nameOrFunctionCall272 =null;


        CommonTree AMPERSAND270_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }

            // Php.g:418:5: ( AMPERSAND ^ nameOrFunctionCall | nameOrFunctionCall )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==AMPERSAND) ) {
                alt70=1;
            }
            else if ( (LA70_0==DOLLAR||LA70_0==UnquotedString) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // Php.g:418:7: AMPERSAND ^ nameOrFunctionCall
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    AMPERSAND270=(Token)match(input,AMPERSAND,FOLLOW_AMPERSAND_in_reference2664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AMPERSAND270_tree = 
                    (CommonTree)adaptor.create(AMPERSAND270)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(AMPERSAND270_tree, root_0);
                    }

                    pushFollow(FOLLOW_nameOrFunctionCall_in_reference2667);
                    nameOrFunctionCall271=nameOrFunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nameOrFunctionCall271.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:419:7: nameOrFunctionCall
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_nameOrFunctionCall_in_reference2675);
                    nameOrFunctionCall272=nameOrFunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nameOrFunctionCall272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 59, reference_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "reference"


    public static class nameOrFunctionCall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "nameOrFunctionCall"
    // Php.g:422:1: nameOrFunctionCall : ( name OPEN_BRACE ( expression ( COMMA expression )* )? CLOSE_BRACE -> ^( Apply name ( expression )* ) | name );
    public final PhpParser.nameOrFunctionCall_return nameOrFunctionCall() throws RecognitionException {
        PhpParser.nameOrFunctionCall_return retval = new PhpParser.nameOrFunctionCall_return();
        retval.start = input.LT(1);

        int nameOrFunctionCall_StartIndex = input.index();

        CommonTree root_0 = null;

        Token OPEN_BRACE274=null;
        Token COMMA276=null;
        Token CLOSE_BRACE278=null;
        PhpParser.name_return name273 =null;

        PhpParser.expression_return expression275 =null;

        PhpParser.expression_return expression277 =null;

        PhpParser.name_return name279 =null;


        CommonTree OPEN_BRACE274_tree=null;
        CommonTree COMMA276_tree=null;
        CommonTree CLOSE_BRACE278_tree=null;
        RewriteRuleTokenStream stream_CLOSE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_BRACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OPEN_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }

            // Php.g:423:5: ( name OPEN_BRACE ( expression ( COMMA expression )* )? CLOSE_BRACE -> ^( Apply name ( expression )* ) | name )
            int alt73=2;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // Php.g:423:7: name OPEN_BRACE ( expression ( COMMA expression )* )? CLOSE_BRACE
                    {
                    pushFollow(FOLLOW_name_in_nameOrFunctionCall2692);
                    name273=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name273.getTree());

                    OPEN_BRACE274=(Token)match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_nameOrFunctionCall2694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OPEN_BRACE.add(OPEN_BRACE274);


                    // Php.g:423:23: ( expression ( COMMA expression )* )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==AMPERSAND||LA72_0==ArrayWord||LA72_0==BANG||LA72_0==Boolean||LA72_0==CLONE||LA72_0==DIE||LA72_0==DOLLAR||(LA72_0 >= DoubleQuotedString && LA72_0 <= ECHO)||LA72_0==HereDoc||(LA72_0 >= IncrementOperator && LA72_0 <= Integer)||LA72_0==MINUS||LA72_0==NEW||LA72_0==OPEN_BRACE||(LA72_0 >= PRINT && LA72_0 <= PRINTF)||LA72_0==Real||LA72_0==SUPPRESS_WARNINGS||LA72_0==SingleQuotedString||LA72_0==TILDE||LA72_0==UnquotedString||(LA72_0 >= 119 && LA72_0 <= 120)) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // Php.g:423:24: expression ( COMMA expression )*
                            {
                            pushFollow(FOLLOW_expression_in_nameOrFunctionCall2697);
                            expression275=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression275.getTree());

                            // Php.g:423:35: ( COMMA expression )*
                            loop71:
                            do {
                                int alt71=2;
                                int LA71_0 = input.LA(1);

                                if ( (LA71_0==COMMA) ) {
                                    alt71=1;
                                }


                                switch (alt71) {
                            	case 1 :
                            	    // Php.g:423:36: COMMA expression
                            	    {
                            	    COMMA276=(Token)match(input,COMMA,FOLLOW_COMMA_in_nameOrFunctionCall2700); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA276);


                            	    pushFollow(FOLLOW_expression_in_nameOrFunctionCall2702);
                            	    expression277=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression277.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop71;
                                }
                            } while (true);


                            }
                            break;

                    }


                    CLOSE_BRACE278=(Token)match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_nameOrFunctionCall2708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_BRACE.add(CLOSE_BRACE278);


                    // AST REWRITE
                    // elements: expression, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 423:69: -> ^( Apply name ( expression )* )
                    {
                        // Php.g:423:72: ^( Apply name ( expression )* )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(Apply, "Apply")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // Php.g:423:85: ( expression )*
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // Php.g:424:7: name
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_name_in_nameOrFunctionCall2727);
                    name279=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name279.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 60, nameOrFunctionCall_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "nameOrFunctionCall"


    public static class name_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Php.g:427:1: name : ( staticMemberAccess | memberAccess | variable );
    public final PhpParser.name_return name() throws RecognitionException {
        PhpParser.name_return retval = new PhpParser.name_return();
        retval.start = input.LT(1);

        int name_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.staticMemberAccess_return staticMemberAccess280 =null;

        PhpParser.memberAccess_return memberAccess281 =null;

        PhpParser.variable_return variable282 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }

            // Php.g:428:5: ( staticMemberAccess | memberAccess | variable )
            int alt74=3;
            alt74 = dfa74.predict(input);
            switch (alt74) {
                case 1 :
                    // Php.g:428:7: staticMemberAccess
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_staticMemberAccess_in_name2744);
                    staticMemberAccess280=staticMemberAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, staticMemberAccess280.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:429:7: memberAccess
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_memberAccess_in_name2752);
                    memberAccess281=memberAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, memberAccess281.getTree());

                    }
                    break;
                case 3 :
                    // Php.g:430:7: variable
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_variable_in_name2760);
                    variable282=variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable282.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 61, name_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "name"


    public static class staticMemberAccess_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "staticMemberAccess"
    // Php.g:433:1: staticMemberAccess : UnquotedString '::' ^ nameOrFunctionCall ;
    public final PhpParser.staticMemberAccess_return staticMemberAccess() throws RecognitionException {
        PhpParser.staticMemberAccess_return retval = new PhpParser.staticMemberAccess_return();
        retval.start = input.LT(1);

        int staticMemberAccess_StartIndex = input.index();

        CommonTree root_0 = null;

        Token UnquotedString283=null;
        Token string_literal284=null;
        PhpParser.nameOrFunctionCall_return nameOrFunctionCall285 =null;


        CommonTree UnquotedString283_tree=null;
        CommonTree string_literal284_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }

            // Php.g:434:5: ( UnquotedString '::' ^ nameOrFunctionCall )
            // Php.g:434:7: UnquotedString '::' ^ nameOrFunctionCall
            {
            root_0 = (CommonTree)adaptor.nil();


            UnquotedString283=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_staticMemberAccess2781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UnquotedString283_tree = 
            (CommonTree)adaptor.create(UnquotedString283)
            ;
            adaptor.addChild(root_0, UnquotedString283_tree);
            }

            string_literal284=(Token)match(input,CLASS_MEMBER,FOLLOW_CLASS_MEMBER_in_staticMemberAccess2783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal284_tree = 
            (CommonTree)adaptor.create(string_literal284)
            ;
            root_0 = (CommonTree)adaptor.becomeRoot(string_literal284_tree, root_0);
            }

            pushFollow(FOLLOW_nameOrFunctionCall_in_staticMemberAccess2786);
            nameOrFunctionCall285=nameOrFunctionCall();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nameOrFunctionCall285.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 62, staticMemberAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "staticMemberAccess"


    public static class memberAccess_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "memberAccess"
    // Php.g:437:1: memberAccess : ( arrayAccess ( INSTANCE_MEMBER UnquotedString )? | variable INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall -> ^( INSTANCE_MEMBER variable arrayOrUnquotedStringOrFunctionCall ) );
    public final PhpParser.memberAccess_return memberAccess() throws RecognitionException {
        PhpParser.memberAccess_return retval = new PhpParser.memberAccess_return();
        retval.start = input.LT(1);

        int memberAccess_StartIndex = input.index();

        CommonTree root_0 = null;

        Token INSTANCE_MEMBER287=null;
        Token UnquotedString288=null;
        Token INSTANCE_MEMBER290=null;
        PhpParser.arrayAccess_return arrayAccess286 =null;

        PhpParser.variable_return variable289 =null;

        PhpParser.arrayOrUnquotedStringOrFunctionCall_return arrayOrUnquotedStringOrFunctionCall291 =null;


        CommonTree INSTANCE_MEMBER287_tree=null;
        CommonTree UnquotedString288_tree=null;
        CommonTree INSTANCE_MEMBER290_tree=null;
        RewriteRuleTokenStream stream_INSTANCE_MEMBER=new RewriteRuleTokenStream(adaptor,"token INSTANCE_MEMBER");
        RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
        RewriteRuleSubtreeStream stream_arrayOrUnquotedStringOrFunctionCall=new RewriteRuleSubtreeStream(adaptor,"rule arrayOrUnquotedStringOrFunctionCall");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }

            // Php.g:438:5: ( arrayAccess ( INSTANCE_MEMBER UnquotedString )? | variable INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall -> ^( INSTANCE_MEMBER variable arrayOrUnquotedStringOrFunctionCall ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==DOLLAR) ) {
                int LA76_1 = input.LA(2);

                if ( (LA76_1==DOLLAR) ) {
                    int LA76_3 = input.LA(3);

                    if ( (synpred131_Php()) ) {
                        alt76=1;
                    }
                    else if ( (true) ) {
                        alt76=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 76, 3, input);

                        throw nvae;

                    }
                }
                else if ( (LA76_1==UnquotedString) ) {
                    int LA76_4 = input.LA(3);

                    if ( (synpred131_Php()) ) {
                        alt76=1;
                    }
                    else if ( (true) ) {
                        alt76=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 76, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA76_0==UnquotedString) ) {
                int LA76_2 = input.LA(2);

                if ( (LA76_2==OPEN_SQUARE_BRACE) ) {
                    alt76=1;
                }
                else if ( (LA76_2==INSTANCE_MEMBER) ) {
                    alt76=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 76, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // Php.g:438:7: arrayAccess ( INSTANCE_MEMBER UnquotedString )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_arrayAccess_in_memberAccess2803);
                    arrayAccess286=arrayAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayAccess286.getTree());

                    // Php.g:438:19: ( INSTANCE_MEMBER UnquotedString )?
                    int alt75=2;
                    alt75 = dfa75.predict(input);
                    switch (alt75) {
                        case 1 :
                            // Php.g:438:20: INSTANCE_MEMBER UnquotedString
                            {
                            INSTANCE_MEMBER287=(Token)match(input,INSTANCE_MEMBER,FOLLOW_INSTANCE_MEMBER_in_memberAccess2806); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            INSTANCE_MEMBER287_tree = 
                            (CommonTree)adaptor.create(INSTANCE_MEMBER287)
                            ;
                            adaptor.addChild(root_0, INSTANCE_MEMBER287_tree);
                            }

                            UnquotedString288=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_memberAccess2808); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            UnquotedString288_tree = 
                            (CommonTree)adaptor.create(UnquotedString288)
                            ;
                            adaptor.addChild(root_0, UnquotedString288_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Php.g:439:4: variable INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall
                    {
                    pushFollow(FOLLOW_variable_in_memberAccess2815);
                    variable289=variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variable.add(variable289.getTree());

                    INSTANCE_MEMBER290=(Token)match(input,INSTANCE_MEMBER,FOLLOW_INSTANCE_MEMBER_in_memberAccess2817); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSTANCE_MEMBER.add(INSTANCE_MEMBER290);


                    pushFollow(FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_memberAccess2819);
                    arrayOrUnquotedStringOrFunctionCall291=arrayOrUnquotedStringOrFunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayOrUnquotedStringOrFunctionCall.add(arrayOrUnquotedStringOrFunctionCall291.getTree());

                    // AST REWRITE
                    // elements: variable, INSTANCE_MEMBER, arrayOrUnquotedStringOrFunctionCall
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 439:65: -> ^( INSTANCE_MEMBER variable arrayOrUnquotedStringOrFunctionCall )
                    {
                        // Php.g:439:68: ^( INSTANCE_MEMBER variable arrayOrUnquotedStringOrFunctionCall )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_INSTANCE_MEMBER.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_variable.nextTree());

                        adaptor.addChild(root_1, stream_arrayOrUnquotedStringOrFunctionCall.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 63, memberAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "memberAccess"


    public static class arrayOrUnquotedStringOrFunctionCall_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayOrUnquotedStringOrFunctionCall"
    // Php.g:442:1: arrayOrUnquotedStringOrFunctionCall : ( arrayAccess ( EQUALS ^ assignment )? | name ( EQUALS | AssignmentOperator | ConcatAssigmentOperator ) ^ assignment | objectNameOrMethod INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall -> ^( INSTANCE_MEMBER objectNameOrMethod arrayOrUnquotedStringOrFunctionCall ) | nameOrFunctionCall );
    public final PhpParser.arrayOrUnquotedStringOrFunctionCall_return arrayOrUnquotedStringOrFunctionCall() throws RecognitionException {
        PhpParser.arrayOrUnquotedStringOrFunctionCall_return retval = new PhpParser.arrayOrUnquotedStringOrFunctionCall_return();
        retval.start = input.LT(1);

        int arrayOrUnquotedStringOrFunctionCall_StartIndex = input.index();

        CommonTree root_0 = null;

        Token EQUALS293=null;
        Token set296=null;
        Token INSTANCE_MEMBER299=null;
        PhpParser.arrayAccess_return arrayAccess292 =null;

        PhpParser.assignment_return assignment294 =null;

        PhpParser.name_return name295 =null;

        PhpParser.assignment_return assignment297 =null;

        PhpParser.objectNameOrMethod_return objectNameOrMethod298 =null;

        PhpParser.arrayOrUnquotedStringOrFunctionCall_return arrayOrUnquotedStringOrFunctionCall300 =null;

        PhpParser.nameOrFunctionCall_return nameOrFunctionCall301 =null;


        CommonTree EQUALS293_tree=null;
        CommonTree set296_tree=null;
        CommonTree INSTANCE_MEMBER299_tree=null;
        RewriteRuleTokenStream stream_INSTANCE_MEMBER=new RewriteRuleTokenStream(adaptor,"token INSTANCE_MEMBER");
        RewriteRuleSubtreeStream stream_objectNameOrMethod=new RewriteRuleSubtreeStream(adaptor,"rule objectNameOrMethod");
        RewriteRuleSubtreeStream stream_arrayOrUnquotedStringOrFunctionCall=new RewriteRuleSubtreeStream(adaptor,"rule arrayOrUnquotedStringOrFunctionCall");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }

            // Php.g:443:5: ( arrayAccess ( EQUALS ^ assignment )? | name ( EQUALS | AssignmentOperator | ConcatAssigmentOperator ) ^ assignment | objectNameOrMethod INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall -> ^( INSTANCE_MEMBER objectNameOrMethod arrayOrUnquotedStringOrFunctionCall ) | nameOrFunctionCall )
            int alt78=4;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // Php.g:443:7: arrayAccess ( EQUALS ^ assignment )?
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_arrayAccess_in_arrayOrUnquotedStringOrFunctionCall2846);
                    arrayAccess292=arrayAccess();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayAccess292.getTree());

                    // Php.g:443:19: ( EQUALS ^ assignment )?
                    int alt77=2;
                    alt77 = dfa77.predict(input);
                    switch (alt77) {
                        case 1 :
                            // Php.g:443:20: EQUALS ^ assignment
                            {
                            EQUALS293=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_arrayOrUnquotedStringOrFunctionCall2849); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQUALS293_tree = 
                            (CommonTree)adaptor.create(EQUALS293)
                            ;
                            root_0 = (CommonTree)adaptor.becomeRoot(EQUALS293_tree, root_0);
                            }

                            pushFollow(FOLLOW_assignment_in_arrayOrUnquotedStringOrFunctionCall2852);
                            assignment294=assignment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment294.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Php.g:444:7: name ( EQUALS | AssignmentOperator | ConcatAssigmentOperator ) ^ assignment
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_name_in_arrayOrUnquotedStringOrFunctionCall2862);
                    name295=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name295.getTree());

                    set296=(Token)input.LT(1);

                    set296=(Token)input.LT(1);

                    if ( input.LA(1)==AssignmentOperator||input.LA(1)==ConcatAssigmentOperator||input.LA(1)==EQUALS ) {
                        input.consume();
                        if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(
                        (CommonTree)adaptor.create(set296)
                        , root_0);
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_assignment_in_arrayOrUnquotedStringOrFunctionCall2877);
                    assignment297=assignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment297.getTree());

                    }
                    break;
                case 3 :
                    // Php.g:445:7: objectNameOrMethod INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall
                    {
                    pushFollow(FOLLOW_objectNameOrMethod_in_arrayOrUnquotedStringOrFunctionCall2887);
                    objectNameOrMethod298=objectNameOrMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_objectNameOrMethod.add(objectNameOrMethod298.getTree());

                    INSTANCE_MEMBER299=(Token)match(input,INSTANCE_MEMBER,FOLLOW_INSTANCE_MEMBER_in_arrayOrUnquotedStringOrFunctionCall2889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSTANCE_MEMBER.add(INSTANCE_MEMBER299);


                    pushFollow(FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_arrayOrUnquotedStringOrFunctionCall2891);
                    arrayOrUnquotedStringOrFunctionCall300=arrayOrUnquotedStringOrFunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arrayOrUnquotedStringOrFunctionCall.add(arrayOrUnquotedStringOrFunctionCall300.getTree());

                    // AST REWRITE
                    // elements: objectNameOrMethod, INSTANCE_MEMBER, arrayOrUnquotedStringOrFunctionCall
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 445:78: -> ^( INSTANCE_MEMBER objectNameOrMethod arrayOrUnquotedStringOrFunctionCall )
                    {
                        // Php.g:445:81: ^( INSTANCE_MEMBER objectNameOrMethod arrayOrUnquotedStringOrFunctionCall )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(
                        stream_INSTANCE_MEMBER.nextNode()
                        , root_1);

                        adaptor.addChild(root_1, stream_objectNameOrMethod.nextTree());

                        adaptor.addChild(root_1, stream_arrayOrUnquotedStringOrFunctionCall.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // Php.g:446:7: nameOrFunctionCall
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    pushFollow(FOLLOW_nameOrFunctionCall_in_arrayOrUnquotedStringOrFunctionCall2909);
                    nameOrFunctionCall301=nameOrFunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nameOrFunctionCall301.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 64, arrayOrUnquotedStringOrFunctionCall_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayOrUnquotedStringOrFunctionCall"


    public static class arrayAccess_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "arrayAccess"
    // Php.g:449:1: arrayAccess : variable OPEN_SQUARE_BRACE ( expression )? CLOSE_SQUARE_BRACE ( ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )* )? -> ^( OPEN_SQUARE_BRACE variable ( expression )* ) ;
    public final PhpParser.arrayAccess_return arrayAccess() throws RecognitionException {
        PhpParser.arrayAccess_return retval = new PhpParser.arrayAccess_return();
        retval.start = input.LT(1);

        int arrayAccess_StartIndex = input.index();

        CommonTree root_0 = null;

        Token OPEN_SQUARE_BRACE303=null;
        Token CLOSE_SQUARE_BRACE305=null;
        Token OPEN_SQUARE_BRACE306=null;
        Token CLOSE_SQUARE_BRACE308=null;
        PhpParser.variable_return variable302 =null;

        PhpParser.expression_return expression304 =null;

        PhpParser.expression_return expression307 =null;


        CommonTree OPEN_SQUARE_BRACE303_tree=null;
        CommonTree CLOSE_SQUARE_BRACE305_tree=null;
        CommonTree OPEN_SQUARE_BRACE306_tree=null;
        CommonTree CLOSE_SQUARE_BRACE308_tree=null;
        RewriteRuleTokenStream stream_CLOSE_SQUARE_BRACE=new RewriteRuleTokenStream(adaptor,"token CLOSE_SQUARE_BRACE");
        RewriteRuleTokenStream stream_OPEN_SQUARE_BRACE=new RewriteRuleTokenStream(adaptor,"token OPEN_SQUARE_BRACE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_variable=new RewriteRuleSubtreeStream(adaptor,"rule variable");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }

            // Php.g:450:5: ( variable OPEN_SQUARE_BRACE ( expression )? CLOSE_SQUARE_BRACE ( ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )* )? -> ^( OPEN_SQUARE_BRACE variable ( expression )* ) )
            // Php.g:450:7: variable OPEN_SQUARE_BRACE ( expression )? CLOSE_SQUARE_BRACE ( ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )* )?
            {
            pushFollow(FOLLOW_variable_in_arrayAccess2926);
            variable302=variable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable.add(variable302.getTree());

            OPEN_SQUARE_BRACE303=(Token)match(input,OPEN_SQUARE_BRACE,FOLLOW_OPEN_SQUARE_BRACE_in_arrayAccess2928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OPEN_SQUARE_BRACE.add(OPEN_SQUARE_BRACE303);


            // Php.g:450:34: ( expression )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==AMPERSAND||LA79_0==ArrayWord||LA79_0==BANG||LA79_0==Boolean||LA79_0==CLONE||LA79_0==DIE||LA79_0==DOLLAR||(LA79_0 >= DoubleQuotedString && LA79_0 <= ECHO)||LA79_0==HereDoc||(LA79_0 >= IncrementOperator && LA79_0 <= Integer)||LA79_0==MINUS||LA79_0==NEW||LA79_0==OPEN_BRACE||(LA79_0 >= PRINT && LA79_0 <= PRINTF)||LA79_0==Real||LA79_0==SUPPRESS_WARNINGS||LA79_0==SingleQuotedString||LA79_0==TILDE||LA79_0==UnquotedString||(LA79_0 >= 119 && LA79_0 <= 120)) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // Php.g:450:34: expression
                    {
                    pushFollow(FOLLOW_expression_in_arrayAccess2930);
                    expression304=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression304.getTree());

                    }
                    break;

            }


            CLOSE_SQUARE_BRACE305=(Token)match(input,CLOSE_SQUARE_BRACE,FOLLOW_CLOSE_SQUARE_BRACE_in_arrayAccess2933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CLOSE_SQUARE_BRACE.add(CLOSE_SQUARE_BRACE305);


            // Php.g:450:65: ( ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )* )?
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // Php.g:450:66: ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )*
                    {
                    // Php.g:450:66: ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )*
                    loop80:
                    do {
                        int alt80=2;
                        alt80 = dfa80.predict(input);
                        switch (alt80) {
                    	case 1 :
                    	    // Php.g:450:67: OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE
                    	    {
                    	    OPEN_SQUARE_BRACE306=(Token)match(input,OPEN_SQUARE_BRACE,FOLLOW_OPEN_SQUARE_BRACE_in_arrayAccess2937); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_OPEN_SQUARE_BRACE.add(OPEN_SQUARE_BRACE306);


                    	    pushFollow(FOLLOW_expression_in_arrayAccess2939);
                    	    expression307=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression307.getTree());

                    	    CLOSE_SQUARE_BRACE308=(Token)match(input,CLOSE_SQUARE_BRACE,FOLLOW_CLOSE_SQUARE_BRACE_in_arrayAccess2941); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_CLOSE_SQUARE_BRACE.add(CLOSE_SQUARE_BRACE308);


                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, OPEN_SQUARE_BRACE, variable
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 450:119: -> ^( OPEN_SQUARE_BRACE variable ( expression )* )
            {
                // Php.g:450:122: ^( OPEN_SQUARE_BRACE variable ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_OPEN_SQUARE_BRACE.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_variable.nextTree());

                // Php.g:450:151: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 65, arrayAccess_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "arrayAccess"


    public static class objectNameOrMethod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "objectNameOrMethod"
    // Php.g:453:1: objectNameOrMethod : nameOrFunctionCall ;
    public final PhpParser.objectNameOrMethod_return objectNameOrMethod() throws RecognitionException {
        PhpParser.objectNameOrMethod_return retval = new PhpParser.objectNameOrMethod_return();
        retval.start = input.LT(1);

        int objectNameOrMethod_StartIndex = input.index();

        CommonTree root_0 = null;

        PhpParser.nameOrFunctionCall_return nameOrFunctionCall309 =null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }

            // Php.g:454:2: ( nameOrFunctionCall )
            // Php.g:454:4: nameOrFunctionCall
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_nameOrFunctionCall_in_objectNameOrMethod2970);
            nameOrFunctionCall309=nameOrFunctionCall();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nameOrFunctionCall309.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 66, objectNameOrMethod_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "objectNameOrMethod"


    public static class variable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable"
    // Php.g:457:1: variable : ( DOLLAR ^ variable | UnquotedString );
    public final PhpParser.variable_return variable() throws RecognitionException {
        PhpParser.variable_return retval = new PhpParser.variable_return();
        retval.start = input.LT(1);

        int variable_StartIndex = input.index();

        CommonTree root_0 = null;

        Token DOLLAR310=null;
        Token UnquotedString312=null;
        PhpParser.variable_return variable311 =null;


        CommonTree DOLLAR310_tree=null;
        CommonTree UnquotedString312_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }

            // Php.g:458:5: ( DOLLAR ^ variable | UnquotedString )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==DOLLAR) ) {
                alt82=1;
            }
            else if ( (LA82_0==UnquotedString) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }
            switch (alt82) {
                case 1 :
                    // Php.g:458:7: DOLLAR ^ variable
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    DOLLAR310=(Token)match(input,DOLLAR,FOLLOW_DOLLAR_in_variable2986); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR310_tree = 
                    (CommonTree)adaptor.create(DOLLAR310)
                    ;
                    root_0 = (CommonTree)adaptor.becomeRoot(DOLLAR310_tree, root_0);
                    }

                    pushFollow(FOLLOW_variable_in_variable2989);
                    variable311=variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable311.getTree());

                    }
                    break;
                case 2 :
                    // Php.g:459:7: UnquotedString
                    {
                    root_0 = (CommonTree)adaptor.nil();


                    UnquotedString312=(Token)match(input,UnquotedString,FOLLOW_UnquotedString_in_variable2997); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UnquotedString312_tree = 
                    (CommonTree)adaptor.create(UnquotedString312)
                    ;
                    adaptor.addChild(root_0, UnquotedString312_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 67, variable_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "variable"


    public static class instanceMember_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "instanceMember"
    // Php.g:462:1: instanceMember : INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall -> ^( INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall ) ;
    public final PhpParser.instanceMember_return instanceMember() throws RecognitionException {
        PhpParser.instanceMember_return retval = new PhpParser.instanceMember_return();
        retval.start = input.LT(1);

        int instanceMember_StartIndex = input.index();

        CommonTree root_0 = null;

        Token INSTANCE_MEMBER313=null;
        PhpParser.arrayOrUnquotedStringOrFunctionCall_return arrayOrUnquotedStringOrFunctionCall314 =null;


        CommonTree INSTANCE_MEMBER313_tree=null;
        RewriteRuleTokenStream stream_INSTANCE_MEMBER=new RewriteRuleTokenStream(adaptor,"token INSTANCE_MEMBER");
        RewriteRuleSubtreeStream stream_arrayOrUnquotedStringOrFunctionCall=new RewriteRuleSubtreeStream(adaptor,"rule arrayOrUnquotedStringOrFunctionCall");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }

            // Php.g:463:4: ( INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall -> ^( INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall ) )
            // Php.g:463:6: INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall
            {
            INSTANCE_MEMBER313=(Token)match(input,INSTANCE_MEMBER,FOLLOW_INSTANCE_MEMBER_in_instanceMember3013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSTANCE_MEMBER.add(INSTANCE_MEMBER313);


            pushFollow(FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_instanceMember3015);
            arrayOrUnquotedStringOrFunctionCall314=arrayOrUnquotedStringOrFunctionCall();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arrayOrUnquotedStringOrFunctionCall.add(arrayOrUnquotedStringOrFunctionCall314.getTree());

            // AST REWRITE
            // elements: arrayOrUnquotedStringOrFunctionCall, INSTANCE_MEMBER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 463:58: -> ^( INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall )
            {
                // Php.g:463:61: ^( INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(
                stream_INSTANCE_MEMBER.nextNode()
                , root_1);

                adaptor.addChild(root_1, stream_arrayOrUnquotedStringOrFunctionCall.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 68, instanceMember_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "instanceMember"


    public static class ignoreStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ignoreStatement"
    // Php.g:466:1: ignoreStatement : PhpStatement ;
    public final PhpParser.ignoreStatement_return ignoreStatement() throws RecognitionException {
        PhpParser.ignoreStatement_return retval = new PhpParser.ignoreStatement_return();
        retval.start = input.LT(1);

        int ignoreStatement_StartIndex = input.index();

        CommonTree root_0 = null;

        Token PhpStatement315=null;

        CommonTree PhpStatement315_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }

            // Php.g:467:5: ( PhpStatement )
            // Php.g:467:7: PhpStatement
            {
            root_0 = (CommonTree)adaptor.nil();


            PhpStatement315=(Token)match(input,PhpStatement,FOLLOW_PhpStatement_in_ignoreStatement3040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PhpStatement315_tree = 
            (CommonTree)adaptor.create(PhpStatement315)
            ;
            adaptor.addChild(root_0, PhpStatement315_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
            if ( state.backtracking>0 ) { memoize(input, 69, ignoreStatement_StartIndex); }

        }
        return retval;
    }
    // $ANTLR end "ignoreStatement"

    // $ANTLR start synpred2_Php
    public final void synpred2_Php_fragment() throws RecognitionException {
        // Php.g:142:7: ( ignoreStatement )
        // Php.g:142:7: ignoreStatement
        {
        pushFollow(FOLLOW_ignoreStatement_in_synpred2_Php256);
        ignoreStatement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Php

    // $ANTLR start synpred4_Php
    public final void synpred4_Php_fragment() throws RecognitionException {
        // Php.g:143:7: ( ( simpleStatement )? BodyString )
        // Php.g:143:7: ( simpleStatement )? BodyString
        {
        // Php.g:143:7: ( simpleStatement )?
        int alt83=2;
        int LA83_0 = input.LA(1);

        if ( (LA83_0==AMPERSAND||LA83_0==ArrayWord||LA83_0==BANG||LA83_0==Boolean||LA83_0==CLONE||LA83_0==DIE||LA83_0==DOLLAR||(LA83_0 >= DoubleQuotedString && LA83_0 <= ECHO)||LA83_0==GLOBAL||LA83_0==HereDoc||(LA83_0 >= IncrementOperator && LA83_0 <= Integer)||LA83_0==MINUS||LA83_0==NEW||LA83_0==OPEN_BRACE||(LA83_0 >= PRINT && LA83_0 <= PRINTF)||LA83_0==PhpStatement||(LA83_0 >= RETURN && LA83_0 <= RequireOperator)||LA83_0==SUPPRESS_WARNINGS||LA83_0==SingleQuotedString||LA83_0==TILDE||LA83_0==UnquotedString||(LA83_0 >= 119 && LA83_0 <= 120)) ) {
            alt83=1;
        }
        switch (alt83) {
            case 1 :
                // Php.g:143:7: simpleStatement
                {
                pushFollow(FOLLOW_simpleStatement_in_synpred4_Php264);
                simpleStatement();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,BodyString,FOLLOW_BodyString_in_synpred4_Php267); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Php

    // $ANTLR start synpred6_Php
    public final void synpred6_Php_fragment() throws RecognitionException {
        // Php.g:144:7: ( '{' statement '}' ( ';' )? )
        // Php.g:144:7: '{' statement '}' ( ';' )?
        {
        match(input,OPEN_CURLY_BRACE,FOLLOW_OPEN_CURLY_BRACE_in_synpred6_Php275); if (state.failed) return ;

        pushFollow(FOLLOW_statement_in_synpred6_Php277);
        statement();

        state._fsp--;
        if (state.failed) return ;

        match(input,CLOSE_CURLY_BRACE,FOLLOW_CLOSE_CURLY_BRACE_in_synpred6_Php279); if (state.failed) return ;

        // Php.g:144:25: ( ';' )?
        int alt84=2;
        int LA84_0 = input.LA(1);

        if ( (LA84_0==SEMICOLON) ) {
            alt84=1;
        }
        switch (alt84) {
            case 1 :
                // Php.g:144:26: ';'
                {
                match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred6_Php282); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred6_Php

    // $ANTLR start synpred8_Php
    public final void synpred8_Php_fragment() throws RecognitionException {
        // Php.g:145:7: ( bracketedBlock ( ';' )? )
        // Php.g:145:7: bracketedBlock ( ';' )?
        {
        pushFollow(FOLLOW_bracketedBlock_in_synpred8_Php296);
        bracketedBlock();

        state._fsp--;
        if (state.failed) return ;

        // Php.g:145:22: ( ';' )?
        int alt85=2;
        int LA85_0 = input.LA(1);

        if ( (LA85_0==SEMICOLON) ) {
            alt85=1;
        }
        switch (alt85) {
            case 1 :
                // Php.g:145:23: ';'
                {
                match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred8_Php299); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred8_Php

    // $ANTLR start synpred10_Php
    public final void synpred10_Php_fragment() throws RecognitionException {
        // Php.g:147:7: ( complexStatement )
        // Php.g:147:7: complexStatement
        {
        pushFollow(FOLLOW_complexStatement_in_synpred10_Php318);
        complexStatement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Php

    // $ANTLR start synpred19_Php
    public final void synpred19_Php_fragment() throws RecognitionException {
        // Php.g:179:7: ( ( fieldModifier )* FUNCTION UnquotedString parametersDefinition ( bracketedBlock | ';' ) )
        // Php.g:179:7: ( fieldModifier )* FUNCTION UnquotedString parametersDefinition ( bracketedBlock | ';' )
        {
        // Php.g:179:7: ( fieldModifier )*
        loop86:
        do {
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==ABSTRACT||LA86_0==AccessModifier||LA86_0==118||LA86_0==122) ) {
                alt86=1;
            }


            switch (alt86) {
        	case 1 :
        	    // Php.g:179:7: fieldModifier
        	    {
        	    pushFollow(FOLLOW_fieldModifier_in_synpred19_Php537);
        	    fieldModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop86;
            }
        } while (true);


        match(input,FUNCTION,FOLLOW_FUNCTION_in_synpred19_Php540); if (state.failed) return ;

        match(input,UnquotedString,FOLLOW_UnquotedString_in_synpred19_Php542); if (state.failed) return ;

        pushFollow(FOLLOW_parametersDefinition_in_synpred19_Php544);
        parametersDefinition();

        state._fsp--;
        if (state.failed) return ;

        // Php.g:179:67: ( bracketedBlock | ';' )
        int alt87=2;
        int LA87_0 = input.LA(1);

        if ( (LA87_0==OPEN_CURLY_BRACE) ) {
            alt87=1;
        }
        else if ( (LA87_0==SEMICOLON) ) {
            alt87=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 87, 0, input);

            throw nvae;

        }
        switch (alt87) {
            case 1 :
                // Php.g:179:68: bracketedBlock
                {
                pushFollow(FOLLOW_bracketedBlock_in_synpred19_Php547);
                bracketedBlock();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // Php.g:179:85: ';'
                {
                match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synpred19_Php551); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred19_Php

    // $ANTLR start synpred29_Php
    public final void synpred29_Php_fragment() throws RecognitionException {
        // Php.g:198:7: ( 'null' )
        // Php.g:198:7: 'null'
        {
        match(input,120,FOLLOW_120_in_synpred29_Php783); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Php

    // $ANTLR start synpred32_Php
    public final void synpred32_Php_fragment() throws RecognitionException {
        // Php.g:205:7: ( FOR )
        // Php.g:205:8: FOR
        {
        match(input,FOR,FOLLOW_FOR_in_synpred32_Php825); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_Php

    // $ANTLR start synpred33_Php
    public final void synpred33_Php_fragment() throws RecognitionException {
        // Php.g:206:7: ( FOR_EACH )
        // Php.g:206:8: FOR_EACH
        {
        match(input,FOR_EACH,FOLLOW_FOR_EACH_in_synpred33_Php850); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_Php

    // $ANTLR start synpred34_Php
    public final void synpred34_Php_fragment() throws RecognitionException {
        // Php.g:207:7: ( WHILE )
        // Php.g:207:8: WHILE
        {
        match(input,WHILE,FOLLOW_WHILE_in_synpred34_Php875); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_Php

    // $ANTLR start synpred41_Php
    public final void synpred41_Php_fragment() throws RecognitionException {
        // Php.g:221:15: ( expression )
        // Php.g:221:15: expression
        {
        pushFollow(FOLLOW_expression_in_synpred41_Php1042);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred41_Php

    // $ANTLR start synpred47_Php
    public final void synpred47_Php_fragment() throws RecognitionException {
        // Php.g:223:7: ( ECHO | PRINT | PRINTF | DIE )
        // Php.g:
        {
        if ( input.LA(1)==DIE||input.LA(1)==ECHO||(input.LA(1) >= PRINT && input.LA(1) <= PRINTF) ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred47_Php

    // $ANTLR start synpred51_Php
    public final void synpred51_Php_fragment() throws RecognitionException {
        // Php.g:224:7: ( BREAK | CONTINUE | THROW | USE )
        // Php.g:
        {
        if ( input.LA(1)==BREAK||input.LA(1)==CONTINUE||input.LA(1)==THROW||input.LA(1)==USE ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }

    }
    // $ANTLR end synpred51_Php

    // $ANTLR start synpred52_Php
    public final void synpred52_Php_fragment() throws RecognitionException {
        // Php.g:234:39: ( conditional )
        // Php.g:234:39: conditional
        {
        pushFollow(FOLLOW_conditional_in_synpred52_Php1173);
        conditional();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred52_Php

    // $ANTLR start synpred53_Php
    public final void synpred53_Php_fragment() throws RecognitionException {
        // Php.g:238:7: ( ELSE )
        // Php.g:238:8: ELSE
        {
        match(input,ELSE,FOLLOW_ELSE_in_synpred53_Php1205); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred53_Php

    // $ANTLR start synpred54_Php
    public final void synpred54_Php_fragment() throws RecognitionException {
        // Php.g:239:7: ( ELSE_IF )
        // Php.g:239:8: ELSE_IF
        {
        match(input,ELSE_IF,FOLLOW_ELSE_IF_in_synpred54_Php1228); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred54_Php

    // $ANTLR start synpred55_Php
    public final void synpred55_Php_fragment() throws RecognitionException {
        // Php.g:239:56: ( conditional )
        // Php.g:239:56: conditional
        {
        pushFollow(FOLLOW_conditional_in_synpred55_Php1242);
        conditional();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred55_Php

    // $ANTLR start synpred69_Php
    public final void synpred69_Php_fragment() throws RecognitionException {
        // Php.g:292:19: ( ',' expression )
        // Php.g:292:19: ',' expression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred69_Php1631); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred69_Php1634);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred69_Php

    // $ANTLR start synpred71_Php
    public final void synpred71_Php_fragment() throws RecognitionException {
        // Php.g:300:23: ( ( 'or' | 'OR' ) weakLogicalXor )
        // Php.g:300:23: ( 'or' | 'OR' ) weakLogicalXor
        {
        if ( input.LA(1)==115||input.LA(1)==121 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_weakLogicalXor_in_synpred71_Php1685);
        weakLogicalXor();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred71_Php

    // $ANTLR start synpred73_Php
    public final void synpred73_Php_fragment() throws RecognitionException {
        // Php.g:304:23: ( ( 'xor' | 'XOR' ) weakLogicalAnd )
        // Php.g:304:23: ( 'xor' | 'XOR' ) weakLogicalAnd
        {
        if ( input.LA(1)==116||input.LA(1)==123 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_weakLogicalAnd_in_synpred73_Php1714);
        weakLogicalAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred73_Php

    // $ANTLR start synpred75_Php
    public final void synpred75_Php_fragment() throws RecognitionException {
        // Php.g:308:19: ( ( 'and' | 'AND' ) assignment )
        // Php.g:308:19: ( 'and' | 'AND' ) assignment
        {
        if ( input.LA(1)==114||input.LA(1)==117 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_assignment_in_synpred75_Php1751);
        assignment();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred75_Php

    // $ANTLR start synpred76_Php
    public final void synpred76_Php_fragment() throws RecognitionException {
        // Php.g:312:21: ( RequireOperator )
        // Php.g:312:22: RequireOperator
        {
        match(input,RequireOperator,FOLLOW_RequireOperator_in_synpred76_Php1777); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred76_Php

    // $ANTLR start synpred77_Php
    public final void synpred77_Php_fragment() throws RecognitionException {
        // Php.g:312:7: ( name EQUALS ( ( RequireOperator )=> simpleRequire | assignment ) )
        // Php.g:312:7: name EQUALS ( ( RequireOperator )=> simpleRequire | assignment )
        {
        pushFollow(FOLLOW_name_in_synpred77_Php1770);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUALS,FOLLOW_EQUALS_in_synpred77_Php1772); if (state.failed) return ;

        // Php.g:312:20: ( ( RequireOperator )=> simpleRequire | assignment )
        int alt93=2;
        int LA93_0 = input.LA(1);

        if ( (LA93_0==RequireOperator) && (synpred76_Php())) {
            alt93=1;
        }
        else if ( (LA93_0==AMPERSAND||LA93_0==ArrayWord||LA93_0==BANG||LA93_0==Boolean||LA93_0==CLONE||LA93_0==DIE||LA93_0==DOLLAR||(LA93_0 >= DoubleQuotedString && LA93_0 <= ECHO)||LA93_0==HereDoc||(LA93_0 >= IncrementOperator && LA93_0 <= Integer)||LA93_0==MINUS||LA93_0==NEW||LA93_0==OPEN_BRACE||(LA93_0 >= PRINT && LA93_0 <= PRINTF)||LA93_0==Real||LA93_0==SUPPRESS_WARNINGS||LA93_0==SingleQuotedString||LA93_0==TILDE||LA93_0==UnquotedString||(LA93_0 >= 119 && LA93_0 <= 120)) ) {
            alt93=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 93, 0, input);

            throw nvae;

        }
        switch (alt93) {
            case 1 :
                // Php.g:312:21: ( RequireOperator )=> simpleRequire
                {
                pushFollow(FOLLOW_simpleRequire_in_synpred77_Php1781);
                simpleRequire();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // Php.g:312:57: assignment
                {
                pushFollow(FOLLOW_assignment_in_synpred77_Php1785);
                assignment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred77_Php

    // $ANTLR start synpred79_Php
    public final void synpred79_Php_fragment() throws RecognitionException {
        // Php.g:313:7: ( name ( ( AssignmentOperator | ConcatAssigmentOperator ) assignment ) )
        // Php.g:313:7: name ( ( AssignmentOperator | ConcatAssigmentOperator ) assignment )
        {
        pushFollow(FOLLOW_name_in_synpred79_Php1795);
        name();

        state._fsp--;
        if (state.failed) return ;

        // Php.g:313:12: ( ( AssignmentOperator | ConcatAssigmentOperator ) assignment )
        // Php.g:313:13: ( AssignmentOperator | ConcatAssigmentOperator ) assignment
        {
        if ( input.LA(1)==AssignmentOperator||input.LA(1)==ConcatAssigmentOperator ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_assignment_in_synpred79_Php1807);
        assignment();

        state._fsp--;
        if (state.failed) return ;

        }


        }

    }
    // $ANTLR end synpred79_Php

    // $ANTLR start synpred80_Php
    public final void synpred80_Php_fragment() throws RecognitionException {
        // Php.g:318:7: ( logicalOr QUESTION_MARK expression COLON expression )
        // Php.g:318:7: logicalOr QUESTION_MARK expression COLON expression
        {
        pushFollow(FOLLOW_logicalOr_in_synpred80_Php1833);
        logicalOr();

        state._fsp--;
        if (state.failed) return ;

        match(input,QUESTION_MARK,FOLLOW_QUESTION_MARK_in_synpred80_Php1835); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred80_Php1837);
        expression();

        state._fsp--;
        if (state.failed) return ;

        match(input,COLON,FOLLOW_COLON_in_synpred80_Php1839); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred80_Php1841);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred80_Php

    // $ANTLR start synpred81_Php
    public final void synpred81_Php_fragment() throws RecognitionException {
        // Php.g:323:19: ( LOGICAL_OR logicalAnd )
        // Php.g:323:19: LOGICAL_OR logicalAnd
        {
        match(input,LOGICAL_OR,FOLLOW_LOGICAL_OR_in_synpred81_Php1886); if (state.failed) return ;

        pushFollow(FOLLOW_logicalAnd_in_synpred81_Php1889);
        logicalAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred81_Php

    // $ANTLR start synpred82_Php
    public final void synpred82_Php_fragment() throws RecognitionException {
        // Php.g:327:18: ( LOGICAL_AND bitwiseOr )
        // Php.g:327:18: LOGICAL_AND bitwiseOr
        {
        match(input,LOGICAL_AND,FOLLOW_LOGICAL_AND_in_synpred82_Php1911); if (state.failed) return ;

        pushFollow(FOLLOW_bitwiseOr_in_synpred82_Php1914);
        bitwiseOr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred82_Php

    // $ANTLR start synpred83_Php
    public final void synpred83_Php_fragment() throws RecognitionException {
        // Php.g:331:19: ( PIPE bitWiseAnd )
        // Php.g:331:19: PIPE bitWiseAnd
        {
        match(input,PIPE,FOLLOW_PIPE_in_synpred83_Php1940); if (state.failed) return ;

        pushFollow(FOLLOW_bitWiseAnd_in_synpred83_Php1943);
        bitWiseAnd();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred83_Php

    // $ANTLR start synpred84_Php
    public final void synpred84_Php_fragment() throws RecognitionException {
        // Php.g:335:22: ( AMPERSAND equalityCheck )
        // Php.g:335:22: AMPERSAND equalityCheck
        {
        match(input,AMPERSAND,FOLLOW_AMPERSAND_in_synpred84_Php1965); if (state.failed) return ;

        pushFollow(FOLLOW_equalityCheck_in_synpred84_Php1968);
        equalityCheck();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred84_Php

    // $ANTLR start synpred85_Php
    public final void synpred85_Php_fragment() throws RecognitionException {
        // Php.g:339:25: ( EqualityOperator comparisionCheck )
        // Php.g:339:25: EqualityOperator comparisionCheck
        {
        match(input,EqualityOperator,FOLLOW_EqualityOperator_in_synpred85_Php1990); if (state.failed) return ;

        pushFollow(FOLLOW_comparisionCheck_in_synpred85_Php1993);
        comparisionCheck();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred85_Php

    // $ANTLR start synpred86_Php
    public final void synpred86_Php_fragment() throws RecognitionException {
        // Php.g:343:21: ( ComparisionOperator bitWiseShift )
        // Php.g:343:21: ComparisionOperator bitWiseShift
        {
        match(input,ComparisionOperator,FOLLOW_ComparisionOperator_in_synpred86_Php2019); if (state.failed) return ;

        pushFollow(FOLLOW_bitWiseShift_in_synpred86_Php2022);
        bitWiseShift();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred86_Php

    // $ANTLR start synpred87_Php
    public final void synpred87_Php_fragment() throws RecognitionException {
        // Php.g:347:17: ( ShiftOperator addition )
        // Php.g:347:17: ShiftOperator addition
        {
        match(input,ShiftOperator,FOLLOW_ShiftOperator_in_synpred87_Php2044); if (state.failed) return ;

        pushFollow(FOLLOW_addition_in_synpred87_Php2047);
        addition();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred87_Php

    // $ANTLR start synpred90_Php
    public final void synpred90_Php_fragment() throws RecognitionException {
        // Php.g:351:23: ( ( PLUS | MINUS | DOT ) multiplication )
        // Php.g:351:23: ( PLUS | MINUS | DOT ) multiplication
        {
        if ( input.LA(1)==DOT||input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_multiplication_in_synpred90_Php2086);
        multiplication();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred90_Php

    // $ANTLR start synpred93_Php
    public final void synpred93_Php_fragment() throws RecognitionException {
        // Php.g:355:19: ( ( ASTERISK | FORWARD_SLASH | PERCENT ) logicalNot )
        // Php.g:355:19: ( ASTERISK | FORWARD_SLASH | PERCENT ) logicalNot
        {
        if ( input.LA(1)==ASTERISK||input.LA(1)==FORWARD_SLASH||input.LA(1)==PERCENT ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_logicalNot_in_synpred93_Php2121);
        logicalNot();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred93_Php

    // $ANTLR start synpred94_Php
    public final void synpred94_Php_fragment() throws RecognitionException {
        // Php.g:359:25: ( EQUALS logicalNot )
        // Php.g:359:25: EQUALS logicalNot
        {
        match(input,EQUALS,FOLLOW_EQUALS_in_synpred94_Php2146); if (state.failed) return ;

        pushFollow(FOLLOW_logicalNot_in_synpred94_Php2149);
        logicalNot();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred94_Php

    // $ANTLR start synpred96_Php
    public final void synpred96_Php_fragment() throws RecognitionException {
        // Php.g:364:21: ( INSTANCE_OF negateOrCast )
        // Php.g:364:21: INSTANCE_OF negateOrCast
        {
        match(input,INSTANCE_OF,FOLLOW_INSTANCE_OF_in_synpred96_Php2179); if (state.failed) return ;

        pushFollow(FOLLOW_negateOrCast_in_synpred96_Php2182);
        negateOrCast();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred96_Php

    // $ANTLR start synpred100_Php
    public final void synpred100_Php_fragment() throws RecognitionException {
        // Php.g:369:7: ( OPEN_BRACE UnquotedString CLOSE_BRACE expression )
        // Php.g:369:7: OPEN_BRACE UnquotedString CLOSE_BRACE expression
        {
        match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred100_Php2222); if (state.failed) return ;

        match(input,UnquotedString,FOLLOW_UnquotedString_in_synpred100_Php2224); if (state.failed) return ;

        match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_synpred100_Php2226); if (state.failed) return ;

        pushFollow(FOLLOW_expression_in_synpred100_Php2228);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred100_Php

    // $ANTLR start synpred101_Php
    public final void synpred101_Php_fragment() throws RecognitionException {
        // Php.g:370:7: ( OPEN_BRACE weakLogicalAnd CLOSE_BRACE )
        // Php.g:370:7: OPEN_BRACE weakLogicalAnd CLOSE_BRACE
        {
        match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred101_Php2255); if (state.failed) return ;

        pushFollow(FOLLOW_weakLogicalAnd_in_synpred101_Php2258);
        weakLogicalAnd();

        state._fsp--;
        if (state.failed) return ;

        match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_synpred101_Php2260); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred101_Php

    // $ANTLR start synpred103_Php
    public final void synpred103_Php_fragment() throws RecognitionException {
        // Php.g:376:7: ( name IncrementOperator )
        // Php.g:376:7: name IncrementOperator
        {
        pushFollow(FOLLOW_name_in_synpred103_Php2306);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,IncrementOperator,FOLLOW_IncrementOperator_in_synpred103_Php2308); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred103_Php

    // $ANTLR start synpred110_Php
    public final void synpred110_Php_fragment() throws RecognitionException {
        // Php.g:397:8: ( keyValuePair )
        // Php.g:397:8: keyValuePair
        {
        pushFollow(FOLLOW_keyValuePair_in_synpred110_Php2458);
        keyValuePair();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred110_Php

    // $ANTLR start synpred113_Php
    public final void synpred113_Php_fragment() throws RecognitionException {
        // Php.g:406:82: ( EQUALS listEntry )
        // Php.g:406:82: EQUALS listEntry
        {
        match(input,EQUALS,FOLLOW_EQUALS_in_synpred113_Php2532); if (state.failed) return ;

        pushFollow(FOLLOW_listEntry_in_synpred113_Php2534);
        listEntry();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred113_Php

    // $ANTLR start synpred114_Php
    public final void synpred114_Php_fragment() throws RecognitionException {
        // Php.g:410:7: ( expression )
        // Php.g:410:7: expression
        {
        pushFollow(FOLLOW_expression_in_synpred114_Php2575);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred114_Php

    // $ANTLR start synpred127_Php
    public final void synpred127_Php_fragment() throws RecognitionException {
        // Php.g:423:7: ( name OPEN_BRACE ( expression ( COMMA expression )* )? CLOSE_BRACE )
        // Php.g:423:7: name OPEN_BRACE ( expression ( COMMA expression )* )? CLOSE_BRACE
        {
        pushFollow(FOLLOW_name_in_synpred127_Php2692);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,OPEN_BRACE,FOLLOW_OPEN_BRACE_in_synpred127_Php2694); if (state.failed) return ;

        // Php.g:423:23: ( expression ( COMMA expression )* )?
        int alt99=2;
        int LA99_0 = input.LA(1);

        if ( (LA99_0==AMPERSAND||LA99_0==ArrayWord||LA99_0==BANG||LA99_0==Boolean||LA99_0==CLONE||LA99_0==DIE||LA99_0==DOLLAR||(LA99_0 >= DoubleQuotedString && LA99_0 <= ECHO)||LA99_0==HereDoc||(LA99_0 >= IncrementOperator && LA99_0 <= Integer)||LA99_0==MINUS||LA99_0==NEW||LA99_0==OPEN_BRACE||(LA99_0 >= PRINT && LA99_0 <= PRINTF)||LA99_0==Real||LA99_0==SUPPRESS_WARNINGS||LA99_0==SingleQuotedString||LA99_0==TILDE||LA99_0==UnquotedString||(LA99_0 >= 119 && LA99_0 <= 120)) ) {
            alt99=1;
        }
        switch (alt99) {
            case 1 :
                // Php.g:423:24: expression ( COMMA expression )*
                {
                pushFollow(FOLLOW_expression_in_synpred127_Php2697);
                expression();

                state._fsp--;
                if (state.failed) return ;

                // Php.g:423:35: ( COMMA expression )*
                loop98:
                do {
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==COMMA) ) {
                        alt98=1;
                    }


                    switch (alt98) {
                	case 1 :
                	    // Php.g:423:36: COMMA expression
                	    {
                	    match(input,COMMA,FOLLOW_COMMA_in_synpred127_Php2700); if (state.failed) return ;

                	    pushFollow(FOLLOW_expression_in_synpred127_Php2702);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop98;
                    }
                } while (true);


                }
                break;

        }


        match(input,CLOSE_BRACE,FOLLOW_CLOSE_BRACE_in_synpred127_Php2708); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred127_Php

    // $ANTLR start synpred129_Php
    public final void synpred129_Php_fragment() throws RecognitionException {
        // Php.g:429:7: ( memberAccess )
        // Php.g:429:7: memberAccess
        {
        pushFollow(FOLLOW_memberAccess_in_synpred129_Php2752);
        memberAccess();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred129_Php

    // $ANTLR start synpred130_Php
    public final void synpred130_Php_fragment() throws RecognitionException {
        // Php.g:438:20: ( INSTANCE_MEMBER UnquotedString )
        // Php.g:438:20: INSTANCE_MEMBER UnquotedString
        {
        match(input,INSTANCE_MEMBER,FOLLOW_INSTANCE_MEMBER_in_synpred130_Php2806); if (state.failed) return ;

        match(input,UnquotedString,FOLLOW_UnquotedString_in_synpred130_Php2808); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred130_Php

    // $ANTLR start synpred131_Php
    public final void synpred131_Php_fragment() throws RecognitionException {
        // Php.g:438:7: ( arrayAccess ( INSTANCE_MEMBER UnquotedString )? )
        // Php.g:438:7: arrayAccess ( INSTANCE_MEMBER UnquotedString )?
        {
        pushFollow(FOLLOW_arrayAccess_in_synpred131_Php2803);
        arrayAccess();

        state._fsp--;
        if (state.failed) return ;

        // Php.g:438:19: ( INSTANCE_MEMBER UnquotedString )?
        int alt100=2;
        int LA100_0 = input.LA(1);

        if ( (LA100_0==INSTANCE_MEMBER) ) {
            alt100=1;
        }
        switch (alt100) {
            case 1 :
                // Php.g:438:20: INSTANCE_MEMBER UnquotedString
                {
                match(input,INSTANCE_MEMBER,FOLLOW_INSTANCE_MEMBER_in_synpred131_Php2806); if (state.failed) return ;

                match(input,UnquotedString,FOLLOW_UnquotedString_in_synpred131_Php2808); if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred131_Php

    // $ANTLR start synpred132_Php
    public final void synpred132_Php_fragment() throws RecognitionException {
        // Php.g:443:20: ( EQUALS assignment )
        // Php.g:443:20: EQUALS assignment
        {
        match(input,EQUALS,FOLLOW_EQUALS_in_synpred132_Php2849); if (state.failed) return ;

        pushFollow(FOLLOW_assignment_in_synpred132_Php2852);
        assignment();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred132_Php

    // $ANTLR start synpred133_Php
    public final void synpred133_Php_fragment() throws RecognitionException {
        // Php.g:443:7: ( arrayAccess ( EQUALS assignment )? )
        // Php.g:443:7: arrayAccess ( EQUALS assignment )?
        {
        pushFollow(FOLLOW_arrayAccess_in_synpred133_Php2846);
        arrayAccess();

        state._fsp--;
        if (state.failed) return ;

        // Php.g:443:19: ( EQUALS assignment )?
        int alt101=2;
        int LA101_0 = input.LA(1);

        if ( (LA101_0==EQUALS) ) {
            alt101=1;
        }
        switch (alt101) {
            case 1 :
                // Php.g:443:20: EQUALS assignment
                {
                match(input,EQUALS,FOLLOW_EQUALS_in_synpred133_Php2849); if (state.failed) return ;

                pushFollow(FOLLOW_assignment_in_synpred133_Php2852);
                assignment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }

    }
    // $ANTLR end synpred133_Php

    // $ANTLR start synpred136_Php
    public final void synpred136_Php_fragment() throws RecognitionException {
        // Php.g:444:7: ( name ( EQUALS | AssignmentOperator | ConcatAssigmentOperator ) assignment )
        // Php.g:444:7: name ( EQUALS | AssignmentOperator | ConcatAssigmentOperator ) assignment
        {
        pushFollow(FOLLOW_name_in_synpred136_Php2862);
        name();

        state._fsp--;
        if (state.failed) return ;

        if ( input.LA(1)==AssignmentOperator||input.LA(1)==ConcatAssigmentOperator||input.LA(1)==EQUALS ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_assignment_in_synpred136_Php2877);
        assignment();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred136_Php

    // $ANTLR start synpred137_Php
    public final void synpred137_Php_fragment() throws RecognitionException {
        // Php.g:445:7: ( objectNameOrMethod INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall )
        // Php.g:445:7: objectNameOrMethod INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall
        {
        pushFollow(FOLLOW_objectNameOrMethod_in_synpred137_Php2887);
        objectNameOrMethod();

        state._fsp--;
        if (state.failed) return ;

        match(input,INSTANCE_MEMBER,FOLLOW_INSTANCE_MEMBER_in_synpred137_Php2889); if (state.failed) return ;

        pushFollow(FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_synpred137_Php2891);
        arrayOrUnquotedStringOrFunctionCall();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred137_Php

    // $ANTLR start synpred140_Php
    public final void synpred140_Php_fragment() throws RecognitionException {
        // Php.g:450:66: ( ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )* )
        // Php.g:450:66: ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )*
        {
        // Php.g:450:66: ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )*
        loop102:
        do {
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==OPEN_SQUARE_BRACE) ) {
                alt102=1;
            }


            switch (alt102) {
        	case 1 :
        	    // Php.g:450:67: OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE
        	    {
        	    match(input,OPEN_SQUARE_BRACE,FOLLOW_OPEN_SQUARE_BRACE_in_synpred140_Php2937); if (state.failed) return ;

        	    pushFollow(FOLLOW_expression_in_synpred140_Php2939);
        	    expression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    match(input,CLOSE_SQUARE_BRACE,FOLLOW_CLOSE_SQUARE_BRACE_in_synpred140_Php2941); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop102;
            }
        } while (true);


        }

    }
    // $ANTLR end synpred140_Php

    // Delegated rules

    public final boolean synpred33_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred131_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred131_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred77_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred77_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred129_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred129_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred132_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred132_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred76_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred76_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred140_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred140_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Php() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Php_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA24 dfa24 = new DFA24(this);
    protected DFA23 dfa23 = new DFA23(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA43 dfa43 = new DFA43(this);
    protected DFA44 dfa44 = new DFA44(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA47 dfa47 = new DFA47(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA54 dfa54 = new DFA54(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA66 dfa66 = new DFA66(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA74 dfa74 = new DFA74(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA80 dfa80 = new DFA80(this);
    static final String DFA6_eotS =
        "\u02f5\uffff";
    static final String DFA6_eofS =
        "\u02f5\uffff";
    static final String DFA6_minS =
        "\1\4\1\0\1\46\1\0\3\5\2\123\1\0\1\46\3\5\3\46\6\0\2\123\1\0\1\46"+
        "\1\uffff\1\4\63\uffff\2\0\52\uffff\104\0\75\uffff\107\0\u0150\uffff"+
        "\2\0\70\uffff\45\0\2\uffff";
    static final String DFA6_maxS =
        "\1\170\1\0\1\156\1\0\3\170\2\123\1\0\1\156\3\170\3\156\6\0\2\123"+
        "\1\0\1\156\1\uffff\1\170\63\uffff\2\0\52\uffff\104\0\75\uffff\107"+
        "\0\u0150\uffff\2\0\70\uffff\45\0\2\uffff";
    static final String DFA6_acceptS =
        "\33\uffff\1\2\1\uffff\1\5\1\uffff\1\6\56\uffff\1\1\1\7\u02a3\uffff"+
        "\1\4\1\3";
    static final String DFA6_specialS =
        "\1\uffff\1\0\1\uffff\1\1\5\uffff\1\2\7\uffff\1\3\1\4\1\5\1\6\1\7"+
        "\1\10\2\uffff\1\11\66\uffff\1\12\1\13\52\uffff\1\14\1\15\1\16\1"+
        "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
        "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1"+
        "\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114"+
        "\1\115\1\116\1\117\75\uffff\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
        "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
        "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
        "\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1"+
        "\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1"+
        "\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1"+
        "\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\u0150\uffff\1\u0097"+
        "\1\u0098\70\uffff\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e"+
        "\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6"+
        "\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae"+
        "\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6"+
        "\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd\2\uffff}>";
    static final String[] DFA6_transitionS = {
            "\1\35\1\32\5\uffff\1\27\1\uffff\1\13\2\uffff\1\33\1\26\2\uffff"+
            "\1\35\1\uffff\1\20\14\uffff\1\10\1\uffff\1\37\1\12\3\uffff\1"+
            "\22\1\5\12\uffff\1\37\3\uffff\1\2\1\uffff\1\23\2\uffff\1\37"+
            "\10\uffff\1\16\1\24\4\uffff\1\14\2\uffff\1\17\1\uffff\1\15\1"+
            "\34\5\uffff\1\6\1\7\1\uffff\1\1\3\uffff\1\3\1\25\1\4\1\uffff"+
            "\1\14\1\37\1\uffff\1\21\1\uffff\1\14\1\37\2\uffff\1\11\10\uffff"+
            "\1\30\1\31",
            "\1\uffff",
            "\1\121\107\uffff\1\120",
            "\1\uffff",
            "\1\u008d\5\uffff\1\u008a\1\uffff\1\176\3\uffff\1\u0089\4\uffff"+
            "\1\u0083\14\uffff\1\u0091\2\uffff\1\175\3\uffff\1\u0085\1\u008e"+
            "\20\uffff\1\u0086\13\uffff\1\u0081\1\u0087\4\uffff\1\177\2\uffff"+
            "\1\u0082\1\uffff\1\u0080\6\uffff\1\u008f\1\u0090\6\uffff\1\u0088"+
            "\2\uffff\1\177\2\uffff\1\u0084\1\uffff\1\177\3\uffff\1\174\10"+
            "\uffff\1\u008b\1\u008c",
            "\1\u00a3\5\uffff\1\u00a0\1\uffff\1\u0094\3\uffff\1\u009f\4"+
            "\uffff\1\u0099\14\uffff\1\u00a7\2\uffff\1\u0093\3\uffff\1\u009b"+
            "\1\u00a4\20\uffff\1\u009c\13\uffff\1\u0097\1\u009d\4\uffff\1"+
            "\u0095\2\uffff\1\u0098\1\uffff\1\u0096\6\uffff\1\u00a5\1\u00a6"+
            "\6\uffff\1\u009e\2\uffff\1\u0095\2\uffff\1\u009a\1\uffff\1\u0095"+
            "\3\uffff\1\u0092\10\uffff\1\u00a1\1\u00a2",
            "\1\u00b9\5\uffff\1\u00b6\1\uffff\1\u00aa\3\uffff\1\u00b5\4"+
            "\uffff\1\u00af\14\uffff\1\u00bd\2\uffff\1\u00a9\3\uffff\1\u00b1"+
            "\1\u00ba\20\uffff\1\u00b2\13\uffff\1\u00ad\1\u00b3\4\uffff\1"+
            "\u00ab\2\uffff\1\u00ae\1\uffff\1\u00ac\6\uffff\1\u00bb\1\u00bc"+
            "\6\uffff\1\u00b4\2\uffff\1\u00ab\2\uffff\1\u00b0\1\uffff\1\u00ab"+
            "\3\uffff\1\u00a8\10\uffff\1\u00b7\1\u00b8",
            "\1\u00be",
            "\1\u00bf",
            "\1\uffff",
            "\1\u00fd\107\uffff\1\u00fe",
            "\1\u0110\5\uffff\1\u010d\1\uffff\1\u00ff\3\uffff\1\u010c\4"+
            "\uffff\1\u0106\14\uffff\1\u0114\2\uffff\1\u0104\3\uffff\1\u0108"+
            "\1\u0111\20\uffff\1\u0109\13\uffff\1\u0102\1\u010a\4\uffff\1"+
            "\u0100\2\uffff\1\u0105\1\uffff\1\u0101\6\uffff\1\u0112\1\u0113"+
            "\6\uffff\1\u010b\2\uffff\1\u0100\2\uffff\1\u0107\1\uffff\1\u0100"+
            "\3\uffff\1\u0103\10\uffff\1\u010e\1\u010f",
            "\1\u0123\5\uffff\1\u0120\5\uffff\1\u011f\4\uffff\1\u0119\14"+
            "\uffff\1\u0127\2\uffff\1\u0117\3\uffff\1\u011b\1\u0124\20\uffff"+
            "\1\u011c\13\uffff\1\u0115\1\u011d\7\uffff\1\u0118\10\uffff\1"+
            "\u0125\1\u0126\6\uffff\1\u011e\5\uffff\1\u011a\5\uffff\1\u0116"+
            "\10\uffff\1\u0121\1\u0122",
            "\1\u0139\5\uffff\1\u0136\1\uffff\1\u012a\3\uffff\1\u0135\4"+
            "\uffff\1\u012f\14\uffff\1\u013d\2\uffff\1\u0129\3\uffff\1\u0131"+
            "\1\u013a\20\uffff\1\u0132\13\uffff\1\u012d\1\u0133\4\uffff\1"+
            "\u012b\2\uffff\1\u012e\1\uffff\1\u012c\6\uffff\1\u013b\1\u013c"+
            "\6\uffff\1\u0134\2\uffff\1\u012b\2\uffff\1\u0130\1\uffff\1\u012b"+
            "\3\uffff\1\u0128\10\uffff\1\u0137\1\u0138",
            "\1\u013f\107\uffff\1\u013e",
            "\1\u0141\107\uffff\1\u0140",
            "\1\u0143\107\uffff\1\u0142",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0294",
            "\1\u0295",
            "\1\uffff",
            "\1\u02cf\107\uffff\1\u02ce",
            "",
            "\1\u02ec\1\u02e9\5\uffff\1\u02e6\1\uffff\1\u02da\2\uffff\1"+
            "\u02ea\1\u02e5\2\uffff\1\u02ed\1\uffff\1\u02df\1\uffff\1\u02f3"+
            "\12\uffff\1\u02d7\1\uffff\1\u02ef\1\u02d9\3\uffff\1\u02e1\1"+
            "\u02d4\12\uffff\1\u02f1\3\uffff\1\u02d1\1\uffff\1\u02e2\2\uffff"+
            "\1\u02ee\10\uffff\1\u02dd\1\u02e3\4\uffff\1\u02db\2\uffff\1"+
            "\u02de\1\uffff\1\u02dc\1\u02eb\5\uffff\1\u02d5\1\u02d6\1\uffff"+
            "\1\u02d0\3\uffff\1\u02d2\1\u02e4\1\u02d3\1\uffff\1\u02db\1\u02f0"+
            "\1\uffff\1\u02e0\1\uffff\1\u02db\1\u02f2\2\uffff\1\u02d8\10"+
            "\uffff\1\u02e7\1\u02e8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "141:1: statement : ( ignoreStatement | ( simpleStatement )? BodyString | '{' statement '}' ( ';' )? -> statement | bracketedBlock ( ';' !)? | classDefinition | complexStatement | simpleStatement ( ';' !)* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_1 = input.LA(1);

                         
                        int index6_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred2_Php()) ) {s = 78;}

                        else if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (synpred10_Php()) ) {s = 31;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_1);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA6_3 = input.LA(1);

                         
                        int index6_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_3);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA6_9 = input.LA(1);

                         
                        int index6_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_9);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA6_17 = input.LA(1);

                         
                        int index6_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_17);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA6_18 = input.LA(1);

                         
                        int index6_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_18);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA6_19 = input.LA(1);

                         
                        int index6_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_19);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA6_20 = input.LA(1);

                         
                        int index6_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_20);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA6_21 = input.LA(1);

                         
                        int index6_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_21);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA6_22 = input.LA(1);

                         
                        int index6_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_22);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA6_25 = input.LA(1);

                         
                        int index6_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_25);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA6_80 = input.LA(1);

                         
                        int index6_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_80);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA6_81 = input.LA(1);

                         
                        int index6_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_81);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA6_124 = input.LA(1);

                         
                        int index6_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_124);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA6_125 = input.LA(1);

                         
                        int index6_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_125);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA6_126 = input.LA(1);

                         
                        int index6_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_126);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA6_127 = input.LA(1);

                         
                        int index6_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_127);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA6_128 = input.LA(1);

                         
                        int index6_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_128);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA6_129 = input.LA(1);

                         
                        int index6_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_129);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA6_130 = input.LA(1);

                         
                        int index6_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_130);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA6_131 = input.LA(1);

                         
                        int index6_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_131);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA6_132 = input.LA(1);

                         
                        int index6_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_132);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA6_133 = input.LA(1);

                         
                        int index6_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_133);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA6_134 = input.LA(1);

                         
                        int index6_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_134);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA6_135 = input.LA(1);

                         
                        int index6_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_135);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA6_136 = input.LA(1);

                         
                        int index6_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_136);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA6_137 = input.LA(1);

                         
                        int index6_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_137);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA6_138 = input.LA(1);

                         
                        int index6_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_138);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA6_139 = input.LA(1);

                         
                        int index6_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_139);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA6_140 = input.LA(1);

                         
                        int index6_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_140);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA6_141 = input.LA(1);

                         
                        int index6_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_141);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA6_142 = input.LA(1);

                         
                        int index6_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_142);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA6_143 = input.LA(1);

                         
                        int index6_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_143);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA6_144 = input.LA(1);

                         
                        int index6_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_144);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA6_145 = input.LA(1);

                         
                        int index6_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_145);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA6_146 = input.LA(1);

                         
                        int index6_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_146);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA6_147 = input.LA(1);

                         
                        int index6_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_147);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA6_148 = input.LA(1);

                         
                        int index6_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_148);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA6_149 = input.LA(1);

                         
                        int index6_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_149);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA6_150 = input.LA(1);

                         
                        int index6_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_150);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA6_151 = input.LA(1);

                         
                        int index6_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_151);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA6_152 = input.LA(1);

                         
                        int index6_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_152);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA6_153 = input.LA(1);

                         
                        int index6_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_153);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA6_154 = input.LA(1);

                         
                        int index6_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_154);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA6_155 = input.LA(1);

                         
                        int index6_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_155);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA6_156 = input.LA(1);

                         
                        int index6_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_156);

                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA6_157 = input.LA(1);

                         
                        int index6_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_157);

                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA6_158 = input.LA(1);

                         
                        int index6_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_158);

                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA6_159 = input.LA(1);

                         
                        int index6_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_159);

                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA6_160 = input.LA(1);

                         
                        int index6_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_160);

                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA6_161 = input.LA(1);

                         
                        int index6_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_161);

                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA6_162 = input.LA(1);

                         
                        int index6_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_162);

                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA6_163 = input.LA(1);

                         
                        int index6_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_163);

                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA6_164 = input.LA(1);

                         
                        int index6_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_164);

                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA6_165 = input.LA(1);

                         
                        int index6_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_165);

                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA6_166 = input.LA(1);

                         
                        int index6_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_166);

                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA6_167 = input.LA(1);

                         
                        int index6_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_167);

                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA6_168 = input.LA(1);

                         
                        int index6_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_168);

                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA6_169 = input.LA(1);

                         
                        int index6_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_169);

                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA6_170 = input.LA(1);

                         
                        int index6_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_170);

                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA6_171 = input.LA(1);

                         
                        int index6_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_171);

                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA6_172 = input.LA(1);

                         
                        int index6_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_172);

                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA6_173 = input.LA(1);

                         
                        int index6_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_173);

                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA6_174 = input.LA(1);

                         
                        int index6_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_174);

                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA6_175 = input.LA(1);

                         
                        int index6_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_175);

                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA6_176 = input.LA(1);

                         
                        int index6_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_176);

                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA6_177 = input.LA(1);

                         
                        int index6_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_177);

                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA6_178 = input.LA(1);

                         
                        int index6_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_178);

                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA6_179 = input.LA(1);

                         
                        int index6_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_179);

                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA6_180 = input.LA(1);

                         
                        int index6_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_180);

                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA6_181 = input.LA(1);

                         
                        int index6_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_181);

                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA6_182 = input.LA(1);

                         
                        int index6_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_182);

                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA6_183 = input.LA(1);

                         
                        int index6_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_183);

                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA6_184 = input.LA(1);

                         
                        int index6_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_184);

                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA6_185 = input.LA(1);

                         
                        int index6_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_185);

                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA6_186 = input.LA(1);

                         
                        int index6_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_186);

                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA6_187 = input.LA(1);

                         
                        int index6_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_187);

                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA6_188 = input.LA(1);

                         
                        int index6_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_188);

                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA6_189 = input.LA(1);

                         
                        int index6_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_189);

                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA6_190 = input.LA(1);

                         
                        int index6_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_190);

                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA6_191 = input.LA(1);

                         
                        int index6_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_191);

                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA6_253 = input.LA(1);

                         
                        int index6_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_253);

                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA6_254 = input.LA(1);

                         
                        int index6_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_254);

                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA6_255 = input.LA(1);

                         
                        int index6_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_255);

                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA6_256 = input.LA(1);

                         
                        int index6_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_256);

                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA6_257 = input.LA(1);

                         
                        int index6_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_257);

                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA6_258 = input.LA(1);

                         
                        int index6_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_258);

                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA6_259 = input.LA(1);

                         
                        int index6_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_259);

                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA6_260 = input.LA(1);

                         
                        int index6_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_260);

                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA6_261 = input.LA(1);

                         
                        int index6_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_261);

                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA6_262 = input.LA(1);

                         
                        int index6_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_262);

                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA6_263 = input.LA(1);

                         
                        int index6_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_263);

                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA6_264 = input.LA(1);

                         
                        int index6_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_264);

                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA6_265 = input.LA(1);

                         
                        int index6_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_265);

                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA6_266 = input.LA(1);

                         
                        int index6_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_266);

                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA6_267 = input.LA(1);

                         
                        int index6_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_267);

                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA6_268 = input.LA(1);

                         
                        int index6_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_268);

                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA6_269 = input.LA(1);

                         
                        int index6_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_269);

                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA6_270 = input.LA(1);

                         
                        int index6_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_270);

                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA6_271 = input.LA(1);

                         
                        int index6_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_271);

                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA6_272 = input.LA(1);

                         
                        int index6_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_272);

                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA6_273 = input.LA(1);

                         
                        int index6_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_273);

                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA6_274 = input.LA(1);

                         
                        int index6_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_274);

                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA6_275 = input.LA(1);

                         
                        int index6_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_275);

                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA6_276 = input.LA(1);

                         
                        int index6_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_276);

                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA6_277 = input.LA(1);

                         
                        int index6_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_277);

                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA6_278 = input.LA(1);

                         
                        int index6_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_278);

                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA6_279 = input.LA(1);

                         
                        int index6_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_279);

                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA6_280 = input.LA(1);

                         
                        int index6_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_280);

                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA6_281 = input.LA(1);

                         
                        int index6_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_281);

                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA6_282 = input.LA(1);

                         
                        int index6_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_282);

                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA6_283 = input.LA(1);

                         
                        int index6_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_283);

                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA6_284 = input.LA(1);

                         
                        int index6_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_284);

                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA6_285 = input.LA(1);

                         
                        int index6_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_285);

                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA6_286 = input.LA(1);

                         
                        int index6_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_286);

                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA6_287 = input.LA(1);

                         
                        int index6_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_287);

                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA6_288 = input.LA(1);

                         
                        int index6_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_288);

                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA6_289 = input.LA(1);

                         
                        int index6_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_289);

                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA6_290 = input.LA(1);

                         
                        int index6_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_290);

                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA6_291 = input.LA(1);

                         
                        int index6_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_291);

                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA6_292 = input.LA(1);

                         
                        int index6_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_292);

                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA6_293 = input.LA(1);

                         
                        int index6_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_293);

                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA6_294 = input.LA(1);

                         
                        int index6_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_294);

                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA6_295 = input.LA(1);

                         
                        int index6_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_295);

                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA6_296 = input.LA(1);

                         
                        int index6_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_296);

                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA6_297 = input.LA(1);

                         
                        int index6_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_297);

                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA6_298 = input.LA(1);

                         
                        int index6_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_298);

                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA6_299 = input.LA(1);

                         
                        int index6_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_299);

                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA6_300 = input.LA(1);

                         
                        int index6_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_300);

                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA6_301 = input.LA(1);

                         
                        int index6_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_301);

                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA6_302 = input.LA(1);

                         
                        int index6_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_302);

                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA6_303 = input.LA(1);

                         
                        int index6_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_303);

                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA6_304 = input.LA(1);

                         
                        int index6_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_304);

                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA6_305 = input.LA(1);

                         
                        int index6_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_305);

                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA6_306 = input.LA(1);

                         
                        int index6_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_306);

                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA6_307 = input.LA(1);

                         
                        int index6_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_307);

                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA6_308 = input.LA(1);

                         
                        int index6_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_308);

                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA6_309 = input.LA(1);

                         
                        int index6_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_309);

                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA6_310 = input.LA(1);

                         
                        int index6_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_310);

                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA6_311 = input.LA(1);

                         
                        int index6_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_311);

                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA6_312 = input.LA(1);

                         
                        int index6_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_312);

                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA6_313 = input.LA(1);

                         
                        int index6_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_313);

                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA6_314 = input.LA(1);

                         
                        int index6_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_314);

                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA6_315 = input.LA(1);

                         
                        int index6_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_315);

                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA6_316 = input.LA(1);

                         
                        int index6_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_316);

                        if ( s>=0 ) return s;
                        break;

                    case 144 : 
                        int LA6_317 = input.LA(1);

                         
                        int index6_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_317);

                        if ( s>=0 ) return s;
                        break;

                    case 145 : 
                        int LA6_318 = input.LA(1);

                         
                        int index6_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_318);

                        if ( s>=0 ) return s;
                        break;

                    case 146 : 
                        int LA6_319 = input.LA(1);

                         
                        int index6_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_319);

                        if ( s>=0 ) return s;
                        break;

                    case 147 : 
                        int LA6_320 = input.LA(1);

                         
                        int index6_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_320);

                        if ( s>=0 ) return s;
                        break;

                    case 148 : 
                        int LA6_321 = input.LA(1);

                         
                        int index6_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_321);

                        if ( s>=0 ) return s;
                        break;

                    case 149 : 
                        int LA6_322 = input.LA(1);

                         
                        int index6_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_322);

                        if ( s>=0 ) return s;
                        break;

                    case 150 : 
                        int LA6_323 = input.LA(1);

                         
                        int index6_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_323);

                        if ( s>=0 ) return s;
                        break;

                    case 151 : 
                        int LA6_660 = input.LA(1);

                         
                        int index6_660 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_660);

                        if ( s>=0 ) return s;
                        break;

                    case 152 : 
                        int LA6_661 = input.LA(1);

                         
                        int index6_661 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_661);

                        if ( s>=0 ) return s;
                        break;

                    case 153 : 
                        int LA6_718 = input.LA(1);

                         
                        int index6_718 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_718);

                        if ( s>=0 ) return s;
                        break;

                    case 154 : 
                        int LA6_719 = input.LA(1);

                         
                        int index6_719 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Php()) ) {s = 27;}

                        else if ( (true) ) {s = 79;}

                         
                        input.seek(index6_719);

                        if ( s>=0 ) return s;
                        break;

                    case 155 : 
                        int LA6_720 = input.LA(1);

                         
                        int index6_720 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_720);

                        if ( s>=0 ) return s;
                        break;

                    case 156 : 
                        int LA6_721 = input.LA(1);

                         
                        int index6_721 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_721);

                        if ( s>=0 ) return s;
                        break;

                    case 157 : 
                        int LA6_722 = input.LA(1);

                         
                        int index6_722 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_722);

                        if ( s>=0 ) return s;
                        break;

                    case 158 : 
                        int LA6_723 = input.LA(1);

                         
                        int index6_723 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_723);

                        if ( s>=0 ) return s;
                        break;

                    case 159 : 
                        int LA6_724 = input.LA(1);

                         
                        int index6_724 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_724);

                        if ( s>=0 ) return s;
                        break;

                    case 160 : 
                        int LA6_725 = input.LA(1);

                         
                        int index6_725 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_725);

                        if ( s>=0 ) return s;
                        break;

                    case 161 : 
                        int LA6_726 = input.LA(1);

                         
                        int index6_726 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_726);

                        if ( s>=0 ) return s;
                        break;

                    case 162 : 
                        int LA6_727 = input.LA(1);

                         
                        int index6_727 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_727);

                        if ( s>=0 ) return s;
                        break;

                    case 163 : 
                        int LA6_728 = input.LA(1);

                         
                        int index6_728 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_728);

                        if ( s>=0 ) return s;
                        break;

                    case 164 : 
                        int LA6_729 = input.LA(1);

                         
                        int index6_729 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_729);

                        if ( s>=0 ) return s;
                        break;

                    case 165 : 
                        int LA6_730 = input.LA(1);

                         
                        int index6_730 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_730);

                        if ( s>=0 ) return s;
                        break;

                    case 166 : 
                        int LA6_731 = input.LA(1);

                         
                        int index6_731 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_731);

                        if ( s>=0 ) return s;
                        break;

                    case 167 : 
                        int LA6_732 = input.LA(1);

                         
                        int index6_732 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_732);

                        if ( s>=0 ) return s;
                        break;

                    case 168 : 
                        int LA6_733 = input.LA(1);

                         
                        int index6_733 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_733);

                        if ( s>=0 ) return s;
                        break;

                    case 169 : 
                        int LA6_734 = input.LA(1);

                         
                        int index6_734 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_734);

                        if ( s>=0 ) return s;
                        break;

                    case 170 : 
                        int LA6_735 = input.LA(1);

                         
                        int index6_735 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_735);

                        if ( s>=0 ) return s;
                        break;

                    case 171 : 
                        int LA6_736 = input.LA(1);

                         
                        int index6_736 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_736);

                        if ( s>=0 ) return s;
                        break;

                    case 172 : 
                        int LA6_737 = input.LA(1);

                         
                        int index6_737 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_737);

                        if ( s>=0 ) return s;
                        break;

                    case 173 : 
                        int LA6_738 = input.LA(1);

                         
                        int index6_738 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_738);

                        if ( s>=0 ) return s;
                        break;

                    case 174 : 
                        int LA6_739 = input.LA(1);

                         
                        int index6_739 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_739);

                        if ( s>=0 ) return s;
                        break;

                    case 175 : 
                        int LA6_740 = input.LA(1);

                         
                        int index6_740 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_740);

                        if ( s>=0 ) return s;
                        break;

                    case 176 : 
                        int LA6_741 = input.LA(1);

                         
                        int index6_741 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_741);

                        if ( s>=0 ) return s;
                        break;

                    case 177 : 
                        int LA6_742 = input.LA(1);

                         
                        int index6_742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_742);

                        if ( s>=0 ) return s;
                        break;

                    case 178 : 
                        int LA6_743 = input.LA(1);

                         
                        int index6_743 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_743);

                        if ( s>=0 ) return s;
                        break;

                    case 179 : 
                        int LA6_744 = input.LA(1);

                         
                        int index6_744 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_744);

                        if ( s>=0 ) return s;
                        break;

                    case 180 : 
                        int LA6_745 = input.LA(1);

                         
                        int index6_745 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_745);

                        if ( s>=0 ) return s;
                        break;

                    case 181 : 
                        int LA6_746 = input.LA(1);

                         
                        int index6_746 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_746);

                        if ( s>=0 ) return s;
                        break;

                    case 182 : 
                        int LA6_747 = input.LA(1);

                         
                        int index6_747 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_747);

                        if ( s>=0 ) return s;
                        break;

                    case 183 : 
                        int LA6_748 = input.LA(1);

                         
                        int index6_748 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_748);

                        if ( s>=0 ) return s;
                        break;

                    case 184 : 
                        int LA6_749 = input.LA(1);

                         
                        int index6_749 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_749);

                        if ( s>=0 ) return s;
                        break;

                    case 185 : 
                        int LA6_750 = input.LA(1);

                         
                        int index6_750 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_750);

                        if ( s>=0 ) return s;
                        break;

                    case 186 : 
                        int LA6_751 = input.LA(1);

                         
                        int index6_751 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_751);

                        if ( s>=0 ) return s;
                        break;

                    case 187 : 
                        int LA6_752 = input.LA(1);

                         
                        int index6_752 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_752);

                        if ( s>=0 ) return s;
                        break;

                    case 188 : 
                        int LA6_753 = input.LA(1);

                         
                        int index6_753 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_753);

                        if ( s>=0 ) return s;
                        break;

                    case 189 : 
                        int LA6_754 = input.LA(1);

                         
                        int index6_754 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Php()) ) {s = 756;}

                        else if ( (synpred8_Php()) ) {s = 755;}

                         
                        input.seek(index6_754);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA24_eotS =
        "\112\uffff";
    static final String DFA24_eofS =
        "\112\uffff";
    static final String DFA24_minS =
        "\1\5\3\uffff\2\5\2\123\23\uffff\56\0\1\uffff";
    static final String DFA24_maxS =
        "\1\170\3\uffff\2\170\2\123\23\uffff\56\0\1\uffff";
    static final String DFA24_acceptS =
        "\1\uffff\1\1\1\2\1\3\4\uffff\1\5\1\6\77\uffff\1\4";
    static final String DFA24_specialS =
        "\1\0\32\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\uffff}>";
    static final String[] DFA24_transitionS = {
            "\1\11\5\uffff\1\11\1\uffff\1\11\3\uffff\1\11\4\uffff\1\11\14"+
            "\uffff\1\7\2\uffff\1\11\3\uffff\1\11\1\4\16\uffff\1\1\1\uffff"+
            "\1\11\13\uffff\2\11\4\uffff\1\11\2\uffff\1\11\1\uffff\1\11\6"+
            "\uffff\1\5\1\6\1\uffff\1\10\3\uffff\1\2\1\11\1\3\1\uffff\1\11"+
            "\2\uffff\1\11\1\uffff\1\11\3\uffff\1\11\10\uffff\2\11",
            "",
            "",
            "",
            "\1\54\5\uffff\1\51\1\uffff\1\35\3\uffff\1\50\4\uffff\1\42\14"+
            "\uffff\1\60\2\uffff\1\34\3\uffff\1\44\1\55\20\uffff\1\45\13"+
            "\uffff\1\40\1\46\4\uffff\1\36\2\uffff\1\41\1\uffff\1\37\6\uffff"+
            "\1\56\1\57\6\uffff\1\47\2\uffff\1\36\2\uffff\1\43\1\uffff\1"+
            "\36\3\uffff\1\33\10\uffff\1\52\1\53",
            "\1\102\5\uffff\1\77\1\uffff\1\63\3\uffff\1\76\4\uffff\1\70"+
            "\14\uffff\1\106\2\uffff\1\62\3\uffff\1\72\1\103\20\uffff\1\73"+
            "\13\uffff\1\66\1\74\4\uffff\1\64\2\uffff\1\67\1\uffff\1\65\6"+
            "\uffff\1\104\1\105\6\uffff\1\75\2\uffff\1\64\2\uffff\1\71\1"+
            "\uffff\1\64\3\uffff\1\61\10\uffff\1\100\1\101",
            "\1\107",
            "\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
    static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
    static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
    static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
    static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
    static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
    static final short[][] DFA24_transition;

    static {
        int numStates = DFA24_transitionS.length;
        DFA24_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
        }
    }

    class DFA24 extends DFA {

        public DFA24(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 24;
            this.eot = DFA24_eot;
            this.eof = DFA24_eof;
            this.min = DFA24_min;
            this.max = DFA24_max;
            this.accept = DFA24_accept;
            this.special = DFA24_special;
            this.transition = DFA24_transition;
        }
        public String getDescription() {
            return "219:1: simpleStatement : ( GLOBAL ^ name ( ',' ! name )* | RETURN ^ ( expression )? | simpleRequire | ( ECHO | PRINT | PRINTF | DIE )=> outputFunctions | ( BREAK | CONTINUE | THROW | USE )=> ignoreOthers | expression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA24_0 = input.LA(1);

                         
                        int index24_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA24_0==GLOBAL) ) {s = 1;}

                        else if ( (LA24_0==RETURN) ) {s = 2;}

                        else if ( (LA24_0==RequireOperator) ) {s = 3;}

                        else if ( (LA24_0==ECHO) ) {s = 4;}

                        else if ( (LA24_0==PRINT) ) {s = 5;}

                        else if ( (LA24_0==PRINTF) ) {s = 6;}

                        else if ( (LA24_0==DIE) ) {s = 7;}

                        else if ( (LA24_0==PhpStatement) && (synpred51_Php())) {s = 8;}

                        else if ( (LA24_0==AMPERSAND||LA24_0==ArrayWord||LA24_0==BANG||LA24_0==Boolean||LA24_0==CLONE||LA24_0==DOLLAR||LA24_0==DoubleQuotedString||LA24_0==HereDoc||(LA24_0 >= IncrementOperator && LA24_0 <= Integer)||LA24_0==MINUS||LA24_0==NEW||LA24_0==OPEN_BRACE||LA24_0==Real||LA24_0==SUPPRESS_WARNINGS||LA24_0==SingleQuotedString||LA24_0==TILDE||LA24_0==UnquotedString||(LA24_0 >= 119 && LA24_0 <= 120)) ) {s = 9;}

                         
                        input.seek(index24_0);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA24_27 = input.LA(1);

                         
                        int index24_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_27);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA24_28 = input.LA(1);

                         
                        int index24_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_28);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA24_29 = input.LA(1);

                         
                        int index24_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_29);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA24_30 = input.LA(1);

                         
                        int index24_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_30);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA24_31 = input.LA(1);

                         
                        int index24_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_31);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA24_32 = input.LA(1);

                         
                        int index24_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_32);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA24_33 = input.LA(1);

                         
                        int index24_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_33);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA24_34 = input.LA(1);

                         
                        int index24_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_34);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA24_35 = input.LA(1);

                         
                        int index24_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_35);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA24_36 = input.LA(1);

                         
                        int index24_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_36);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA24_37 = input.LA(1);

                         
                        int index24_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_37);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA24_38 = input.LA(1);

                         
                        int index24_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_38);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA24_39 = input.LA(1);

                         
                        int index24_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_39);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA24_40 = input.LA(1);

                         
                        int index24_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_40);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA24_41 = input.LA(1);

                         
                        int index24_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_41);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA24_42 = input.LA(1);

                         
                        int index24_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_42);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA24_43 = input.LA(1);

                         
                        int index24_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_43);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA24_44 = input.LA(1);

                         
                        int index24_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_44);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA24_45 = input.LA(1);

                         
                        int index24_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_45);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA24_46 = input.LA(1);

                         
                        int index24_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_46);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA24_47 = input.LA(1);

                         
                        int index24_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_47);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA24_48 = input.LA(1);

                         
                        int index24_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_48);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA24_49 = input.LA(1);

                         
                        int index24_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_49);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA24_50 = input.LA(1);

                         
                        int index24_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_50);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA24_51 = input.LA(1);

                         
                        int index24_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_51);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA24_52 = input.LA(1);

                         
                        int index24_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_52);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA24_53 = input.LA(1);

                         
                        int index24_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_53);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA24_54 = input.LA(1);

                         
                        int index24_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_54);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA24_55 = input.LA(1);

                         
                        int index24_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_55);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA24_56 = input.LA(1);

                         
                        int index24_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_56);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA24_57 = input.LA(1);

                         
                        int index24_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_57);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA24_58 = input.LA(1);

                         
                        int index24_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_58);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA24_59 = input.LA(1);

                         
                        int index24_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_59);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA24_60 = input.LA(1);

                         
                        int index24_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_60);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA24_61 = input.LA(1);

                         
                        int index24_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_61);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA24_62 = input.LA(1);

                         
                        int index24_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_62);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA24_63 = input.LA(1);

                         
                        int index24_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_63);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA24_64 = input.LA(1);

                         
                        int index24_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_64);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA24_65 = input.LA(1);

                         
                        int index24_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_65);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA24_66 = input.LA(1);

                         
                        int index24_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_66);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA24_67 = input.LA(1);

                         
                        int index24_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_67);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA24_68 = input.LA(1);

                         
                        int index24_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_68);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA24_69 = input.LA(1);

                         
                        int index24_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_69);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA24_70 = input.LA(1);

                         
                        int index24_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_70);

                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA24_71 = input.LA(1);

                         
                        int index24_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_71);

                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA24_72 = input.LA(1);

                         
                        int index24_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred47_Php()) ) {s = 73;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index24_72);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 24, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA23_eotS =
        "\u026a\uffff";
    static final String DFA23_eofS =
        "\1\27\u0269\uffff";
    static final String DFA23_minS =
        "\1\4\1\0\1\46\3\5\3\46\6\0\2\123\1\0\1\46\2\5\2\123\122\uffff\107"+
        "\0\u0150\uffff\2\0\70\uffff\60\0";
    static final String DFA23_maxS =
        "\1\170\1\0\1\156\3\170\3\156\6\0\2\123\1\0\1\156\2\170\2\123\122"+
        "\uffff\107\0\u0150\uffff\2\0\70\uffff\60\0";
    static final String DFA23_acceptS =
        "\27\uffff\1\2\120\uffff\1\1\u0201\uffff";
    static final String DFA23_specialS =
        "\1\uffff\1\0\7\uffff\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff\1\7\127\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
        "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
        "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1"+
        "\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\u0150\uffff\1\117"+
        "\1\120\70\uffff\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130"+
        "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143"+
        "\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156"+
        "\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171"+
        "\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080}>";
    static final String[] DFA23_transitionS = {
            "\1\27\1\22\5\uffff\1\17\1\uffff\1\3\2\uffff\1\27\1\16\1\27\1"+
            "\uffff\1\27\1\uffff\1\10\1\uffff\1\27\11\uffff\1\27\1\26\1\uffff"+
            "\1\27\1\2\3\uffff\1\12\1\23\2\27\10\uffff\1\27\3\uffff\1\27"+
            "\1\uffff\1\13\2\uffff\1\27\10\uffff\1\6\1\14\4\uffff\1\4\2\uffff"+
            "\1\7\1\uffff\1\5\1\27\5\uffff\1\24\1\25\1\uffff\1\27\3\uffff"+
            "\1\27\1\15\2\27\1\4\1\27\1\uffff\1\11\1\uffff\1\4\1\27\2\uffff"+
            "\1\1\10\uffff\1\20\1\21",
            "\1\uffff",
            "\1\151\107\uffff\1\152",
            "\1\174\5\uffff\1\171\1\uffff\1\153\3\uffff\1\170\4\uffff\1"+
            "\162\14\uffff\1\u0080\2\uffff\1\160\3\uffff\1\164\1\175\20\uffff"+
            "\1\165\13\uffff\1\156\1\166\4\uffff\1\154\2\uffff\1\161\1\uffff"+
            "\1\155\6\uffff\1\176\1\177\6\uffff\1\167\2\uffff\1\154\2\uffff"+
            "\1\163\1\uffff\1\154\3\uffff\1\157\10\uffff\1\172\1\173",
            "\1\u008f\5\uffff\1\u008c\5\uffff\1\u008b\4\uffff\1\u0085\14"+
            "\uffff\1\u0093\2\uffff\1\u0083\3\uffff\1\u0087\1\u0090\20\uffff"+
            "\1\u0088\13\uffff\1\u0081\1\u0089\7\uffff\1\u0084\10\uffff\1"+
            "\u0091\1\u0092\6\uffff\1\u008a\5\uffff\1\u0086\5\uffff\1\u0082"+
            "\10\uffff\1\u008d\1\u008e",
            "\1\u00a5\5\uffff\1\u00a2\1\uffff\1\u0096\3\uffff\1\u00a1\4"+
            "\uffff\1\u009b\14\uffff\1\u00a9\2\uffff\1\u0095\3\uffff\1\u009d"+
            "\1\u00a6\20\uffff\1\u009e\13\uffff\1\u0099\1\u009f\4\uffff\1"+
            "\u0097\2\uffff\1\u009a\1\uffff\1\u0098\6\uffff\1\u00a7\1\u00a8"+
            "\6\uffff\1\u00a0\2\uffff\1\u0097\2\uffff\1\u009c\1\uffff\1\u0097"+
            "\3\uffff\1\u0094\10\uffff\1\u00a3\1\u00a4",
            "\1\u00ab\107\uffff\1\u00aa",
            "\1\u00ad\107\uffff\1\u00ac",
            "\1\u00af\107\uffff\1\u00ae",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0200",
            "\1\u0201",
            "\1\uffff",
            "\1\u023b\107\uffff\1\u023a",
            "\1\u024d\5\uffff\1\u024a\1\uffff\1\u023e\3\uffff\1\u0249\4"+
            "\uffff\1\u0243\14\uffff\1\u0251\2\uffff\1\u023d\3\uffff\1\u0245"+
            "\1\u024e\20\uffff\1\u0246\13\uffff\1\u0241\1\u0247\4\uffff\1"+
            "\u023f\2\uffff\1\u0242\1\uffff\1\u0240\6\uffff\1\u024f\1\u0250"+
            "\6\uffff\1\u0248\2\uffff\1\u023f\2\uffff\1\u0244\1\uffff\1\u023f"+
            "\3\uffff\1\u023c\10\uffff\1\u024b\1\u024c",
            "\1\u0263\5\uffff\1\u0260\1\uffff\1\u0254\3\uffff\1\u025f\4"+
            "\uffff\1\u0259\14\uffff\1\u0267\2\uffff\1\u0253\3\uffff\1\u025b"+
            "\1\u0264\20\uffff\1\u025c\13\uffff\1\u0257\1\u025d\4\uffff\1"+
            "\u0255\2\uffff\1\u0258\1\uffff\1\u0256\6\uffff\1\u0265\1\u0266"+
            "\6\uffff\1\u025e\2\uffff\1\u0255\2\uffff\1\u025a\1\uffff\1\u0255"+
            "\3\uffff\1\u0252\10\uffff\1\u0261\1\u0262",
            "\1\u0268",
            "\1\u0269",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
    static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
    static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
    static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
    static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
    static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
    static final short[][] DFA23_transition;

    static {
        int numStates = DFA23_transitionS.length;
        DFA23_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
        }
    }

    class DFA23 extends DFA {

        public DFA23(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 23;
            this.eot = DFA23_eot;
            this.eof = DFA23_eof;
            this.min = DFA23_min;
            this.max = DFA23_max;
            this.accept = DFA23_accept;
            this.special = DFA23_special;
            this.transition = DFA23_transition;
        }
        public String getDescription() {
            return "221:15: ( expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA23_1 = input.LA(1);

                         
                        int index23_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_1);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA23_9 = input.LA(1);

                         
                        int index23_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_9);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA23_10 = input.LA(1);

                         
                        int index23_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_10);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA23_11 = input.LA(1);

                         
                        int index23_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_11);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA23_12 = input.LA(1);

                         
                        int index23_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_12);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA23_13 = input.LA(1);

                         
                        int index23_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_13);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA23_14 = input.LA(1);

                         
                        int index23_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_14);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA23_17 = input.LA(1);

                         
                        int index23_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_17);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA23_105 = input.LA(1);

                         
                        int index23_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_105);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA23_106 = input.LA(1);

                         
                        int index23_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_106);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA23_107 = input.LA(1);

                         
                        int index23_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_107);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA23_108 = input.LA(1);

                         
                        int index23_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_108);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA23_109 = input.LA(1);

                         
                        int index23_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_109);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA23_110 = input.LA(1);

                         
                        int index23_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_110);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA23_111 = input.LA(1);

                         
                        int index23_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_111);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA23_112 = input.LA(1);

                         
                        int index23_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_112);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA23_113 = input.LA(1);

                         
                        int index23_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_113);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA23_114 = input.LA(1);

                         
                        int index23_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_114);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA23_115 = input.LA(1);

                         
                        int index23_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_115);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA23_116 = input.LA(1);

                         
                        int index23_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_116);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA23_117 = input.LA(1);

                         
                        int index23_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_117);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA23_118 = input.LA(1);

                         
                        int index23_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_118);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA23_119 = input.LA(1);

                         
                        int index23_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_119);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA23_120 = input.LA(1);

                         
                        int index23_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_120);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA23_121 = input.LA(1);

                         
                        int index23_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_121);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA23_122 = input.LA(1);

                         
                        int index23_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_122);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA23_123 = input.LA(1);

                         
                        int index23_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_123);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA23_124 = input.LA(1);

                         
                        int index23_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_124);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA23_125 = input.LA(1);

                         
                        int index23_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_125);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA23_126 = input.LA(1);

                         
                        int index23_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_126);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA23_127 = input.LA(1);

                         
                        int index23_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_127);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA23_128 = input.LA(1);

                         
                        int index23_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_128);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA23_129 = input.LA(1);

                         
                        int index23_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_129);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA23_130 = input.LA(1);

                         
                        int index23_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_130);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA23_131 = input.LA(1);

                         
                        int index23_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_131);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA23_132 = input.LA(1);

                         
                        int index23_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_132);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA23_133 = input.LA(1);

                         
                        int index23_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_133);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA23_134 = input.LA(1);

                         
                        int index23_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_134);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA23_135 = input.LA(1);

                         
                        int index23_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_135);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA23_136 = input.LA(1);

                         
                        int index23_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_136);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA23_137 = input.LA(1);

                         
                        int index23_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_137);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA23_138 = input.LA(1);

                         
                        int index23_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_138);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA23_139 = input.LA(1);

                         
                        int index23_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_139);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA23_140 = input.LA(1);

                         
                        int index23_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_140);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA23_141 = input.LA(1);

                         
                        int index23_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_141);

                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA23_142 = input.LA(1);

                         
                        int index23_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_142);

                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA23_143 = input.LA(1);

                         
                        int index23_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_143);

                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA23_144 = input.LA(1);

                         
                        int index23_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_144);

                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA23_145 = input.LA(1);

                         
                        int index23_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_145);

                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA23_146 = input.LA(1);

                         
                        int index23_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_146);

                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA23_147 = input.LA(1);

                         
                        int index23_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_147);

                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA23_148 = input.LA(1);

                         
                        int index23_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_148);

                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA23_149 = input.LA(1);

                         
                        int index23_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_149);

                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA23_150 = input.LA(1);

                         
                        int index23_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_150);

                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA23_151 = input.LA(1);

                         
                        int index23_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_151);

                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA23_152 = input.LA(1);

                         
                        int index23_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_152);

                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA23_153 = input.LA(1);

                         
                        int index23_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_153);

                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA23_154 = input.LA(1);

                         
                        int index23_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_154);

                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA23_155 = input.LA(1);

                         
                        int index23_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_155);

                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA23_156 = input.LA(1);

                         
                        int index23_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_156);

                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA23_157 = input.LA(1);

                         
                        int index23_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_157);

                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA23_158 = input.LA(1);

                         
                        int index23_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_158);

                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA23_159 = input.LA(1);

                         
                        int index23_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_159);

                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA23_160 = input.LA(1);

                         
                        int index23_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_160);

                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA23_161 = input.LA(1);

                         
                        int index23_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_161);

                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA23_162 = input.LA(1);

                         
                        int index23_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_162);

                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA23_163 = input.LA(1);

                         
                        int index23_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_163);

                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA23_164 = input.LA(1);

                         
                        int index23_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_164);

                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA23_165 = input.LA(1);

                         
                        int index23_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_165);

                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA23_166 = input.LA(1);

                         
                        int index23_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_166);

                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA23_167 = input.LA(1);

                         
                        int index23_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_167);

                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA23_168 = input.LA(1);

                         
                        int index23_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_168);

                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA23_169 = input.LA(1);

                         
                        int index23_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_169);

                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA23_170 = input.LA(1);

                         
                        int index23_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_170);

                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA23_171 = input.LA(1);

                         
                        int index23_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_171);

                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA23_172 = input.LA(1);

                         
                        int index23_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_172);

                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA23_173 = input.LA(1);

                         
                        int index23_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_173);

                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA23_174 = input.LA(1);

                         
                        int index23_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_174);

                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA23_175 = input.LA(1);

                         
                        int index23_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_175);

                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA23_512 = input.LA(1);

                         
                        int index23_512 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_512);

                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA23_513 = input.LA(1);

                         
                        int index23_513 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_513);

                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA23_570 = input.LA(1);

                         
                        int index23_570 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_570);

                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA23_571 = input.LA(1);

                         
                        int index23_571 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_571);

                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA23_572 = input.LA(1);

                         
                        int index23_572 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_572);

                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA23_573 = input.LA(1);

                         
                        int index23_573 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_573);

                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA23_574 = input.LA(1);

                         
                        int index23_574 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_574);

                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA23_575 = input.LA(1);

                         
                        int index23_575 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_575);

                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA23_576 = input.LA(1);

                         
                        int index23_576 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_576);

                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA23_577 = input.LA(1);

                         
                        int index23_577 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_577);

                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA23_578 = input.LA(1);

                         
                        int index23_578 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_578);

                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA23_579 = input.LA(1);

                         
                        int index23_579 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_579);

                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA23_580 = input.LA(1);

                         
                        int index23_580 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_580);

                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA23_581 = input.LA(1);

                         
                        int index23_581 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_581);

                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA23_582 = input.LA(1);

                         
                        int index23_582 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_582);

                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA23_583 = input.LA(1);

                         
                        int index23_583 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_583);

                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA23_584 = input.LA(1);

                         
                        int index23_584 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_584);

                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA23_585 = input.LA(1);

                         
                        int index23_585 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_585);

                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA23_586 = input.LA(1);

                         
                        int index23_586 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_586);

                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA23_587 = input.LA(1);

                         
                        int index23_587 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_587);

                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA23_588 = input.LA(1);

                         
                        int index23_588 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_588);

                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA23_589 = input.LA(1);

                         
                        int index23_589 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_589);

                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA23_590 = input.LA(1);

                         
                        int index23_590 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_590);

                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA23_591 = input.LA(1);

                         
                        int index23_591 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_591);

                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA23_592 = input.LA(1);

                         
                        int index23_592 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_592);

                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA23_593 = input.LA(1);

                         
                        int index23_593 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_593);

                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA23_594 = input.LA(1);

                         
                        int index23_594 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_594);

                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA23_595 = input.LA(1);

                         
                        int index23_595 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_595);

                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA23_596 = input.LA(1);

                         
                        int index23_596 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_596);

                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA23_597 = input.LA(1);

                         
                        int index23_597 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_597);

                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA23_598 = input.LA(1);

                         
                        int index23_598 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_598);

                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA23_599 = input.LA(1);

                         
                        int index23_599 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_599);

                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA23_600 = input.LA(1);

                         
                        int index23_600 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_600);

                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA23_601 = input.LA(1);

                         
                        int index23_601 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_601);

                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA23_602 = input.LA(1);

                         
                        int index23_602 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_602);

                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA23_603 = input.LA(1);

                         
                        int index23_603 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_603);

                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA23_604 = input.LA(1);

                         
                        int index23_604 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_604);

                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA23_605 = input.LA(1);

                         
                        int index23_605 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_605);

                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA23_606 = input.LA(1);

                         
                        int index23_606 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_606);

                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA23_607 = input.LA(1);

                         
                        int index23_607 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_607);

                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA23_608 = input.LA(1);

                         
                        int index23_608 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_608);

                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA23_609 = input.LA(1);

                         
                        int index23_609 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_609);

                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA23_610 = input.LA(1);

                         
                        int index23_610 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_610);

                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA23_611 = input.LA(1);

                         
                        int index23_611 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_611);

                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA23_612 = input.LA(1);

                         
                        int index23_612 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_612);

                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA23_613 = input.LA(1);

                         
                        int index23_613 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_613);

                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA23_614 = input.LA(1);

                         
                        int index23_614 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_614);

                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA23_615 = input.LA(1);

                         
                        int index23_615 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_615);

                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA23_616 = input.LA(1);

                         
                        int index23_616 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_616);

                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA23_617 = input.LA(1);

                         
                        int index23_617 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred41_Php()) ) {s = 104;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index23_617);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 23, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA25_eotS =
        "\117\uffff";
    static final String DFA25_eofS =
        "\1\3\116\uffff";
    static final String DFA25_minS =
        "\1\4\2\0\114\uffff";
    static final String DFA25_maxS =
        "\1\170\2\0\114\uffff";
    static final String DFA25_acceptS =
        "\3\uffff\1\2\111\uffff\1\1\1\uffff";
    static final String DFA25_specialS =
        "\1\uffff\1\0\1\1\114\uffff}>";
    static final String[] DFA25_transitionS = {
            "\2\3\5\uffff\1\3\1\uffff\1\3\2\uffff\3\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\3\11\uffff\2\3\1\uffff\2\3\3\uffff\2\3\1\1\1"+
            "\2\10\uffff\1\3\3\uffff\1\3\1\uffff\1\3\2\uffff\1\3\10\uffff"+
            "\2\3\4\uffff\1\3\2\uffff\1\3\1\uffff\2\3\5\uffff\2\3\1\uffff"+
            "\1\3\3\uffff\3\3\1\uffff\2\3\1\uffff\1\3\1\uffff\2\3\2\uffff"+
            "\1\3\10\uffff\2\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "234:39: ( conditional )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred52_Php()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index25_1);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred52_Php()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index25_2);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA26_eotS =
        "\117\uffff";
    static final String DFA26_eofS =
        "\1\3\116\uffff";
    static final String DFA26_minS =
        "\1\4\2\0\114\uffff";
    static final String DFA26_maxS =
        "\1\170\2\0\114\uffff";
    static final String DFA26_acceptS =
        "\3\uffff\1\2\111\uffff\1\1\1\uffff";
    static final String DFA26_specialS =
        "\1\uffff\1\0\1\1\114\uffff}>";
    static final String[] DFA26_transitionS = {
            "\2\3\5\uffff\1\3\1\uffff\1\3\2\uffff\3\3\1\uffff\1\3\1\uffff"+
            "\1\3\1\uffff\1\3\11\uffff\2\3\1\uffff\2\3\3\uffff\2\3\1\1\1"+
            "\2\10\uffff\1\3\3\uffff\1\3\1\uffff\1\3\2\uffff\1\3\10\uffff"+
            "\2\3\4\uffff\1\3\2\uffff\1\3\1\uffff\2\3\5\uffff\2\3\1\uffff"+
            "\1\3\3\uffff\3\3\1\uffff\2\3\1\uffff\1\3\1\uffff\2\3\2\uffff"+
            "\1\3\10\uffff\2\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "239:56: ( conditional )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred55_Php()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_1);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred55_Php()) ) {s = 77;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index26_2);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA38_eotS =
        "\130\uffff";
    static final String DFA38_eofS =
        "\1\1\127\uffff";
    static final String DFA38_minS =
        "\1\4\72\uffff\1\0\34\uffff";
    static final String DFA38_maxS =
        "\1\173\72\uffff\1\0\34\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA38_specialS =
        "\73\uffff\1\0\34\uffff}>";
    static final String[] DFA38_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\5\1\1\73\4"+
            "\uffff\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3"+
            "\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1\2"+
            "\uffff\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\11\1"+
            "\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "()* loopback of 292:18: ( ',' ! expression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_59 = input.LA(1);

                         
                        int index38_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred69_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index38_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA39_eotS =
        "\130\uffff";
    static final String DFA39_eofS =
        "\1\1\127\uffff";
    static final String DFA39_minS =
        "\1\4\55\uffff\1\0\51\uffff";
    static final String DFA39_maxS =
        "\1\173\55\uffff\1\0\51\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA39_specialS =
        "\56\uffff\1\0\51\uffff}>";
    static final String[] DFA39_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\11\1\1\uffff"+
            "\2\1\2\uffff\1\1\3\uffff\1\1\1\56\2\1\1\uffff\2\1\1\56\1\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()* loopback of 300:22: ( ( 'or' | 'OR' ) ^ weakLogicalXor )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_46 = input.LA(1);

                         
                        int index39_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred71_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index39_46);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA40_eotS =
        "\130\uffff";
    static final String DFA40_eofS =
        "\1\1\127\uffff";
    static final String DFA40_minS =
        "\1\4\55\uffff\1\0\51\uffff";
    static final String DFA40_maxS =
        "\1\173\55\uffff\1\0\51\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA40_specialS =
        "\56\uffff\1\0\51\uffff}>";
    static final String[] DFA40_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\11\1\1\uffff"+
            "\2\1\2\uffff\1\1\3\uffff\2\1\1\56\1\1\1\uffff\3\1\1\uffff\1"+
            "\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()* loopback of 304:22: ( ( 'xor' | 'XOR' ) ^ weakLogicalAnd )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_46 = input.LA(1);

                         
                        int index40_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred73_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index40_46);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA41_eotS =
        "\130\uffff";
    static final String DFA41_eofS =
        "\1\1\127\uffff";
    static final String DFA41_minS =
        "\1\4\55\uffff\1\0\51\uffff";
    static final String DFA41_maxS =
        "\1\173\55\uffff\1\0\51\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA41_specialS =
        "\56\uffff\1\0\51\uffff}>";
    static final String[] DFA41_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\11\1\1\uffff"+
            "\2\1\2\uffff\1\1\3\uffff\1\56\2\1\1\56\1\uffff\3\1\1\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "()* loopback of 308:18: ( ( 'and' | 'AND' ) ^ assignment )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_46 = input.LA(1);

                         
                        int index41_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred75_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index41_46);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA43_eotS =
        "\135\uffff";
    static final String DFA43_eofS =
        "\135\uffff";
    static final String DFA43_minS =
        "\1\5\1\0\1\46\130\uffff\2\0";
    static final String DFA43_maxS =
        "\1\170\1\0\1\156\130\uffff\2\0";
    static final String DFA43_acceptS =
        "\3\uffff\1\3\125\uffff\1\1\1\2\2\uffff";
    static final String DFA43_specialS =
        "\1\uffff\1\0\131\uffff\1\1\1\2}>";
    static final String[] DFA43_transitionS = {
            "\1\3\5\uffff\1\3\1\uffff\1\3\3\uffff\1\3\4\uffff\1\3\14\uffff"+
            "\1\3\2\uffff\1\2\3\uffff\2\3\20\uffff\1\3\13\uffff\2\3\4\uffff"+
            "\1\3\2\uffff\1\3\1\uffff\1\3\6\uffff\2\3\6\uffff\1\3\2\uffff"+
            "\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\1\10\uffff\2\3",
            "\1\uffff",
            "\1\133\107\uffff\1\134",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "311:1: assignment : ( name EQUALS ^ ( ( RequireOperator )=> simpleRequire | assignment ) | name ( ( AssignmentOperator | ConcatAssigmentOperator ) ^ assignment ) | ternary );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_1 = input.LA(1);

                         
                        int index43_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred77_Php()) ) {s = 89;}

                        else if ( (synpred79_Php()) ) {s = 90;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index43_1);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA43_91 = input.LA(1);

                         
                        int index43_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred77_Php()) ) {s = 89;}

                        else if ( (synpred79_Php()) ) {s = 90;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index43_91);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA43_92 = input.LA(1);

                         
                        int index43_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred77_Php()) ) {s = 89;}

                        else if ( (synpred79_Php()) ) {s = 90;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index43_92);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA44_eotS =
        "\u0294\uffff";
    static final String DFA44_eofS =
        "\u0294\uffff";
    static final String DFA44_minS =
        "\4\5\1\46\1\0\3\46\6\0\2\123\1\0\1\46\2\5\2\123\101\0\104\uffff"+
        "\6\0\u0180\uffff\2\0\100\uffff\60\0";
    static final String DFA44_maxS =
        "\4\170\1\156\1\0\3\156\6\0\2\123\1\0\1\156\2\170\2\123\101\0\104"+
        "\uffff\6\0\u0180\uffff\2\0\100\uffff\60\0";
    static final String DFA44_acceptS =
        "\u009a\uffff\1\1\1\2\u01f8\uffff";
    static final String DFA44_specialS =
        "\5\uffff\1\0\3\uffff\1\1\1\2\1\3\1\4\1\5\1\6\2\uffff\1\7\5\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
        "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
        "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1"+
        "\107\1\110\104\uffff\1\111\1\112\1\113\1\114\1\115\1\116\u0180\uffff"+
        "\1\117\1\120\100\uffff\1\121\1\122\1\123\1\124\1\125\1\126\1\127"+
        "\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142"+
        "\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153\1\154\1\155"+
        "\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\170"+
        "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080}>";
    static final String[] DFA44_transitionS = {
            "\1\22\5\uffff\1\17\1\uffff\1\1\3\uffff\1\16\4\uffff\1\10\14"+
            "\uffff\1\26\2\uffff\1\6\3\uffff\1\12\1\23\20\uffff\1\13\13\uffff"+
            "\1\4\1\14\4\uffff\1\2\2\uffff\1\7\1\uffff\1\3\6\uffff\1\24\1"+
            "\25\6\uffff\1\15\2\uffff\1\2\2\uffff\1\11\1\uffff\1\2\3\uffff"+
            "\1\5\10\uffff\1\20\1\21",
            "\1\50\5\uffff\1\45\1\uffff\1\27\3\uffff\1\44\4\uffff\1\36\14"+
            "\uffff\1\54\2\uffff\1\34\3\uffff\1\40\1\51\20\uffff\1\41\13"+
            "\uffff\1\32\1\42\4\uffff\1\30\2\uffff\1\35\1\uffff\1\31\6\uffff"+
            "\1\52\1\53\6\uffff\1\43\2\uffff\1\30\2\uffff\1\37\1\uffff\1"+
            "\30\3\uffff\1\33\10\uffff\1\46\1\47",
            "\1\73\5\uffff\1\70\5\uffff\1\67\4\uffff\1\61\14\uffff\1\77"+
            "\2\uffff\1\57\3\uffff\1\63\1\74\20\uffff\1\64\13\uffff\1\55"+
            "\1\65\7\uffff\1\60\10\uffff\1\75\1\76\6\uffff\1\66\5\uffff\1"+
            "\62\5\uffff\1\56\10\uffff\1\71\1\72",
            "\1\121\5\uffff\1\116\1\uffff\1\102\3\uffff\1\115\4\uffff\1"+
            "\107\14\uffff\1\125\2\uffff\1\101\3\uffff\1\111\1\122\20\uffff"+
            "\1\112\13\uffff\1\105\1\113\4\uffff\1\103\2\uffff\1\106\1\uffff"+
            "\1\104\6\uffff\1\123\1\124\6\uffff\1\114\2\uffff\1\103\2\uffff"+
            "\1\110\1\uffff\1\103\3\uffff\1\100\10\uffff\1\117\1\120",
            "\1\127\107\uffff\1\126",
            "\1\uffff",
            "\1\u009c\107\uffff\1\u009d",
            "\1\u009f\107\uffff\1\u009e",
            "\1\u00a1\107\uffff\1\u00a0",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\u0222",
            "\1\u0223",
            "\1\uffff",
            "\1\u0265\107\uffff\1\u0264",
            "\1\u0277\5\uffff\1\u0274\1\uffff\1\u0268\3\uffff\1\u0273\4"+
            "\uffff\1\u026d\14\uffff\1\u027b\2\uffff\1\u0267\3\uffff\1\u026f"+
            "\1\u0278\20\uffff\1\u0270\13\uffff\1\u026b\1\u0271\4\uffff\1"+
            "\u0269\2\uffff\1\u026c\1\uffff\1\u026a\6\uffff\1\u0279\1\u027a"+
            "\6\uffff\1\u0272\2\uffff\1\u0269\2\uffff\1\u026e\1\uffff\1\u0269"+
            "\3\uffff\1\u0266\10\uffff\1\u0275\1\u0276",
            "\1\u028d\5\uffff\1\u028a\1\uffff\1\u027e\3\uffff\1\u0289\4"+
            "\uffff\1\u0283\14\uffff\1\u0291\2\uffff\1\u027d\3\uffff\1\u0285"+
            "\1\u028e\20\uffff\1\u0286\13\uffff\1\u0281\1\u0287\4\uffff\1"+
            "\u027f\2\uffff\1\u0282\1\uffff\1\u0280\6\uffff\1\u028f\1\u0290"+
            "\6\uffff\1\u0288\2\uffff\1\u027f\2\uffff\1\u0284\1\uffff\1\u027f"+
            "\3\uffff\1\u027c\10\uffff\1\u028b\1\u028c",
            "\1\u0292",
            "\1\u0293",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
    static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
    static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
    static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
    static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
    static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
    static final short[][] DFA44_transition;

    static {
        int numStates = DFA44_transitionS.length;
        DFA44_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
        }
    }

    class DFA44 extends DFA {

        public DFA44(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 44;
            this.eot = DFA44_eot;
            this.eof = DFA44_eof;
            this.min = DFA44_min;
            this.max = DFA44_max;
            this.accept = DFA44_accept;
            this.special = DFA44_special;
            this.transition = DFA44_transition;
        }
        public String getDescription() {
            return "317:1: ternary : ( logicalOr QUESTION_MARK expression COLON expression -> ^( IfExpression logicalOr expression expression ) | logicalOr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA44_5 = input.LA(1);

                         
                        int index44_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_5);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA44_9 = input.LA(1);

                         
                        int index44_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_9);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA44_10 = input.LA(1);

                         
                        int index44_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_10);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA44_11 = input.LA(1);

                         
                        int index44_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_11);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA44_12 = input.LA(1);

                         
                        int index44_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_12);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA44_13 = input.LA(1);

                         
                        int index44_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_13);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA44_14 = input.LA(1);

                         
                        int index44_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_14);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA44_17 = input.LA(1);

                         
                        int index44_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_17);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA44_23 = input.LA(1);

                         
                        int index44_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_23);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA44_24 = input.LA(1);

                         
                        int index44_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_24);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA44_25 = input.LA(1);

                         
                        int index44_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_25);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA44_26 = input.LA(1);

                         
                        int index44_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_26);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA44_27 = input.LA(1);

                         
                        int index44_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_27);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA44_28 = input.LA(1);

                         
                        int index44_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_28);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA44_29 = input.LA(1);

                         
                        int index44_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_29);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA44_30 = input.LA(1);

                         
                        int index44_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_30);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA44_31 = input.LA(1);

                         
                        int index44_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_31);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA44_32 = input.LA(1);

                         
                        int index44_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_32);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA44_33 = input.LA(1);

                         
                        int index44_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_33);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA44_34 = input.LA(1);

                         
                        int index44_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_34);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA44_35 = input.LA(1);

                         
                        int index44_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_35);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA44_36 = input.LA(1);

                         
                        int index44_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_36);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA44_37 = input.LA(1);

                         
                        int index44_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_37);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA44_38 = input.LA(1);

                         
                        int index44_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_38);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA44_39 = input.LA(1);

                         
                        int index44_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_39);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA44_40 = input.LA(1);

                         
                        int index44_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_40);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA44_41 = input.LA(1);

                         
                        int index44_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_41);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA44_42 = input.LA(1);

                         
                        int index44_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_42);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA44_43 = input.LA(1);

                         
                        int index44_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_43);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA44_44 = input.LA(1);

                         
                        int index44_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_44);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA44_45 = input.LA(1);

                         
                        int index44_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_45);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA44_46 = input.LA(1);

                         
                        int index44_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_46);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA44_47 = input.LA(1);

                         
                        int index44_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_47);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA44_48 = input.LA(1);

                         
                        int index44_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_48);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA44_49 = input.LA(1);

                         
                        int index44_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_49);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA44_50 = input.LA(1);

                         
                        int index44_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_50);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA44_51 = input.LA(1);

                         
                        int index44_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_51);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA44_52 = input.LA(1);

                         
                        int index44_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_52);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA44_53 = input.LA(1);

                         
                        int index44_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_53);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA44_54 = input.LA(1);

                         
                        int index44_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_54);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA44_55 = input.LA(1);

                         
                        int index44_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_55);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA44_56 = input.LA(1);

                         
                        int index44_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_56);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA44_57 = input.LA(1);

                         
                        int index44_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_57);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA44_58 = input.LA(1);

                         
                        int index44_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_58);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA44_59 = input.LA(1);

                         
                        int index44_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_59);

                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA44_60 = input.LA(1);

                         
                        int index44_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_60);

                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA44_61 = input.LA(1);

                         
                        int index44_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_61);

                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA44_62 = input.LA(1);

                         
                        int index44_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_62);

                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA44_63 = input.LA(1);

                         
                        int index44_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_63);

                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA44_64 = input.LA(1);

                         
                        int index44_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_64);

                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA44_65 = input.LA(1);

                         
                        int index44_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_65);

                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA44_66 = input.LA(1);

                         
                        int index44_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_66);

                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA44_67 = input.LA(1);

                         
                        int index44_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_67);

                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA44_68 = input.LA(1);

                         
                        int index44_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_68);

                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA44_69 = input.LA(1);

                         
                        int index44_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_69);

                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA44_70 = input.LA(1);

                         
                        int index44_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_70);

                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA44_71 = input.LA(1);

                         
                        int index44_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_71);

                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA44_72 = input.LA(1);

                         
                        int index44_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_72);

                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA44_73 = input.LA(1);

                         
                        int index44_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_73);

                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA44_74 = input.LA(1);

                         
                        int index44_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_74);

                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA44_75 = input.LA(1);

                         
                        int index44_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_75);

                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA44_76 = input.LA(1);

                         
                        int index44_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_76);

                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA44_77 = input.LA(1);

                         
                        int index44_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_77);

                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA44_78 = input.LA(1);

                         
                        int index44_78 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_78);

                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA44_79 = input.LA(1);

                         
                        int index44_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_79);

                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA44_80 = input.LA(1);

                         
                        int index44_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_80);

                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA44_81 = input.LA(1);

                         
                        int index44_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_81);

                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA44_82 = input.LA(1);

                         
                        int index44_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_82);

                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA44_83 = input.LA(1);

                         
                        int index44_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_83);

                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA44_84 = input.LA(1);

                         
                        int index44_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_84);

                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA44_85 = input.LA(1);

                         
                        int index44_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_85);

                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA44_86 = input.LA(1);

                         
                        int index44_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_86);

                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA44_87 = input.LA(1);

                         
                        int index44_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_87);

                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA44_156 = input.LA(1);

                         
                        int index44_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_156);

                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA44_157 = input.LA(1);

                         
                        int index44_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_157);

                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA44_158 = input.LA(1);

                         
                        int index44_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_158);

                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA44_159 = input.LA(1);

                         
                        int index44_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_159);

                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA44_160 = input.LA(1);

                         
                        int index44_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_160);

                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA44_161 = input.LA(1);

                         
                        int index44_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_161);

                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA44_546 = input.LA(1);

                         
                        int index44_546 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_546);

                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA44_547 = input.LA(1);

                         
                        int index44_547 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_547);

                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA44_612 = input.LA(1);

                         
                        int index44_612 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_612);

                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA44_613 = input.LA(1);

                         
                        int index44_613 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_613);

                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA44_614 = input.LA(1);

                         
                        int index44_614 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_614);

                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA44_615 = input.LA(1);

                         
                        int index44_615 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_615);

                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA44_616 = input.LA(1);

                         
                        int index44_616 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_616);

                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA44_617 = input.LA(1);

                         
                        int index44_617 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_617);

                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA44_618 = input.LA(1);

                         
                        int index44_618 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_618);

                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA44_619 = input.LA(1);

                         
                        int index44_619 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_619);

                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA44_620 = input.LA(1);

                         
                        int index44_620 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_620);

                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA44_621 = input.LA(1);

                         
                        int index44_621 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_621);

                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA44_622 = input.LA(1);

                         
                        int index44_622 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_622);

                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA44_623 = input.LA(1);

                         
                        int index44_623 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_623);

                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA44_624 = input.LA(1);

                         
                        int index44_624 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_624);

                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA44_625 = input.LA(1);

                         
                        int index44_625 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_625);

                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA44_626 = input.LA(1);

                         
                        int index44_626 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_626);

                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA44_627 = input.LA(1);

                         
                        int index44_627 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_627);

                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA44_628 = input.LA(1);

                         
                        int index44_628 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_628);

                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA44_629 = input.LA(1);

                         
                        int index44_629 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_629);

                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA44_630 = input.LA(1);

                         
                        int index44_630 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_630);

                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA44_631 = input.LA(1);

                         
                        int index44_631 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_631);

                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA44_632 = input.LA(1);

                         
                        int index44_632 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_632);

                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA44_633 = input.LA(1);

                         
                        int index44_633 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_633);

                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA44_634 = input.LA(1);

                         
                        int index44_634 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_634);

                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA44_635 = input.LA(1);

                         
                        int index44_635 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_635);

                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA44_636 = input.LA(1);

                         
                        int index44_636 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_636);

                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA44_637 = input.LA(1);

                         
                        int index44_637 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_637);

                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA44_638 = input.LA(1);

                         
                        int index44_638 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_638);

                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA44_639 = input.LA(1);

                         
                        int index44_639 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_639);

                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA44_640 = input.LA(1);

                         
                        int index44_640 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_640);

                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA44_641 = input.LA(1);

                         
                        int index44_641 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_641);

                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA44_642 = input.LA(1);

                         
                        int index44_642 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_642);

                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA44_643 = input.LA(1);

                         
                        int index44_643 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_643);

                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA44_644 = input.LA(1);

                         
                        int index44_644 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_644);

                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA44_645 = input.LA(1);

                         
                        int index44_645 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_645);

                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA44_646 = input.LA(1);

                         
                        int index44_646 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_646);

                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA44_647 = input.LA(1);

                         
                        int index44_647 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_647);

                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA44_648 = input.LA(1);

                         
                        int index44_648 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_648);

                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA44_649 = input.LA(1);

                         
                        int index44_649 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_649);

                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA44_650 = input.LA(1);

                         
                        int index44_650 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_650);

                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA44_651 = input.LA(1);

                         
                        int index44_651 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_651);

                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA44_652 = input.LA(1);

                         
                        int index44_652 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_652);

                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA44_653 = input.LA(1);

                         
                        int index44_653 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_653);

                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA44_654 = input.LA(1);

                         
                        int index44_654 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_654);

                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA44_655 = input.LA(1);

                         
                        int index44_655 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_655);

                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA44_656 = input.LA(1);

                         
                        int index44_656 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_656);

                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA44_657 = input.LA(1);

                         
                        int index44_657 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_657);

                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA44_658 = input.LA(1);

                         
                        int index44_658 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_658);

                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA44_659 = input.LA(1);

                         
                        int index44_659 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred80_Php()) ) {s = 154;}

                        else if ( (true) ) {s = 155;}

                         
                        input.seek(index44_659);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 44, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA45_eotS =
        "\130\uffff";
    static final String DFA45_eofS =
        "\1\1\127\uffff";
    static final String DFA45_minS =
        "\1\4\72\uffff\1\0\34\uffff";
    static final String DFA45_maxS =
        "\1\173\72\uffff\1\0\34\uffff";
    static final String DFA45_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA45_specialS =
        "\73\uffff\1\0\34\uffff}>";
    static final String[] DFA45_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\3\1\1\73\2\uffff\1\1\2"+
            "\uffff\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\11\1"+
            "\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "()* loopback of 323:18: ( LOGICAL_OR ^ logicalAnd )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_59 = input.LA(1);

                         
                        int index45_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred81_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index45_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA46_eotS =
        "\130\uffff";
    static final String DFA46_eofS =
        "\1\1\127\uffff";
    static final String DFA46_minS =
        "\1\4\72\uffff\1\0\34\uffff";
    static final String DFA46_maxS =
        "\1\173\72\uffff\1\0\34\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA46_specialS =
        "\73\uffff\1\0\34\uffff}>";
    static final String[] DFA46_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\2\1\1\73\1\1\2\uffff\1"+
            "\1\2\uffff\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\11"+
            "\1\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "()* loopback of 327:17: ( LOGICAL_AND ^ bitwiseOr )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_59 = input.LA(1);

                         
                        int index46_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred82_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index46_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA47_eotS =
        "\130\uffff";
    static final String DFA47_eofS =
        "\1\1\127\uffff";
    static final String DFA47_minS =
        "\1\4\72\uffff\1\0\34\uffff";
    static final String DFA47_maxS =
        "\1\173\72\uffff\1\0\34\uffff";
    static final String DFA47_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA47_specialS =
        "\73\uffff\1\0\34\uffff}>";
    static final String[] DFA47_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\2\1\2\uffff\1\1\1\73\3\1\1\uffff\1\1\2\uffff\11"+
            "\1\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA47_eot = DFA.unpackEncodedString(DFA47_eotS);
    static final short[] DFA47_eof = DFA.unpackEncodedString(DFA47_eofS);
    static final char[] DFA47_min = DFA.unpackEncodedStringToUnsignedChars(DFA47_minS);
    static final char[] DFA47_max = DFA.unpackEncodedStringToUnsignedChars(DFA47_maxS);
    static final short[] DFA47_accept = DFA.unpackEncodedString(DFA47_acceptS);
    static final short[] DFA47_special = DFA.unpackEncodedString(DFA47_specialS);
    static final short[][] DFA47_transition;

    static {
        int numStates = DFA47_transitionS.length;
        DFA47_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA47_transition[i] = DFA.unpackEncodedString(DFA47_transitionS[i]);
        }
    }

    class DFA47 extends DFA {

        public DFA47(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 47;
            this.eot = DFA47_eot;
            this.eof = DFA47_eof;
            this.min = DFA47_min;
            this.max = DFA47_max;
            this.accept = DFA47_accept;
            this.special = DFA47_special;
            this.transition = DFA47_transition;
        }
        public String getDescription() {
            return "()* loopback of 331:18: ( PIPE ^ bitWiseAnd )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA47_59 = input.LA(1);

                         
                        int index47_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred83_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index47_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 47, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA48_eotS =
        "\130\uffff";
    static final String DFA48_eofS =
        "\1\1\127\uffff";
    static final String DFA48_minS =
        "\1\4\44\uffff\1\0\62\uffff";
    static final String DFA48_maxS =
        "\1\173\44\uffff\1\0\62\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA48_specialS =
        "\45\uffff\1\0\62\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\1\1\45\2\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6"+
            "\1\4\uffff\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1"+
            "\1\3\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1"+
            "\1\2\uffff\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\11"+
            "\1\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()* loopback of 335:21: ( AMPERSAND ^ equalityCheck )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_37 = input.LA(1);

                         
                        int index48_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred84_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index48_37);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA49_eotS =
        "\130\uffff";
    static final String DFA49_eofS =
        "\1\2\127\uffff";
    static final String DFA49_minS =
        "\1\4\1\0\126\uffff";
    static final String DFA49_maxS =
        "\1\173\1\0\126\uffff";
    static final String DFA49_acceptS =
        "\2\uffff\1\2\124\uffff\1\1";
    static final String DFA49_specialS =
        "\1\uffff\1\0\126\uffff}>";
    static final String[] DFA49_transitionS = {
            "\4\2\3\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff\6\2\4\uffff"+
            "\4\2\1\uffff\3\2\2\uffff\5\2\1\1\4\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\4\2\2\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\5\2\1\uffff\1\2\2\uffff\11\2\1\uffff"+
            "\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "339:24: ( EqualityOperator ^ comparisionCheck )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred85_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA50_eotS =
        "\130\uffff";
    static final String DFA50_eofS =
        "\1\2\127\uffff";
    static final String DFA50_minS =
        "\1\4\1\0\126\uffff";
    static final String DFA50_maxS =
        "\1\173\1\0\126\uffff";
    static final String DFA50_acceptS =
        "\2\uffff\1\2\124\uffff\1\1";
    static final String DFA50_specialS =
        "\1\uffff\1\0\126\uffff}>";
    static final String[] DFA50_transitionS = {
            "\4\2\3\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff\6\2\4\uffff"+
            "\1\1\3\2\1\uffff\3\2\2\uffff\6\2\4\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\4\2\2\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\5\2\1\uffff\1\2\2\uffff\11\2\1\uffff"+
            "\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "343:20: ( ComparisionOperator ^ bitWiseShift )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA50_1 = input.LA(1);

                         
                        int index50_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred86_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index50_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 50, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA51_eotS =
        "\130\uffff";
    static final String DFA51_eofS =
        "\1\1\127\uffff";
    static final String DFA51_minS =
        "\1\4\72\uffff\1\0\34\uffff";
    static final String DFA51_maxS =
        "\1\173\72\uffff\1\0\34\uffff";
    static final String DFA51_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA51_specialS =
        "\73\uffff\1\0\34\uffff}>";
    static final String[] DFA51_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\2\1\2\uffff\5\1\1\uffff\1\1\2\uffff\7\1\1\73\1"+
            "\1\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff\1"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "()* loopback of 347:16: ( ShiftOperator ^ addition )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_59 = input.LA(1);

                         
                        int index51_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred87_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index51_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA52_eotS =
        "\156\uffff";
    static final String DFA52_eofS =
        "\1\1\155\uffff";
    static final String DFA52_minS =
        "\1\4\32\uffff\1\0\37\uffff\1\0\62\uffff";
    static final String DFA52_maxS =
        "\1\173\32\uffff\1\0\37\uffff\1\0\62\uffff";
    static final String DFA52_acceptS =
        "\1\uffff\1\2\125\uffff\1\1\26\uffff";
    static final String DFA52_specialS =
        "\33\uffff\1\0\37\uffff\1\1\62\uffff}>";
    static final String[] DFA52_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\2\1\1\73\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3"+
            "\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\33"+
            "\2\uffff\1\1\1\uffff\2\1\2\uffff\2\1\1\73\2\1\1\uffff\1\1\2"+
            "\uffff\11\1\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1"+
            "\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "()* loopback of 351:22: ( ( PLUS | MINUS | DOT ) ^ multiplication )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_27 = input.LA(1);

                         
                        int index52_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred90_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_27);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA52_59 = input.LA(1);

                         
                        int index52_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred90_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index52_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA53_eotS =
        "\130\uffff";
    static final String DFA53_eofS =
        "\1\1\127\uffff";
    static final String DFA53_minS =
        "\1\4\72\uffff\1\0\34\uffff";
    static final String DFA53_maxS =
        "\1\173\72\uffff\1\0\34\uffff";
    static final String DFA53_acceptS =
        "\1\uffff\1\2\125\uffff\1\1";
    static final String DFA53_specialS =
        "\73\uffff\1\0\34\uffff}>";
    static final String[] DFA53_transitionS = {
            "\3\1\1\73\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4"+
            "\uffff\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\73\1\uffff\1\1"+
            "\3\uffff\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1"+
            "\2\uffff\1\1\1\uffff\2\1\2\uffff\1\73\4\1\1\uffff\1\1\2\uffff"+
            "\11\1\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff"+
            "\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "()* loopback of 355:18: ( ( ASTERISK | FORWARD_SLASH | PERCENT ) ^ logicalNot )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA53_59 = input.LA(1);

                         
                        int index53_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred93_Php()) ) {s = 87;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index53_59);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 53, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA54_eotS =
        "\131\uffff";
    static final String DFA54_eofS =
        "\1\2\130\uffff";
    static final String DFA54_minS =
        "\1\4\1\0\127\uffff";
    static final String DFA54_maxS =
        "\1\173\1\0\127\uffff";
    static final String DFA54_acceptS =
        "\2\uffff\1\2\125\uffff\1\1";
    static final String DFA54_specialS =
        "\1\uffff\1\0\127\uffff}>";
    static final String[] DFA54_transitionS = {
            "\4\2\3\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff\6\2\4\uffff"+
            "\4\2\1\uffff\3\2\2\uffff\4\2\1\1\1\2\4\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\4\2\2\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\2\2\2\uffff\5\2\1\uffff\1\2\2\uffff\11"+
            "\2\1\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\1"+
            "\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA54_eot = DFA.unpackEncodedString(DFA54_eotS);
    static final short[] DFA54_eof = DFA.unpackEncodedString(DFA54_eofS);
    static final char[] DFA54_min = DFA.unpackEncodedStringToUnsignedChars(DFA54_minS);
    static final char[] DFA54_max = DFA.unpackEncodedStringToUnsignedChars(DFA54_maxS);
    static final short[] DFA54_accept = DFA.unpackEncodedString(DFA54_acceptS);
    static final short[] DFA54_special = DFA.unpackEncodedString(DFA54_specialS);
    static final short[][] DFA54_transition;

    static {
        int numStates = DFA54_transitionS.length;
        DFA54_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA54_transition[i] = DFA.unpackEncodedString(DFA54_transitionS[i]);
        }
    }

    class DFA54 extends DFA {

        public DFA54(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 54;
            this.eot = DFA54_eot;
            this.eof = DFA54_eof;
            this.min = DFA54_min;
            this.max = DFA54_max;
            this.accept = DFA54_accept;
            this.special = DFA54_special;
            this.transition = DFA54_transition;
        }
        public String getDescription() {
            return "359:24: ( EQUALS ^ logicalNot )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA54_1 = input.LA(1);

                         
                        int index54_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred94_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index54_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 54, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA56_eotS =
        "\127\uffff";
    static final String DFA56_eofS =
        "\1\2\126\uffff";
    static final String DFA56_minS =
        "\1\4\1\0\125\uffff";
    static final String DFA56_maxS =
        "\1\173\1\0\125\uffff";
    static final String DFA56_acceptS =
        "\2\uffff\1\2\123\uffff\1\1";
    static final String DFA56_specialS =
        "\1\uffff\1\0\125\uffff}>";
    static final String[] DFA56_transitionS = {
            "\4\2\3\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff\6\2\4\uffff"+
            "\4\2\1\uffff\3\2\2\uffff\6\2\4\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\2\2\1\1\6\uffff\4\2\2\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\5\2\1\uffff\1\2\2\uffff\11\2\1\uffff"+
            "\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "364:20: ( INSTANCE_OF ^ negateOrCast )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA56_1 = input.LA(1);

                         
                        int index56_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred96_Php()) ) {s = 86;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index56_1);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 56, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA58_eotS =
        "\131\uffff";
    static final String DFA58_eofS =
        "\131\uffff";
    static final String DFA58_minS =
        "\1\5\1\uffff\1\0\1\46\123\uffff\2\0";
    static final String DFA58_maxS =
        "\1\170\1\uffff\1\0\1\156\123\uffff\2\0";
    static final String DFA58_acceptS =
        "\1\uffff\1\1\2\uffff\1\3\121\uffff\1\2\2\uffff";
    static final String DFA58_specialS =
        "\2\uffff\1\0\124\uffff\1\1\1\2}>";
    static final String[] DFA58_transitionS = {
            "\1\4\5\uffff\1\4\5\uffff\1\4\4\uffff\1\4\14\uffff\1\4\2\uffff"+
            "\1\3\3\uffff\2\4\20\uffff\1\4\13\uffff\1\1\1\4\7\uffff\1\4\10"+
            "\uffff\2\4\6\uffff\1\4\5\uffff\1\4\5\uffff\1\2\10\uffff\2\4",
            "",
            "\1\uffff",
            "\1\127\107\uffff\1\130",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "374:1: increment : ( IncrementOperator name -> ^( Prefix IncrementOperator name ) | name IncrementOperator -> ^( Postfix IncrementOperator name ) | newOrClone );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA58_2 = input.LA(1);

                         
                        int index58_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred103_Php()) ) {s = 86;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index58_2);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA58_87 = input.LA(1);

                         
                        int index58_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred103_Php()) ) {s = 86;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index58_87);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA58_88 = input.LA(1);

                         
                        int index58_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred103_Php()) ) {s = 86;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index58_88);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 58, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA63_eotS =
        "\u0127\uffff";
    static final String DFA63_eofS =
        "\1\uffff\1\55\7\uffff\6\55\2\uffff\1\55\u0115\uffff";
    static final String DFA63_minS =
        "\2\5\1\46\3\5\3\46\6\5\2\123\1\5\1\46\2\5\2\123\25\0\4\uffff\125"+
        "\0\4\uffff\16\0\4\uffff\16\0\4\uffff\16\0\4\uffff\16\0\4\uffff\16"+
        "\0\4\uffff\20\0\4\uffff\60\0";
    static final String DFA63_maxS =
        "\1\170\1\173\1\156\3\170\3\156\6\173\2\123\1\173\1\156\2\170\2\123"+
        "\25\0\4\uffff\125\0\4\uffff\16\0\4\uffff\16\0\4\uffff\16\0\4\uffff"+
        "\16\0\4\uffff\16\0\4\uffff\20\0\4\uffff\60\0";
    static final String DFA63_acceptS =
        "\54\uffff\1\1\1\2\u00f9\uffff";
    static final String DFA63_specialS =
        "\27\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\4\uffff\1\25\1\26\1"+
        "\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
        "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
        "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
        "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110"+
        "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123"+
        "\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136"+
        "\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151"+
        "\4\uffff\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1"+
        "\163\1\164\1\165\1\166\1\167\4\uffff\1\170\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085"+
        "\4\uffff\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c"+
        "\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\4\uffff"+
        "\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b"+
        "\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\4\uffff\1\u00a2"+
        "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa"+
        "\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\4\uffff\1\u00b0\1\u00b1"+
        "\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9"+
        "\1\u00ba\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf\4\uffff\1\u00c0"+
        "\1\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8"+
        "\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\1\u00cf\1\u00d0"+
        "\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d8"+
        "\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0"+
        "\1\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e8"+
        "\1\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed\1\u00ee\1\u00ef}>";
    static final String[] DFA63_transitionS = {
            "\1\22\5\uffff\1\17\1\uffff\1\3\3\uffff\1\16\4\uffff\1\10\14"+
            "\uffff\1\26\2\uffff\1\2\3\uffff\1\12\1\23\20\uffff\1\13\13\uffff"+
            "\1\6\1\14\4\uffff\1\4\2\uffff\1\7\1\uffff\1\5\6\uffff\1\24\1"+
            "\25\6\uffff\1\15\2\uffff\1\4\2\uffff\1\11\1\uffff\1\4\3\uffff"+
            "\1\1\10\uffff\1\20\1\21",
            "\1\44\1\54\1\37\4\uffff\1\33\10\uffff\1\27\1\uffff\1\55\3\uffff"+
            "\1\55\4\uffff\1\42\1\33\5\uffff\1\40\6\uffff\1\32\1\43\4\uffff"+
            "\1\37\13\uffff\1\31\1\36\6\uffff\1\34\1\uffff\1\46\1\47\2\uffff"+
            "\1\40\4\uffff\1\35\1\uffff\1\30\1\uffff\1\37\1\45\1\40\6\uffff"+
            "\1\50\6\uffff\1\41\12\uffff\1\51\1\53\1\52\1\51\3\uffff\1\53"+
            "\1\uffff\1\52",
            "\1\60\107\uffff\1\61",
            "\1\103\5\uffff\1\100\1\uffff\1\62\3\uffff\1\77\4\uffff\1\71"+
            "\14\uffff\1\107\2\uffff\1\67\3\uffff\1\73\1\104\20\uffff\1\74"+
            "\13\uffff\1\65\1\75\4\uffff\1\63\2\uffff\1\70\1\uffff\1\64\6"+
            "\uffff\1\105\1\106\6\uffff\1\76\2\uffff\1\63\2\uffff\1\72\1"+
            "\uffff\1\63\3\uffff\1\66\10\uffff\1\101\1\102",
            "\1\126\5\uffff\1\123\5\uffff\1\122\4\uffff\1\114\14\uffff\1"+
            "\132\2\uffff\1\112\3\uffff\1\116\1\127\20\uffff\1\117\13\uffff"+
            "\1\110\1\120\7\uffff\1\113\10\uffff\1\130\1\131\6\uffff\1\121"+
            "\5\uffff\1\115\5\uffff\1\111\10\uffff\1\124\1\125",
            "\1\154\5\uffff\1\151\1\uffff\1\135\3\uffff\1\150\4\uffff\1"+
            "\142\14\uffff\1\160\2\uffff\1\134\3\uffff\1\144\1\155\20\uffff"+
            "\1\145\13\uffff\1\140\1\146\4\uffff\1\136\2\uffff\1\141\1\uffff"+
            "\1\137\6\uffff\1\156\1\157\6\uffff\1\147\2\uffff\1\136\2\uffff"+
            "\1\143\1\uffff\1\136\3\uffff\1\133\10\uffff\1\152\1\153",
            "\1\162\107\uffff\1\161",
            "\1\164\107\uffff\1\163",
            "\1\166\107\uffff\1\165",
            "\1\175\1\54\1\170\17\uffff\1\55\3\uffff\1\55\4\uffff\1\173"+
            "\6\uffff\1\171\7\uffff\1\174\4\uffff\1\170\14\uffff\1\167\10"+
            "\uffff\1\177\1\u0080\2\uffff\1\171\10\uffff\1\170\1\176\1\171"+
            "\6\uffff\1\u0081\6\uffff\1\172\12\uffff\1\u0082\1\u0084\1\u0083"+
            "\1\u0082\3\uffff\1\u0084\1\uffff\1\u0083",
            "\1\u008f\1\54\1\u008a\17\uffff\1\55\3\uffff\1\55\4\uffff\1"+
            "\u008d\6\uffff\1\u008b\7\uffff\1\u008e\4\uffff\1\u008a\14\uffff"+
            "\1\u0089\10\uffff\1\u0091\1\u0092\2\uffff\1\u008b\10\uffff\1"+
            "\u008a\1\u0090\1\u008b\6\uffff\1\u0093\6\uffff\1\u008c\12\uffff"+
            "\1\u0094\1\u0096\1\u0095\1\u0094\3\uffff\1\u0096\1\uffff\1\u0095",
            "\1\u00a1\1\54\1\u009c\17\uffff\1\55\3\uffff\1\55\4\uffff\1"+
            "\u009f\6\uffff\1\u009d\7\uffff\1\u00a0\4\uffff\1\u009c\14\uffff"+
            "\1\u009b\10\uffff\1\u00a3\1\u00a4\2\uffff\1\u009d\10\uffff\1"+
            "\u009c\1\u00a2\1\u009d\6\uffff\1\u00a5\6\uffff\1\u009e\12\uffff"+
            "\1\u00a6\1\u00a8\1\u00a7\1\u00a6\3\uffff\1\u00a8\1\uffff\1\u00a7",
            "\1\u00b3\1\54\1\u00ae\17\uffff\1\55\3\uffff\1\55\4\uffff\1"+
            "\u00b1\6\uffff\1\u00af\7\uffff\1\u00b2\4\uffff\1\u00ae\14\uffff"+
            "\1\u00ad\10\uffff\1\u00b5\1\u00b6\2\uffff\1\u00af\10\uffff\1"+
            "\u00ae\1\u00b4\1\u00af\6\uffff\1\u00b7\6\uffff\1\u00b0\12\uffff"+
            "\1\u00b8\1\u00ba\1\u00b9\1\u00b8\3\uffff\1\u00ba\1\uffff\1\u00b9",
            "\1\u00c5\1\54\1\u00c0\17\uffff\1\55\3\uffff\1\55\4\uffff\1"+
            "\u00c3\6\uffff\1\u00c1\7\uffff\1\u00c4\4\uffff\1\u00c0\14\uffff"+
            "\1\u00bf\10\uffff\1\u00c7\1\u00c8\2\uffff\1\u00c1\10\uffff\1"+
            "\u00c0\1\u00c6\1\u00c1\6\uffff\1\u00c9\6\uffff\1\u00c2\12\uffff"+
            "\1\u00ca\1\u00cc\1\u00cb\1\u00ca\3\uffff\1\u00cc\1\uffff\1\u00cb",
            "\1\u00d7\1\54\1\u00d2\17\uffff\1\55\3\uffff\1\55\4\uffff\1"+
            "\u00d5\6\uffff\1\u00d3\7\uffff\1\u00d6\4\uffff\1\u00d2\14\uffff"+
            "\1\u00d1\10\uffff\1\u00d9\1\u00da\2\uffff\1\u00d3\10\uffff\1"+
            "\u00d2\1\u00d8\1\u00d3\6\uffff\1\u00db\6\uffff\1\u00d4\12\uffff"+
            "\1\u00dc\1\u00de\1\u00dd\1\u00dc\3\uffff\1\u00de\1\uffff\1\u00dd",
            "\1\u00e3",
            "\1\u00e4",
            "\1\u00eb\1\54\1\u00e6\17\uffff\1\55\3\uffff\1\55\4\uffff\1"+
            "\u00e9\6\uffff\1\u00e7\7\uffff\1\u00ea\4\uffff\1\u00e6\14\uffff"+
            "\1\u00e5\10\uffff\1\u00ed\1\u00ee\2\uffff\1\u00e7\10\uffff\1"+
            "\u00e6\1\u00ec\1\u00e7\6\uffff\1\u00ef\6\uffff\1\u00e8\12\uffff"+
            "\1\u00f0\1\u00f2\1\u00f1\1\u00f0\3\uffff\1\u00f2\1\uffff\1\u00f1",
            "\1\u00f8\107\uffff\1\u00f7",
            "\1\u010a\5\uffff\1\u0107\1\uffff\1\u00fb\3\uffff\1\u0106\4"+
            "\uffff\1\u0100\14\uffff\1\u010e\2\uffff\1\u00fa\3\uffff\1\u0102"+
            "\1\u010b\20\uffff\1\u0103\13\uffff\1\u00fe\1\u0104\4\uffff\1"+
            "\u00fc\2\uffff\1\u00ff\1\uffff\1\u00fd\6\uffff\1\u010c\1\u010d"+
            "\6\uffff\1\u0105\2\uffff\1\u00fc\2\uffff\1\u0101\1\uffff\1\u00fc"+
            "\3\uffff\1\u00f9\10\uffff\1\u0108\1\u0109",
            "\1\u0120\5\uffff\1\u011d\1\uffff\1\u0111\3\uffff\1\u011c\4"+
            "\uffff\1\u0116\14\uffff\1\u0124\2\uffff\1\u0110\3\uffff\1\u0118"+
            "\1\u0121\20\uffff\1\u0119\13\uffff\1\u0114\1\u011a\4\uffff\1"+
            "\u0112\2\uffff\1\u0115\1\uffff\1\u0113\6\uffff\1\u0122\1\u0123"+
            "\6\uffff\1\u011b\2\uffff\1\u0112\2\uffff\1\u0117\1\uffff\1\u0112"+
            "\3\uffff\1\u010f\10\uffff\1\u011e\1\u011f",
            "\1\u0125",
            "\1\u0126",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "397:7: ( keyValuePair | expression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA63_23 = input.LA(1);

                         
                        int index63_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_23);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA63_24 = input.LA(1);

                         
                        int index63_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_24);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA63_25 = input.LA(1);

                         
                        int index63_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_25);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA63_26 = input.LA(1);

                         
                        int index63_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_26);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA63_27 = input.LA(1);

                         
                        int index63_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_27);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA63_28 = input.LA(1);

                         
                        int index63_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_28);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA63_29 = input.LA(1);

                         
                        int index63_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_29);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA63_30 = input.LA(1);

                         
                        int index63_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_30);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA63_31 = input.LA(1);

                         
                        int index63_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_31);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA63_32 = input.LA(1);

                         
                        int index63_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_32);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA63_33 = input.LA(1);

                         
                        int index63_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_33);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA63_34 = input.LA(1);

                         
                        int index63_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_34);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA63_35 = input.LA(1);

                         
                        int index63_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_35);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA63_36 = input.LA(1);

                         
                        int index63_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_36);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA63_37 = input.LA(1);

                         
                        int index63_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_37);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA63_38 = input.LA(1);

                         
                        int index63_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_38);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA63_39 = input.LA(1);

                         
                        int index63_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_39);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA63_40 = input.LA(1);

                         
                        int index63_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_40);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA63_41 = input.LA(1);

                         
                        int index63_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_41);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA63_42 = input.LA(1);

                         
                        int index63_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_42);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA63_43 = input.LA(1);

                         
                        int index63_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_43);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA63_48 = input.LA(1);

                         
                        int index63_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_48);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA63_49 = input.LA(1);

                         
                        int index63_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_49);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA63_50 = input.LA(1);

                         
                        int index63_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_50);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA63_51 = input.LA(1);

                         
                        int index63_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_51);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA63_52 = input.LA(1);

                         
                        int index63_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_52);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA63_53 = input.LA(1);

                         
                        int index63_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_53);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA63_54 = input.LA(1);

                         
                        int index63_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_54);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA63_55 = input.LA(1);

                         
                        int index63_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_55);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA63_56 = input.LA(1);

                         
                        int index63_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_56);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA63_57 = input.LA(1);

                         
                        int index63_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_57);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA63_58 = input.LA(1);

                         
                        int index63_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_58);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA63_59 = input.LA(1);

                         
                        int index63_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_59);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA63_60 = input.LA(1);

                         
                        int index63_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_60);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA63_61 = input.LA(1);

                         
                        int index63_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_61);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA63_62 = input.LA(1);

                         
                        int index63_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_62);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA63_63 = input.LA(1);

                         
                        int index63_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_63);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA63_64 = input.LA(1);

                         
                        int index63_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_64);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA63_65 = input.LA(1);

                         
                        int index63_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_65);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA63_66 = input.LA(1);

                         
                        int index63_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_66);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA63_67 = input.LA(1);

                         
                        int index63_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_67);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA63_68 = input.LA(1);

                         
                        int index63_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_68);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA63_69 = input.LA(1);

                         
                        int index63_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_69);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA63_70 = input.LA(1);

                         
                        int index63_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_70);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA63_71 = input.LA(1);

                         
                        int index63_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_71);

                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA63_72 = input.LA(1);

                         
                        int index63_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_72);

                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA63_73 = input.LA(1);

                         
                        int index63_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_73);

                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA63_74 = input.LA(1);

                         
                        int index63_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_74);

                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA63_75 = input.LA(1);

                         
                        int index63_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_75);

                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA63_76 = input.LA(1);

                         
                        int index63_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_76);

                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA63_77 = input.LA(1);

                         
                        int index63_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_77);

                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA63_78 = input.LA(1);

                         
                        int index63_78 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_78);

                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA63_79 = input.LA(1);

                         
                        int index63_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_79);

                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA63_80 = input.LA(1);

                         
                        int index63_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_80);

                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA63_81 = input.LA(1);

                         
                        int index63_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_81);

                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA63_82 = input.LA(1);

                         
                        int index63_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_82);

                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA63_83 = input.LA(1);

                         
                        int index63_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_83);

                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA63_84 = input.LA(1);

                         
                        int index63_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_84);

                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA63_85 = input.LA(1);

                         
                        int index63_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_85);

                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA63_86 = input.LA(1);

                         
                        int index63_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_86);

                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA63_87 = input.LA(1);

                         
                        int index63_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_87);

                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA63_88 = input.LA(1);

                         
                        int index63_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_88);

                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA63_89 = input.LA(1);

                         
                        int index63_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_89);

                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA63_90 = input.LA(1);

                         
                        int index63_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_90);

                        if ( s>=0 ) return s;
                        break;

                    case 64 : 
                        int LA63_91 = input.LA(1);

                         
                        int index63_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_91);

                        if ( s>=0 ) return s;
                        break;

                    case 65 : 
                        int LA63_92 = input.LA(1);

                         
                        int index63_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_92);

                        if ( s>=0 ) return s;
                        break;

                    case 66 : 
                        int LA63_93 = input.LA(1);

                         
                        int index63_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_93);

                        if ( s>=0 ) return s;
                        break;

                    case 67 : 
                        int LA63_94 = input.LA(1);

                         
                        int index63_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_94);

                        if ( s>=0 ) return s;
                        break;

                    case 68 : 
                        int LA63_95 = input.LA(1);

                         
                        int index63_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_95);

                        if ( s>=0 ) return s;
                        break;

                    case 69 : 
                        int LA63_96 = input.LA(1);

                         
                        int index63_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_96);

                        if ( s>=0 ) return s;
                        break;

                    case 70 : 
                        int LA63_97 = input.LA(1);

                         
                        int index63_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_97);

                        if ( s>=0 ) return s;
                        break;

                    case 71 : 
                        int LA63_98 = input.LA(1);

                         
                        int index63_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_98);

                        if ( s>=0 ) return s;
                        break;

                    case 72 : 
                        int LA63_99 = input.LA(1);

                         
                        int index63_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_99);

                        if ( s>=0 ) return s;
                        break;

                    case 73 : 
                        int LA63_100 = input.LA(1);

                         
                        int index63_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_100);

                        if ( s>=0 ) return s;
                        break;

                    case 74 : 
                        int LA63_101 = input.LA(1);

                         
                        int index63_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_101);

                        if ( s>=0 ) return s;
                        break;

                    case 75 : 
                        int LA63_102 = input.LA(1);

                         
                        int index63_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_102);

                        if ( s>=0 ) return s;
                        break;

                    case 76 : 
                        int LA63_103 = input.LA(1);

                         
                        int index63_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_103);

                        if ( s>=0 ) return s;
                        break;

                    case 77 : 
                        int LA63_104 = input.LA(1);

                         
                        int index63_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_104);

                        if ( s>=0 ) return s;
                        break;

                    case 78 : 
                        int LA63_105 = input.LA(1);

                         
                        int index63_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_105);

                        if ( s>=0 ) return s;
                        break;

                    case 79 : 
                        int LA63_106 = input.LA(1);

                         
                        int index63_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_106);

                        if ( s>=0 ) return s;
                        break;

                    case 80 : 
                        int LA63_107 = input.LA(1);

                         
                        int index63_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_107);

                        if ( s>=0 ) return s;
                        break;

                    case 81 : 
                        int LA63_108 = input.LA(1);

                         
                        int index63_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_108);

                        if ( s>=0 ) return s;
                        break;

                    case 82 : 
                        int LA63_109 = input.LA(1);

                         
                        int index63_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_109);

                        if ( s>=0 ) return s;
                        break;

                    case 83 : 
                        int LA63_110 = input.LA(1);

                         
                        int index63_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_110);

                        if ( s>=0 ) return s;
                        break;

                    case 84 : 
                        int LA63_111 = input.LA(1);

                         
                        int index63_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_111);

                        if ( s>=0 ) return s;
                        break;

                    case 85 : 
                        int LA63_112 = input.LA(1);

                         
                        int index63_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_112);

                        if ( s>=0 ) return s;
                        break;

                    case 86 : 
                        int LA63_113 = input.LA(1);

                         
                        int index63_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_113);

                        if ( s>=0 ) return s;
                        break;

                    case 87 : 
                        int LA63_114 = input.LA(1);

                         
                        int index63_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_114);

                        if ( s>=0 ) return s;
                        break;

                    case 88 : 
                        int LA63_115 = input.LA(1);

                         
                        int index63_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_115);

                        if ( s>=0 ) return s;
                        break;

                    case 89 : 
                        int LA63_116 = input.LA(1);

                         
                        int index63_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_116);

                        if ( s>=0 ) return s;
                        break;

                    case 90 : 
                        int LA63_117 = input.LA(1);

                         
                        int index63_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_117);

                        if ( s>=0 ) return s;
                        break;

                    case 91 : 
                        int LA63_118 = input.LA(1);

                         
                        int index63_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_118);

                        if ( s>=0 ) return s;
                        break;

                    case 92 : 
                        int LA63_119 = input.LA(1);

                         
                        int index63_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_119);

                        if ( s>=0 ) return s;
                        break;

                    case 93 : 
                        int LA63_120 = input.LA(1);

                         
                        int index63_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_120);

                        if ( s>=0 ) return s;
                        break;

                    case 94 : 
                        int LA63_121 = input.LA(1);

                         
                        int index63_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_121);

                        if ( s>=0 ) return s;
                        break;

                    case 95 : 
                        int LA63_122 = input.LA(1);

                         
                        int index63_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_122);

                        if ( s>=0 ) return s;
                        break;

                    case 96 : 
                        int LA63_123 = input.LA(1);

                         
                        int index63_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_123);

                        if ( s>=0 ) return s;
                        break;

                    case 97 : 
                        int LA63_124 = input.LA(1);

                         
                        int index63_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_124);

                        if ( s>=0 ) return s;
                        break;

                    case 98 : 
                        int LA63_125 = input.LA(1);

                         
                        int index63_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_125);

                        if ( s>=0 ) return s;
                        break;

                    case 99 : 
                        int LA63_126 = input.LA(1);

                         
                        int index63_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_126);

                        if ( s>=0 ) return s;
                        break;

                    case 100 : 
                        int LA63_127 = input.LA(1);

                         
                        int index63_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_127);

                        if ( s>=0 ) return s;
                        break;

                    case 101 : 
                        int LA63_128 = input.LA(1);

                         
                        int index63_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_128);

                        if ( s>=0 ) return s;
                        break;

                    case 102 : 
                        int LA63_129 = input.LA(1);

                         
                        int index63_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_129);

                        if ( s>=0 ) return s;
                        break;

                    case 103 : 
                        int LA63_130 = input.LA(1);

                         
                        int index63_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_130);

                        if ( s>=0 ) return s;
                        break;

                    case 104 : 
                        int LA63_131 = input.LA(1);

                         
                        int index63_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_131);

                        if ( s>=0 ) return s;
                        break;

                    case 105 : 
                        int LA63_132 = input.LA(1);

                         
                        int index63_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_132);

                        if ( s>=0 ) return s;
                        break;

                    case 106 : 
                        int LA63_137 = input.LA(1);

                         
                        int index63_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_137);

                        if ( s>=0 ) return s;
                        break;

                    case 107 : 
                        int LA63_138 = input.LA(1);

                         
                        int index63_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_138);

                        if ( s>=0 ) return s;
                        break;

                    case 108 : 
                        int LA63_139 = input.LA(1);

                         
                        int index63_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_139);

                        if ( s>=0 ) return s;
                        break;

                    case 109 : 
                        int LA63_140 = input.LA(1);

                         
                        int index63_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_140);

                        if ( s>=0 ) return s;
                        break;

                    case 110 : 
                        int LA63_141 = input.LA(1);

                         
                        int index63_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_141);

                        if ( s>=0 ) return s;
                        break;

                    case 111 : 
                        int LA63_142 = input.LA(1);

                         
                        int index63_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_142);

                        if ( s>=0 ) return s;
                        break;

                    case 112 : 
                        int LA63_143 = input.LA(1);

                         
                        int index63_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_143);

                        if ( s>=0 ) return s;
                        break;

                    case 113 : 
                        int LA63_144 = input.LA(1);

                         
                        int index63_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_144);

                        if ( s>=0 ) return s;
                        break;

                    case 114 : 
                        int LA63_145 = input.LA(1);

                         
                        int index63_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_145);

                        if ( s>=0 ) return s;
                        break;

                    case 115 : 
                        int LA63_146 = input.LA(1);

                         
                        int index63_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_146);

                        if ( s>=0 ) return s;
                        break;

                    case 116 : 
                        int LA63_147 = input.LA(1);

                         
                        int index63_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_147);

                        if ( s>=0 ) return s;
                        break;

                    case 117 : 
                        int LA63_148 = input.LA(1);

                         
                        int index63_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_148);

                        if ( s>=0 ) return s;
                        break;

                    case 118 : 
                        int LA63_149 = input.LA(1);

                         
                        int index63_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_149);

                        if ( s>=0 ) return s;
                        break;

                    case 119 : 
                        int LA63_150 = input.LA(1);

                         
                        int index63_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_150);

                        if ( s>=0 ) return s;
                        break;

                    case 120 : 
                        int LA63_155 = input.LA(1);

                         
                        int index63_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_155);

                        if ( s>=0 ) return s;
                        break;

                    case 121 : 
                        int LA63_156 = input.LA(1);

                         
                        int index63_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_156);

                        if ( s>=0 ) return s;
                        break;

                    case 122 : 
                        int LA63_157 = input.LA(1);

                         
                        int index63_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_157);

                        if ( s>=0 ) return s;
                        break;

                    case 123 : 
                        int LA63_158 = input.LA(1);

                         
                        int index63_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_158);

                        if ( s>=0 ) return s;
                        break;

                    case 124 : 
                        int LA63_159 = input.LA(1);

                         
                        int index63_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_159);

                        if ( s>=0 ) return s;
                        break;

                    case 125 : 
                        int LA63_160 = input.LA(1);

                         
                        int index63_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_160);

                        if ( s>=0 ) return s;
                        break;

                    case 126 : 
                        int LA63_161 = input.LA(1);

                         
                        int index63_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_161);

                        if ( s>=0 ) return s;
                        break;

                    case 127 : 
                        int LA63_162 = input.LA(1);

                         
                        int index63_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_162);

                        if ( s>=0 ) return s;
                        break;

                    case 128 : 
                        int LA63_163 = input.LA(1);

                         
                        int index63_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_163);

                        if ( s>=0 ) return s;
                        break;

                    case 129 : 
                        int LA63_164 = input.LA(1);

                         
                        int index63_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_164);

                        if ( s>=0 ) return s;
                        break;

                    case 130 : 
                        int LA63_165 = input.LA(1);

                         
                        int index63_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_165);

                        if ( s>=0 ) return s;
                        break;

                    case 131 : 
                        int LA63_166 = input.LA(1);

                         
                        int index63_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_166);

                        if ( s>=0 ) return s;
                        break;

                    case 132 : 
                        int LA63_167 = input.LA(1);

                         
                        int index63_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_167);

                        if ( s>=0 ) return s;
                        break;

                    case 133 : 
                        int LA63_168 = input.LA(1);

                         
                        int index63_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_168);

                        if ( s>=0 ) return s;
                        break;

                    case 134 : 
                        int LA63_173 = input.LA(1);

                         
                        int index63_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_173);

                        if ( s>=0 ) return s;
                        break;

                    case 135 : 
                        int LA63_174 = input.LA(1);

                         
                        int index63_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_174);

                        if ( s>=0 ) return s;
                        break;

                    case 136 : 
                        int LA63_175 = input.LA(1);

                         
                        int index63_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_175);

                        if ( s>=0 ) return s;
                        break;

                    case 137 : 
                        int LA63_176 = input.LA(1);

                         
                        int index63_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_176);

                        if ( s>=0 ) return s;
                        break;

                    case 138 : 
                        int LA63_177 = input.LA(1);

                         
                        int index63_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_177);

                        if ( s>=0 ) return s;
                        break;

                    case 139 : 
                        int LA63_178 = input.LA(1);

                         
                        int index63_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_178);

                        if ( s>=0 ) return s;
                        break;

                    case 140 : 
                        int LA63_179 = input.LA(1);

                         
                        int index63_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_179);

                        if ( s>=0 ) return s;
                        break;

                    case 141 : 
                        int LA63_180 = input.LA(1);

                         
                        int index63_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_180);

                        if ( s>=0 ) return s;
                        break;

                    case 142 : 
                        int LA63_181 = input.LA(1);

                         
                        int index63_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_181);

                        if ( s>=0 ) return s;
                        break;

                    case 143 : 
                        int LA63_182 = input.LA(1);

                         
                        int index63_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_182);

                        if ( s>=0 ) return s;
                        break;

                    case 144 : 
                        int LA63_183 = input.LA(1);

                         
                        int index63_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_183);

                        if ( s>=0 ) return s;
                        break;

                    case 145 : 
                        int LA63_184 = input.LA(1);

                         
                        int index63_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_184);

                        if ( s>=0 ) return s;
                        break;

                    case 146 : 
                        int LA63_185 = input.LA(1);

                         
                        int index63_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_185);

                        if ( s>=0 ) return s;
                        break;

                    case 147 : 
                        int LA63_186 = input.LA(1);

                         
                        int index63_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_186);

                        if ( s>=0 ) return s;
                        break;

                    case 148 : 
                        int LA63_191 = input.LA(1);

                         
                        int index63_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_191);

                        if ( s>=0 ) return s;
                        break;

                    case 149 : 
                        int LA63_192 = input.LA(1);

                         
                        int index63_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_192);

                        if ( s>=0 ) return s;
                        break;

                    case 150 : 
                        int LA63_193 = input.LA(1);

                         
                        int index63_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_193);

                        if ( s>=0 ) return s;
                        break;

                    case 151 : 
                        int LA63_194 = input.LA(1);

                         
                        int index63_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_194);

                        if ( s>=0 ) return s;
                        break;

                    case 152 : 
                        int LA63_195 = input.LA(1);

                         
                        int index63_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_195);

                        if ( s>=0 ) return s;
                        break;

                    case 153 : 
                        int LA63_196 = input.LA(1);

                         
                        int index63_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_196);

                        if ( s>=0 ) return s;
                        break;

                    case 154 : 
                        int LA63_197 = input.LA(1);

                         
                        int index63_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_197);

                        if ( s>=0 ) return s;
                        break;

                    case 155 : 
                        int LA63_198 = input.LA(1);

                         
                        int index63_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_198);

                        if ( s>=0 ) return s;
                        break;

                    case 156 : 
                        int LA63_199 = input.LA(1);

                         
                        int index63_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_199);

                        if ( s>=0 ) return s;
                        break;

                    case 157 : 
                        int LA63_200 = input.LA(1);

                         
                        int index63_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_200);

                        if ( s>=0 ) return s;
                        break;

                    case 158 : 
                        int LA63_201 = input.LA(1);

                         
                        int index63_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_201);

                        if ( s>=0 ) return s;
                        break;

                    case 159 : 
                        int LA63_202 = input.LA(1);

                         
                        int index63_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_202);

                        if ( s>=0 ) return s;
                        break;

                    case 160 : 
                        int LA63_203 = input.LA(1);

                         
                        int index63_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_203);

                        if ( s>=0 ) return s;
                        break;

                    case 161 : 
                        int LA63_204 = input.LA(1);

                         
                        int index63_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_204);

                        if ( s>=0 ) return s;
                        break;

                    case 162 : 
                        int LA63_209 = input.LA(1);

                         
                        int index63_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_209);

                        if ( s>=0 ) return s;
                        break;

                    case 163 : 
                        int LA63_210 = input.LA(1);

                         
                        int index63_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_210);

                        if ( s>=0 ) return s;
                        break;

                    case 164 : 
                        int LA63_211 = input.LA(1);

                         
                        int index63_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_211);

                        if ( s>=0 ) return s;
                        break;

                    case 165 : 
                        int LA63_212 = input.LA(1);

                         
                        int index63_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_212);

                        if ( s>=0 ) return s;
                        break;

                    case 166 : 
                        int LA63_213 = input.LA(1);

                         
                        int index63_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_213);

                        if ( s>=0 ) return s;
                        break;

                    case 167 : 
                        int LA63_214 = input.LA(1);

                         
                        int index63_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_214);

                        if ( s>=0 ) return s;
                        break;

                    case 168 : 
                        int LA63_215 = input.LA(1);

                         
                        int index63_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_215);

                        if ( s>=0 ) return s;
                        break;

                    case 169 : 
                        int LA63_216 = input.LA(1);

                         
                        int index63_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_216);

                        if ( s>=0 ) return s;
                        break;

                    case 170 : 
                        int LA63_217 = input.LA(1);

                         
                        int index63_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_217);

                        if ( s>=0 ) return s;
                        break;

                    case 171 : 
                        int LA63_218 = input.LA(1);

                         
                        int index63_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_218);

                        if ( s>=0 ) return s;
                        break;

                    case 172 : 
                        int LA63_219 = input.LA(1);

                         
                        int index63_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_219);

                        if ( s>=0 ) return s;
                        break;

                    case 173 : 
                        int LA63_220 = input.LA(1);

                         
                        int index63_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_220);

                        if ( s>=0 ) return s;
                        break;

                    case 174 : 
                        int LA63_221 = input.LA(1);

                         
                        int index63_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_221);

                        if ( s>=0 ) return s;
                        break;

                    case 175 : 
                        int LA63_222 = input.LA(1);

                         
                        int index63_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_222);

                        if ( s>=0 ) return s;
                        break;

                    case 176 : 
                        int LA63_227 = input.LA(1);

                         
                        int index63_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_227);

                        if ( s>=0 ) return s;
                        break;

                    case 177 : 
                        int LA63_228 = input.LA(1);

                         
                        int index63_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_228);

                        if ( s>=0 ) return s;
                        break;

                    case 178 : 
                        int LA63_229 = input.LA(1);

                         
                        int index63_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_229);

                        if ( s>=0 ) return s;
                        break;

                    case 179 : 
                        int LA63_230 = input.LA(1);

                         
                        int index63_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_230);

                        if ( s>=0 ) return s;
                        break;

                    case 180 : 
                        int LA63_231 = input.LA(1);

                         
                        int index63_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_231);

                        if ( s>=0 ) return s;
                        break;

                    case 181 : 
                        int LA63_232 = input.LA(1);

                         
                        int index63_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_232);

                        if ( s>=0 ) return s;
                        break;

                    case 182 : 
                        int LA63_233 = input.LA(1);

                         
                        int index63_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_233);

                        if ( s>=0 ) return s;
                        break;

                    case 183 : 
                        int LA63_234 = input.LA(1);

                         
                        int index63_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_234);

                        if ( s>=0 ) return s;
                        break;

                    case 184 : 
                        int LA63_235 = input.LA(1);

                         
                        int index63_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_235);

                        if ( s>=0 ) return s;
                        break;

                    case 185 : 
                        int LA63_236 = input.LA(1);

                         
                        int index63_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_236);

                        if ( s>=0 ) return s;
                        break;

                    case 186 : 
                        int LA63_237 = input.LA(1);

                         
                        int index63_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_237);

                        if ( s>=0 ) return s;
                        break;

                    case 187 : 
                        int LA63_238 = input.LA(1);

                         
                        int index63_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_238);

                        if ( s>=0 ) return s;
                        break;

                    case 188 : 
                        int LA63_239 = input.LA(1);

                         
                        int index63_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_239);

                        if ( s>=0 ) return s;
                        break;

                    case 189 : 
                        int LA63_240 = input.LA(1);

                         
                        int index63_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_240);

                        if ( s>=0 ) return s;
                        break;

                    case 190 : 
                        int LA63_241 = input.LA(1);

                         
                        int index63_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_241);

                        if ( s>=0 ) return s;
                        break;

                    case 191 : 
                        int LA63_242 = input.LA(1);

                         
                        int index63_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_242);

                        if ( s>=0 ) return s;
                        break;

                    case 192 : 
                        int LA63_247 = input.LA(1);

                         
                        int index63_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_247);

                        if ( s>=0 ) return s;
                        break;

                    case 193 : 
                        int LA63_248 = input.LA(1);

                         
                        int index63_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_248);

                        if ( s>=0 ) return s;
                        break;

                    case 194 : 
                        int LA63_249 = input.LA(1);

                         
                        int index63_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_249);

                        if ( s>=0 ) return s;
                        break;

                    case 195 : 
                        int LA63_250 = input.LA(1);

                         
                        int index63_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_250);

                        if ( s>=0 ) return s;
                        break;

                    case 196 : 
                        int LA63_251 = input.LA(1);

                         
                        int index63_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_251);

                        if ( s>=0 ) return s;
                        break;

                    case 197 : 
                        int LA63_252 = input.LA(1);

                         
                        int index63_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_252);

                        if ( s>=0 ) return s;
                        break;

                    case 198 : 
                        int LA63_253 = input.LA(1);

                         
                        int index63_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_253);

                        if ( s>=0 ) return s;
                        break;

                    case 199 : 
                        int LA63_254 = input.LA(1);

                         
                        int index63_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_254);

                        if ( s>=0 ) return s;
                        break;

                    case 200 : 
                        int LA63_255 = input.LA(1);

                         
                        int index63_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_255);

                        if ( s>=0 ) return s;
                        break;

                    case 201 : 
                        int LA63_256 = input.LA(1);

                         
                        int index63_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_256);

                        if ( s>=0 ) return s;
                        break;

                    case 202 : 
                        int LA63_257 = input.LA(1);

                         
                        int index63_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_257);

                        if ( s>=0 ) return s;
                        break;

                    case 203 : 
                        int LA63_258 = input.LA(1);

                         
                        int index63_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_258);

                        if ( s>=0 ) return s;
                        break;

                    case 204 : 
                        int LA63_259 = input.LA(1);

                         
                        int index63_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_259);

                        if ( s>=0 ) return s;
                        break;

                    case 205 : 
                        int LA63_260 = input.LA(1);

                         
                        int index63_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_260);

                        if ( s>=0 ) return s;
                        break;

                    case 206 : 
                        int LA63_261 = input.LA(1);

                         
                        int index63_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_261);

                        if ( s>=0 ) return s;
                        break;

                    case 207 : 
                        int LA63_262 = input.LA(1);

                         
                        int index63_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_262);

                        if ( s>=0 ) return s;
                        break;

                    case 208 : 
                        int LA63_263 = input.LA(1);

                         
                        int index63_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_263);

                        if ( s>=0 ) return s;
                        break;

                    case 209 : 
                        int LA63_264 = input.LA(1);

                         
                        int index63_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_264);

                        if ( s>=0 ) return s;
                        break;

                    case 210 : 
                        int LA63_265 = input.LA(1);

                         
                        int index63_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_265);

                        if ( s>=0 ) return s;
                        break;

                    case 211 : 
                        int LA63_266 = input.LA(1);

                         
                        int index63_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_266);

                        if ( s>=0 ) return s;
                        break;

                    case 212 : 
                        int LA63_267 = input.LA(1);

                         
                        int index63_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_267);

                        if ( s>=0 ) return s;
                        break;

                    case 213 : 
                        int LA63_268 = input.LA(1);

                         
                        int index63_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_268);

                        if ( s>=0 ) return s;
                        break;

                    case 214 : 
                        int LA63_269 = input.LA(1);

                         
                        int index63_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_269);

                        if ( s>=0 ) return s;
                        break;

                    case 215 : 
                        int LA63_270 = input.LA(1);

                         
                        int index63_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_270);

                        if ( s>=0 ) return s;
                        break;

                    case 216 : 
                        int LA63_271 = input.LA(1);

                         
                        int index63_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_271);

                        if ( s>=0 ) return s;
                        break;

                    case 217 : 
                        int LA63_272 = input.LA(1);

                         
                        int index63_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_272);

                        if ( s>=0 ) return s;
                        break;

                    case 218 : 
                        int LA63_273 = input.LA(1);

                         
                        int index63_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_273);

                        if ( s>=0 ) return s;
                        break;

                    case 219 : 
                        int LA63_274 = input.LA(1);

                         
                        int index63_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_274);

                        if ( s>=0 ) return s;
                        break;

                    case 220 : 
                        int LA63_275 = input.LA(1);

                         
                        int index63_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_275);

                        if ( s>=0 ) return s;
                        break;

                    case 221 : 
                        int LA63_276 = input.LA(1);

                         
                        int index63_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_276);

                        if ( s>=0 ) return s;
                        break;

                    case 222 : 
                        int LA63_277 = input.LA(1);

                         
                        int index63_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_277);

                        if ( s>=0 ) return s;
                        break;

                    case 223 : 
                        int LA63_278 = input.LA(1);

                         
                        int index63_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_278);

                        if ( s>=0 ) return s;
                        break;

                    case 224 : 
                        int LA63_279 = input.LA(1);

                         
                        int index63_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_279);

                        if ( s>=0 ) return s;
                        break;

                    case 225 : 
                        int LA63_280 = input.LA(1);

                         
                        int index63_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_280);

                        if ( s>=0 ) return s;
                        break;

                    case 226 : 
                        int LA63_281 = input.LA(1);

                         
                        int index63_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_281);

                        if ( s>=0 ) return s;
                        break;

                    case 227 : 
                        int LA63_282 = input.LA(1);

                         
                        int index63_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_282);

                        if ( s>=0 ) return s;
                        break;

                    case 228 : 
                        int LA63_283 = input.LA(1);

                         
                        int index63_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_283);

                        if ( s>=0 ) return s;
                        break;

                    case 229 : 
                        int LA63_284 = input.LA(1);

                         
                        int index63_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_284);

                        if ( s>=0 ) return s;
                        break;

                    case 230 : 
                        int LA63_285 = input.LA(1);

                         
                        int index63_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_285);

                        if ( s>=0 ) return s;
                        break;

                    case 231 : 
                        int LA63_286 = input.LA(1);

                         
                        int index63_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_286);

                        if ( s>=0 ) return s;
                        break;

                    case 232 : 
                        int LA63_287 = input.LA(1);

                         
                        int index63_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_287);

                        if ( s>=0 ) return s;
                        break;

                    case 233 : 
                        int LA63_288 = input.LA(1);

                         
                        int index63_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_288);

                        if ( s>=0 ) return s;
                        break;

                    case 234 : 
                        int LA63_289 = input.LA(1);

                         
                        int index63_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_289);

                        if ( s>=0 ) return s;
                        break;

                    case 235 : 
                        int LA63_290 = input.LA(1);

                         
                        int index63_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_290);

                        if ( s>=0 ) return s;
                        break;

                    case 236 : 
                        int LA63_291 = input.LA(1);

                         
                        int index63_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_291);

                        if ( s>=0 ) return s;
                        break;

                    case 237 : 
                        int LA63_292 = input.LA(1);

                         
                        int index63_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_292);

                        if ( s>=0 ) return s;
                        break;

                    case 238 : 
                        int LA63_293 = input.LA(1);

                         
                        int index63_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_293);

                        if ( s>=0 ) return s;
                        break;

                    case 239 : 
                        int LA63_294 = input.LA(1);

                         
                        int index63_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred110_Php()) ) {s = 44;}

                        else if ( (true) ) {s = 45;}

                         
                        input.seek(index63_294);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 63, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA66_eotS =
        "\131\uffff";
    static final String DFA66_eofS =
        "\1\2\130\uffff";
    static final String DFA66_minS =
        "\1\4\1\5\77\uffff\26\0\2\uffff";
    static final String DFA66_maxS =
        "\1\173\1\170\77\uffff\26\0\2\uffff";
    static final String DFA66_acceptS =
        "\2\uffff\1\2\125\uffff\1\1";
    static final String DFA66_specialS =
        "\101\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\uffff}>";
    static final String[] DFA66_transitionS = {
            "\4\2\3\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff\6\2\4\uffff"+
            "\4\2\1\uffff\3\2\2\uffff\4\2\1\1\1\2\4\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\4\2\2\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\2\2\2\uffff\5\2\1\uffff\1\2\2\uffff\11"+
            "\2\1\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\1"+
            "\2",
            "\1\122\5\uffff\1\117\1\uffff\1\103\3\uffff\1\116\4\uffff\1"+
            "\110\14\uffff\1\126\2\uffff\1\102\3\uffff\1\112\1\123\20\uffff"+
            "\1\113\13\uffff\1\106\1\114\4\uffff\1\104\2\uffff\1\107\1\uffff"+
            "\1\105\6\uffff\1\124\1\125\6\uffff\1\115\1\2\1\uffff\1\104\2"+
            "\uffff\1\111\1\uffff\1\104\3\uffff\1\101\10\uffff\1\120\1\121",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA66_eot = DFA.unpackEncodedString(DFA66_eotS);
    static final short[] DFA66_eof = DFA.unpackEncodedString(DFA66_eofS);
    static final char[] DFA66_min = DFA.unpackEncodedStringToUnsignedChars(DFA66_minS);
    static final char[] DFA66_max = DFA.unpackEncodedStringToUnsignedChars(DFA66_maxS);
    static final short[] DFA66_accept = DFA.unpackEncodedString(DFA66_acceptS);
    static final short[] DFA66_special = DFA.unpackEncodedString(DFA66_specialS);
    static final short[][] DFA66_transition;

    static {
        int numStates = DFA66_transitionS.length;
        DFA66_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA66_transition[i] = DFA.unpackEncodedString(DFA66_transitionS[i]);
        }
    }

    class DFA66 extends DFA {

        public DFA66(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 66;
            this.eot = DFA66_eot;
            this.eof = DFA66_eof;
            this.min = DFA66_min;
            this.max = DFA66_max;
            this.accept = DFA66_accept;
            this.special = DFA66_special;
            this.transition = DFA66_transition;
        }
        public String getDescription() {
            return "406:81: ( EQUALS listEntry )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA66_65 = input.LA(1);

                         
                        int index66_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_65);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA66_66 = input.LA(1);

                         
                        int index66_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_66);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA66_67 = input.LA(1);

                         
                        int index66_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_67);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA66_68 = input.LA(1);

                         
                        int index66_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_68);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA66_69 = input.LA(1);

                         
                        int index66_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_69);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA66_70 = input.LA(1);

                         
                        int index66_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_70);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA66_71 = input.LA(1);

                         
                        int index66_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_71);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA66_72 = input.LA(1);

                         
                        int index66_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_72);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA66_73 = input.LA(1);

                         
                        int index66_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_73);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA66_74 = input.LA(1);

                         
                        int index66_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_74);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA66_75 = input.LA(1);

                         
                        int index66_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_75);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA66_76 = input.LA(1);

                         
                        int index66_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_76);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA66_77 = input.LA(1);

                         
                        int index66_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_77);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA66_78 = input.LA(1);

                         
                        int index66_78 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_78);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA66_79 = input.LA(1);

                         
                        int index66_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_79);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA66_80 = input.LA(1);

                         
                        int index66_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_80);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA66_81 = input.LA(1);

                         
                        int index66_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_81);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA66_82 = input.LA(1);

                         
                        int index66_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_82);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA66_83 = input.LA(1);

                         
                        int index66_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_83);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA66_84 = input.LA(1);

                         
                        int index66_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_84);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA66_85 = input.LA(1);

                         
                        int index66_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_85);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA66_86 = input.LA(1);

                         
                        int index66_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred113_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index66_86);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 66, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA73_eotS =
        "\111\uffff";
    static final String DFA73_eofS =
        "\111\uffff";
    static final String DFA73_minS =
        "\1\46\1\0\1\46\104\uffff\2\0";
    static final String DFA73_maxS =
        "\1\156\1\0\1\156\104\uffff\2\0";
    static final String DFA73_acceptS =
        "\105\uffff\1\1\1\2\2\uffff";
    static final String DFA73_specialS =
        "\1\uffff\1\0\105\uffff\1\1\1\2}>";
    static final String[] DFA73_transitionS = {
            "\1\2\107\uffff\1\1",
            "\1\uffff",
            "\1\107\107\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "422:1: nameOrFunctionCall : ( name OPEN_BRACE ( expression ( COMMA expression )* )? CLOSE_BRACE -> ^( Apply name ( expression )* ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_1 = input.LA(1);

                         
                        int index73_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred127_Php()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index73_1);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA73_71 = input.LA(1);

                         
                        int index73_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred127_Php()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index73_71);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA73_72 = input.LA(1);

                         
                        int index73_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred127_Php()) ) {s = 69;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index73_72);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA74_eotS =
        "\107\uffff";
    static final String DFA74_eofS =
        "\1\uffff\1\6\105\uffff";
    static final String DFA74_minS =
        "\1\46\1\4\1\46\2\uffff\1\0\77\uffff\2\0";
    static final String DFA74_maxS =
        "\1\156\1\173\1\156\2\uffff\1\0\77\uffff\2\0";
    static final String DFA74_acceptS =
        "\3\uffff\1\1\1\2\1\uffff\1\3\100\uffff";
    static final String DFA74_specialS =
        "\5\uffff\1\0\77\uffff\1\1\1\2}>";
    static final String[] DFA74_transitionS = {
            "\1\2\107\uffff\1\1",
            "\4\6\3\uffff\3\6\2\uffff\3\6\1\uffff\1\6\1\3\6\6\4\uffff\4"+
            "\6\1\uffff\3\6\2\uffff\6\6\4\uffff\1\6\1\uffff\1\6\3\uffff\1"+
            "\6\1\uffff\1\6\2\uffff\1\6\1\5\1\6\6\uffff\4\6\2\uffff\1\6\2"+
            "\uffff\1\6\1\uffff\2\6\1\4\1\uffff\5\6\1\uffff\1\6\2\uffff\11"+
            "\6\1\uffff\2\6\2\uffff\1\6\3\uffff\4\6\1\uffff\3\6\1\uffff\1"+
            "\6",
            "\1\105\107\uffff\1\106",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA74_eot = DFA.unpackEncodedString(DFA74_eotS);
    static final short[] DFA74_eof = DFA.unpackEncodedString(DFA74_eofS);
    static final char[] DFA74_min = DFA.unpackEncodedStringToUnsignedChars(DFA74_minS);
    static final char[] DFA74_max = DFA.unpackEncodedStringToUnsignedChars(DFA74_maxS);
    static final short[] DFA74_accept = DFA.unpackEncodedString(DFA74_acceptS);
    static final short[] DFA74_special = DFA.unpackEncodedString(DFA74_specialS);
    static final short[][] DFA74_transition;

    static {
        int numStates = DFA74_transitionS.length;
        DFA74_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA74_transition[i] = DFA.unpackEncodedString(DFA74_transitionS[i]);
        }
    }

    class DFA74 extends DFA {

        public DFA74(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 74;
            this.eot = DFA74_eot;
            this.eof = DFA74_eof;
            this.min = DFA74_min;
            this.max = DFA74_max;
            this.accept = DFA74_accept;
            this.special = DFA74_special;
            this.transition = DFA74_transition;
        }
        public String getDescription() {
            return "427:1: name : ( staticMemberAccess | memberAccess | variable );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA74_5 = input.LA(1);

                         
                        int index74_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred129_Php()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index74_5);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA74_69 = input.LA(1);

                         
                        int index74_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred129_Php()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index74_69);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA74_70 = input.LA(1);

                         
                        int index74_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred129_Php()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index74_70);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 74, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA75_eotS =
        "\104\uffff";
    static final String DFA75_eofS =
        "\1\2\103\uffff";
    static final String DFA75_minS =
        "\1\4\1\46\77\uffff\1\0\2\uffff";
    static final String DFA75_maxS =
        "\1\173\1\156\77\uffff\1\0\2\uffff";
    static final String DFA75_acceptS =
        "\2\uffff\1\2\100\uffff\1\1";
    static final String DFA75_specialS =
        "\101\uffff\1\0\2\uffff}>";
    static final String[] DFA75_transitionS = {
            "\4\2\3\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff\6\2\4\uffff"+
            "\4\2\1\uffff\3\2\2\uffff\6\2\4\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\1\uffff\1\2\2\uffff\1\2\1\1\1\2\6\uffff\4\2\2\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\2\2\2\uffff\5\2\1\uffff\1\2\2\uffff\11"+
            "\2\1\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\1"+
            "\2",
            "\1\2\107\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "438:19: ( INSTANCE_MEMBER UnquotedString )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_65 = input.LA(1);

                         
                        int index75_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred130_Php()) ) {s = 67;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_65);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA78_eotS =
        "\112\uffff";
    static final String DFA78_eofS =
        "\112\uffff";
    static final String DFA78_minS =
        "\2\46\1\125\2\0\105\uffff";
    static final String DFA78_maxS =
        "\2\156\1\125\2\0\105\uffff";
    static final String DFA78_acceptS =
        "\6\uffff\1\1\100\uffff\1\2\1\3\1\4";
    static final String DFA78_specialS =
        "\2\uffff\1\0\1\1\1\2\105\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\1\107\uffff\1\2",
            "\1\3\107\uffff\1\4",
            "\1\6",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "442:1: arrayOrUnquotedStringOrFunctionCall : ( arrayAccess ( EQUALS ^ assignment )? | name ( EQUALS | AssignmentOperator | ConcatAssigmentOperator ) ^ assignment | objectNameOrMethod INSTANCE_MEMBER arrayOrUnquotedStringOrFunctionCall -> ^( INSTANCE_MEMBER objectNameOrMethod arrayOrUnquotedStringOrFunctionCall ) | nameOrFunctionCall );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_2 = input.LA(1);

                         
                        int index78_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA78_2==OPEN_SQUARE_BRACE) ) {s = 6;}

                        else if ( (synpred136_Php()) ) {s = 71;}

                        else if ( (synpred137_Php()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index78_2);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA78_3 = input.LA(1);

                         
                        int index78_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred133_Php()) ) {s = 6;}

                        else if ( (synpred136_Php()) ) {s = 71;}

                        else if ( (synpred137_Php()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index78_3);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA78_4 = input.LA(1);

                         
                        int index78_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred133_Php()) ) {s = 6;}

                        else if ( (synpred136_Php()) ) {s = 71;}

                        else if ( (synpred137_Php()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index78_4);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA77_eotS =
        "\131\uffff";
    static final String DFA77_eofS =
        "\1\2\130\uffff";
    static final String DFA77_minS =
        "\1\4\1\5\77\uffff\26\0\2\uffff";
    static final String DFA77_maxS =
        "\1\173\1\170\77\uffff\26\0\2\uffff";
    static final String DFA77_acceptS =
        "\2\uffff\1\2\125\uffff\1\1";
    static final String DFA77_specialS =
        "\101\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\uffff}>";
    static final String[] DFA77_transitionS = {
            "\4\2\3\uffff\3\2\2\uffff\3\2\1\uffff\1\2\1\uffff\6\2\4\uffff"+
            "\4\2\1\uffff\3\2\2\uffff\4\2\1\1\1\2\4\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\1\uffff\1\2\2\uffff\3\2\6\uffff\4\2\2\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\2\2\2\uffff\5\2\1\uffff\1\2\2\uffff\11"+
            "\2\1\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\1"+
            "\2",
            "\1\122\5\uffff\1\117\1\uffff\1\103\3\uffff\1\116\4\uffff\1"+
            "\110\14\uffff\1\126\2\uffff\1\102\3\uffff\1\112\1\123\20\uffff"+
            "\1\113\13\uffff\1\106\1\114\4\uffff\1\104\2\uffff\1\107\1\uffff"+
            "\1\105\6\uffff\1\124\1\125\6\uffff\1\115\1\2\1\uffff\1\104\2"+
            "\uffff\1\111\1\uffff\1\104\3\uffff\1\101\10\uffff\1\120\1\121",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "443:19: ( EQUALS ^ assignment )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_65 = input.LA(1);

                         
                        int index77_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_65);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA77_66 = input.LA(1);

                         
                        int index77_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_66);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA77_67 = input.LA(1);

                         
                        int index77_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_67);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA77_68 = input.LA(1);

                         
                        int index77_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_68);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA77_69 = input.LA(1);

                         
                        int index77_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_69);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA77_70 = input.LA(1);

                         
                        int index77_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_70);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA77_71 = input.LA(1);

                         
                        int index77_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_71);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA77_72 = input.LA(1);

                         
                        int index77_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_72);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA77_73 = input.LA(1);

                         
                        int index77_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_73);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA77_74 = input.LA(1);

                         
                        int index77_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_74);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA77_75 = input.LA(1);

                         
                        int index77_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_75);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA77_76 = input.LA(1);

                         
                        int index77_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_76);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA77_77 = input.LA(1);

                         
                        int index77_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_77);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA77_78 = input.LA(1);

                         
                        int index77_78 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_78);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA77_79 = input.LA(1);

                         
                        int index77_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_79);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA77_80 = input.LA(1);

                         
                        int index77_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_80);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA77_81 = input.LA(1);

                         
                        int index77_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_81);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA77_82 = input.LA(1);

                         
                        int index77_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_82);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA77_83 = input.LA(1);

                         
                        int index77_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_83);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA77_84 = input.LA(1);

                         
                        int index77_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_84);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA77_85 = input.LA(1);

                         
                        int index77_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_85);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA77_86 = input.LA(1);

                         
                        int index77_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred132_Php()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_86);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA81_eotS =
        "\u0691\uffff";
    static final String DFA81_eofS =
        "\1\6\u0690\uffff";
    static final String DFA81_minS =
        "\1\4\1\uffff\100\0\u064f\uffff";
    static final String DFA81_maxS =
        "\1\173\1\uffff\100\0\u064f\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\1\102\uffff\1\2\u064c\uffff";
    static final String DFA81_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
        "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\u064f"+
        "\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\42\1\40\1\100\1\61\3\uffff\1\35\1\57\1\21\2\uffff\1\4\1\34"+
            "\1\55\1\uffff\1\43\1\uffff\1\26\1\76\1\51\1\101\1\77\1\3\4\uffff"+
            "\1\65\1\57\1\54\1\16\1\uffff\1\45\1\20\1\63\2\uffff\1\30\1\13"+
            "\1\52\1\53\1\56\1\66\4\uffff\1\61\1\uffff\1\47\3\uffff\1\10"+
            "\1\uffff\1\31\2\uffff\1\44\1\2\1\60\6\uffff\1\24\1\32\1\70\1"+
            "\71\2\uffff\1\22\2\uffff\1\25\1\uffff\1\23\1\41\1\1\1\uffff"+
            "\1\61\1\67\1\63\1\14\1\15\1\uffff\1\7\2\uffff\1\72\1\11\1\33"+
            "\1\12\1\5\1\62\1\46\1\64\1\27\1\uffff\1\62\1\50\2\uffff\1\17"+
            "\3\uffff\1\73\1\75\1\74\1\73\1\uffff\1\36\1\37\1\75\1\uffff"+
            "\1\74",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "450:65: ( ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )* )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_2 = input.LA(1);

                         
                        int index81_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_2);

                        if ( s>=0 ) return s;
                        break;

                    case 1 : 
                        int LA81_3 = input.LA(1);

                         
                        int index81_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_3);

                        if ( s>=0 ) return s;
                        break;

                    case 2 : 
                        int LA81_4 = input.LA(1);

                         
                        int index81_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_4);

                        if ( s>=0 ) return s;
                        break;

                    case 3 : 
                        int LA81_5 = input.LA(1);

                         
                        int index81_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_5);

                        if ( s>=0 ) return s;
                        break;

                    case 4 : 
                        int LA81_6 = input.LA(1);

                         
                        int index81_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_6);

                        if ( s>=0 ) return s;
                        break;

                    case 5 : 
                        int LA81_7 = input.LA(1);

                         
                        int index81_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_7);

                        if ( s>=0 ) return s;
                        break;

                    case 6 : 
                        int LA81_8 = input.LA(1);

                         
                        int index81_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_8);

                        if ( s>=0 ) return s;
                        break;

                    case 7 : 
                        int LA81_9 = input.LA(1);

                         
                        int index81_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_9);

                        if ( s>=0 ) return s;
                        break;

                    case 8 : 
                        int LA81_10 = input.LA(1);

                         
                        int index81_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_10);

                        if ( s>=0 ) return s;
                        break;

                    case 9 : 
                        int LA81_11 = input.LA(1);

                         
                        int index81_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_11);

                        if ( s>=0 ) return s;
                        break;

                    case 10 : 
                        int LA81_12 = input.LA(1);

                         
                        int index81_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_12);

                        if ( s>=0 ) return s;
                        break;

                    case 11 : 
                        int LA81_13 = input.LA(1);

                         
                        int index81_13 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_13);

                        if ( s>=0 ) return s;
                        break;

                    case 12 : 
                        int LA81_14 = input.LA(1);

                         
                        int index81_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_14);

                        if ( s>=0 ) return s;
                        break;

                    case 13 : 
                        int LA81_15 = input.LA(1);

                         
                        int index81_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_15);

                        if ( s>=0 ) return s;
                        break;

                    case 14 : 
                        int LA81_16 = input.LA(1);

                         
                        int index81_16 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_16);

                        if ( s>=0 ) return s;
                        break;

                    case 15 : 
                        int LA81_17 = input.LA(1);

                         
                        int index81_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_17);

                        if ( s>=0 ) return s;
                        break;

                    case 16 : 
                        int LA81_18 = input.LA(1);

                         
                        int index81_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_18);

                        if ( s>=0 ) return s;
                        break;

                    case 17 : 
                        int LA81_19 = input.LA(1);

                         
                        int index81_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_19);

                        if ( s>=0 ) return s;
                        break;

                    case 18 : 
                        int LA81_20 = input.LA(1);

                         
                        int index81_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_20);

                        if ( s>=0 ) return s;
                        break;

                    case 19 : 
                        int LA81_21 = input.LA(1);

                         
                        int index81_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_21);

                        if ( s>=0 ) return s;
                        break;

                    case 20 : 
                        int LA81_22 = input.LA(1);

                         
                        int index81_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_22);

                        if ( s>=0 ) return s;
                        break;

                    case 21 : 
                        int LA81_23 = input.LA(1);

                         
                        int index81_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_23);

                        if ( s>=0 ) return s;
                        break;

                    case 22 : 
                        int LA81_24 = input.LA(1);

                         
                        int index81_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_24);

                        if ( s>=0 ) return s;
                        break;

                    case 23 : 
                        int LA81_25 = input.LA(1);

                         
                        int index81_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_25);

                        if ( s>=0 ) return s;
                        break;

                    case 24 : 
                        int LA81_26 = input.LA(1);

                         
                        int index81_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_26);

                        if ( s>=0 ) return s;
                        break;

                    case 25 : 
                        int LA81_27 = input.LA(1);

                         
                        int index81_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_27);

                        if ( s>=0 ) return s;
                        break;

                    case 26 : 
                        int LA81_28 = input.LA(1);

                         
                        int index81_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_28);

                        if ( s>=0 ) return s;
                        break;

                    case 27 : 
                        int LA81_29 = input.LA(1);

                         
                        int index81_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_29);

                        if ( s>=0 ) return s;
                        break;

                    case 28 : 
                        int LA81_30 = input.LA(1);

                         
                        int index81_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_30);

                        if ( s>=0 ) return s;
                        break;

                    case 29 : 
                        int LA81_31 = input.LA(1);

                         
                        int index81_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_31);

                        if ( s>=0 ) return s;
                        break;

                    case 30 : 
                        int LA81_32 = input.LA(1);

                         
                        int index81_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_32);

                        if ( s>=0 ) return s;
                        break;

                    case 31 : 
                        int LA81_33 = input.LA(1);

                         
                        int index81_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_33);

                        if ( s>=0 ) return s;
                        break;

                    case 32 : 
                        int LA81_34 = input.LA(1);

                         
                        int index81_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_34);

                        if ( s>=0 ) return s;
                        break;

                    case 33 : 
                        int LA81_35 = input.LA(1);

                         
                        int index81_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_35);

                        if ( s>=0 ) return s;
                        break;

                    case 34 : 
                        int LA81_36 = input.LA(1);

                         
                        int index81_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_36);

                        if ( s>=0 ) return s;
                        break;

                    case 35 : 
                        int LA81_37 = input.LA(1);

                         
                        int index81_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_37);

                        if ( s>=0 ) return s;
                        break;

                    case 36 : 
                        int LA81_38 = input.LA(1);

                         
                        int index81_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_38);

                        if ( s>=0 ) return s;
                        break;

                    case 37 : 
                        int LA81_39 = input.LA(1);

                         
                        int index81_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_39);

                        if ( s>=0 ) return s;
                        break;

                    case 38 : 
                        int LA81_40 = input.LA(1);

                         
                        int index81_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_40);

                        if ( s>=0 ) return s;
                        break;

                    case 39 : 
                        int LA81_41 = input.LA(1);

                         
                        int index81_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_41);

                        if ( s>=0 ) return s;
                        break;

                    case 40 : 
                        int LA81_42 = input.LA(1);

                         
                        int index81_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_42);

                        if ( s>=0 ) return s;
                        break;

                    case 41 : 
                        int LA81_43 = input.LA(1);

                         
                        int index81_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_43);

                        if ( s>=0 ) return s;
                        break;

                    case 42 : 
                        int LA81_44 = input.LA(1);

                         
                        int index81_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_44);

                        if ( s>=0 ) return s;
                        break;

                    case 43 : 
                        int LA81_45 = input.LA(1);

                         
                        int index81_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_45);

                        if ( s>=0 ) return s;
                        break;

                    case 44 : 
                        int LA81_46 = input.LA(1);

                         
                        int index81_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_46);

                        if ( s>=0 ) return s;
                        break;

                    case 45 : 
                        int LA81_47 = input.LA(1);

                         
                        int index81_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_47);

                        if ( s>=0 ) return s;
                        break;

                    case 46 : 
                        int LA81_48 = input.LA(1);

                         
                        int index81_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_48);

                        if ( s>=0 ) return s;
                        break;

                    case 47 : 
                        int LA81_49 = input.LA(1);

                         
                        int index81_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_49);

                        if ( s>=0 ) return s;
                        break;

                    case 48 : 
                        int LA81_50 = input.LA(1);

                         
                        int index81_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_50);

                        if ( s>=0 ) return s;
                        break;

                    case 49 : 
                        int LA81_51 = input.LA(1);

                         
                        int index81_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_51);

                        if ( s>=0 ) return s;
                        break;

                    case 50 : 
                        int LA81_52 = input.LA(1);

                         
                        int index81_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_52);

                        if ( s>=0 ) return s;
                        break;

                    case 51 : 
                        int LA81_53 = input.LA(1);

                         
                        int index81_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_53);

                        if ( s>=0 ) return s;
                        break;

                    case 52 : 
                        int LA81_54 = input.LA(1);

                         
                        int index81_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_54);

                        if ( s>=0 ) return s;
                        break;

                    case 53 : 
                        int LA81_55 = input.LA(1);

                         
                        int index81_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_55);

                        if ( s>=0 ) return s;
                        break;

                    case 54 : 
                        int LA81_56 = input.LA(1);

                         
                        int index81_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_56);

                        if ( s>=0 ) return s;
                        break;

                    case 55 : 
                        int LA81_57 = input.LA(1);

                         
                        int index81_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_57);

                        if ( s>=0 ) return s;
                        break;

                    case 56 : 
                        int LA81_58 = input.LA(1);

                         
                        int index81_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_58);

                        if ( s>=0 ) return s;
                        break;

                    case 57 : 
                        int LA81_59 = input.LA(1);

                         
                        int index81_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_59);

                        if ( s>=0 ) return s;
                        break;

                    case 58 : 
                        int LA81_60 = input.LA(1);

                         
                        int index81_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_60);

                        if ( s>=0 ) return s;
                        break;

                    case 59 : 
                        int LA81_61 = input.LA(1);

                         
                        int index81_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_61);

                        if ( s>=0 ) return s;
                        break;

                    case 60 : 
                        int LA81_62 = input.LA(1);

                         
                        int index81_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_62);

                        if ( s>=0 ) return s;
                        break;

                    case 61 : 
                        int LA81_63 = input.LA(1);

                         
                        int index81_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_63);

                        if ( s>=0 ) return s;
                        break;

                    case 62 : 
                        int LA81_64 = input.LA(1);

                         
                        int index81_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_64);

                        if ( s>=0 ) return s;
                        break;

                    case 63 : 
                        int LA81_65 = input.LA(1);

                         
                        int index81_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred140_Php()) ) {s = 1;}

                        else if ( (true) ) {s = 68;}

                         
                        input.seek(index81_65);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA80_eotS =
        "\102\uffff";
    static final String DFA80_eofS =
        "\1\1\101\uffff";
    static final String DFA80_minS =
        "\1\4\101\uffff";
    static final String DFA80_maxS =
        "\1\173\101\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\2\77\uffff\1\1";
    static final String DFA80_specialS =
        "\102\uffff}>";
    static final String[] DFA80_transitionS = {
            "\4\1\3\uffff\3\1\2\uffff\3\1\1\uffff\1\1\1\uffff\6\1\4\uffff"+
            "\4\1\1\uffff\3\1\2\uffff\6\1\4\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\1\uffff\1\1\2\uffff\3\1\6\uffff\4\1\2\uffff\1\1\2\uffff"+
            "\1\1\1\uffff\2\1\1\101\1\uffff\5\1\1\uffff\1\1\2\uffff\11\1"+
            "\1\uffff\2\1\2\uffff\1\1\3\uffff\4\1\1\uffff\3\1\1\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "()* loopback of 450:66: ( OPEN_SQUARE_BRACE expression CLOSE_SQUARE_BRACE )*";
        }
    }
 

    public static final BitSet FOLLOW_prog_in_compilationUnit230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_prog243 = new BitSet(new long[]{0x94400C6800532832L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_ignoreStatement_in_statement256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStatement_in_statement264 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BodyString_in_statement267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_statement275 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_statement277 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_statement279 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_statement282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracketedBlock_in_statement296 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_statement299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDefinition_in_statement310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_complexStatement_in_statement318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStatement_in_statement326 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_statement329 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_bracketedBlock349 = new BitSet(new long[]{0x94400C6801532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_bracketedBlock351 = new BitSet(new long[]{0x94400C6801532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_bracketedBlock354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classModifier_in_classDefinition380 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_CLASS_in_classDefinition390 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_className_in_classDefinition392 = new BitSet(new long[]{0x0004000000000000L,0x0000000020100000L});
    public static final BitSet FOLLOW_extendsclass_in_classDefinition400 = new BitSet(new long[]{0x0000000000000000L,0x0000000020100000L});
    public static final BitSet FOLLOW_classImplements_in_classDefinition410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_classDefinition415 = new BitSet(new long[]{0x0040004021000110L,0x0440800000000000L});
    public static final BitSet FOLLOW_classMember_in_classDefinition423 = new BitSet(new long[]{0x0040004021000110L,0x0440800000000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_classDefinition428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UnquotedString_in_className476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Extends_in_extendsclass494 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_extendsclass497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignoreStatement_in_classImplements520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldModifier_in_classMember537 = new BitSet(new long[]{0x0040000000000110L,0x0440000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_classMember540 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_classMember542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_parametersDefinition_in_classMember544 = new BitSet(new long[]{0x0000000000000000L,0x0000001000100000L});
    public static final BitSet FOLLOW_bracketedBlock_in_classMember547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_classMember551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_definitionAttribute_in_classMember588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VAR_in_definitionAttribute613 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_definitionAttribute615 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_definitionAttribute617 = new BitSet(new long[]{0x0000400000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_definitionAttribute620 = new BitSet(new long[]{0x1000040000020800L,0x0180410400000200L});
    public static final BitSet FOLLOW_value_in_definitionAttribute622 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_definitionAttribute626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_definitionAttribute650 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_definitionAttribute652 = new BitSet(new long[]{0x0000400000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_definitionAttribute655 = new BitSet(new long[]{0x1000040000020800L,0x0180410400000200L});
    public static final BitSet FOLLOW_value_in_definitionAttribute657 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_definitionAttribute661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldModifier_in_definitionAttribute680 = new BitSet(new long[]{0x0000004000000110L,0x0440000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_definitionAttribute684 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_definitionAttribute686 = new BitSet(new long[]{0x0000400000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_definitionAttribute690 = new BitSet(new long[]{0x1000040000020800L,0x0180410400000200L});
    public static final BitSet FOLLOW_value_in_definitionAttribute692 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_definitionAttribute696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ABSTRACT_in_classModifier738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_value783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UnquotedString_in_value791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_value799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStatement_in_complexStatement816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forHeader_in_complexStatement829 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_complexStatement831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forHeader_in_complexStatement854 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_complexStatement856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileCondition_in_complexStatement879 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_complexStatement881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DO_in_complexStatement899 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_complexStatement901 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_whileCondition_in_complexStatement903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SWITCH_in_complexStatement921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_complexStatement923 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_complexStatement925 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_complexStatement927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_complexStatement929 = new BitSet(new long[]{0x0000000401040000L});
    public static final BitSet FOLLOW_cases_in_complexStatement930 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_complexStatement931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDefinition_in_complexStatement949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_complexStatement957 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_complexStatement959 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_catchStatement_in_complexStatement961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileCondition_in_catchStatement993 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_catchStatement995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GLOBAL_in_simpleStatement1020 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simpleStatement1023 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_COMMA_in_simpleStatement1026 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simpleStatement1029 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_RETURN_in_simpleStatement1039 = new BitSet(new long[]{0x10000C4800422822L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_simpleStatement1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleRequire_in_simpleStatement1051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputFunctions_in_simpleStatement1076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignoreOthers_in_simpleStatement1105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_simpleStatement1115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RequireOperator_in_simpleRequire1132 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_simpleRequire1135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_ifStatement1163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_ifStatement1165 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_ifStatement1167 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_ifStatement1169 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_ifStatement1171 = new BitSet(new long[]{0x0000300000000002L});
    public static final BitSet FOLLOW_conditional_in_ifStatement1173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_conditional1209 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_conditional1211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_IF_in_conditional1232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_conditional1234 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_conditional1236 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_conditional1238 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_conditional1240 = new BitSet(new long[]{0x0000300000000002L});
    public static final BitSet FOLLOW_conditional_in_conditional1242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignoreStatement_in_forHeader1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignoreStatement_in_whileCondition1290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignoreStatement_in_ignoreOthers1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_casestatement_in_cases1325 = new BitSet(new long[]{0x0000000400040002L});
    public static final BitSet FOLLOW_defaultcase_in_cases1329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_casestatement1347 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_casestatement1350 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_casestatement1352 = new BitSet(new long[]{0x94400C6800532832L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_casestatement1355 = new BitSet(new long[]{0x94400C6800532832L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_DEFAULT_in_defaultcase1375 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_defaultcase1378 = new BitSet(new long[]{0x94400C6800532832L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_defaultcase1381 = new BitSet(new long[]{0x94400C6800532832L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_FUNCTION_in_functionDefinition1400 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_functionDefinition1402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_parametersDefinition_in_functionDefinition1404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_bracketedBlock_in_functionDefinition1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_parametersDefinition1444 = new BitSet(new long[]{0x0000004000800820L,0x0000400000000000L});
    public static final BitSet FOLLOW_paramDef_in_parametersDefinition1447 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_COMMA_in_parametersDefinition1450 = new BitSet(new long[]{0x0000004000000820L,0x0000400000000000L});
    public static final BitSet FOLLOW_paramDef_in_parametersDefinition1452 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_parametersDefinition1458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_paramName_in_paramDef1494 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_EQUALS_in_paramDef1497 = new BitSet(new long[]{0x1000044000020820L,0x0180410400000200L});
    public static final BitSet FOLLOW_atomOrReference_in_paramDef1500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_paramName1519 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_paramName1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_paramName1530 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_paramName1532 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_paramName1534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ECHO_in_outputFunctions1563 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_commaList_in_outputFunctions1566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRINT_in_outputFunctions1574 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_commaList_in_outputFunctions1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRINTF_in_outputFunctions1585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_outputFunctions1588 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_commaList_in_outputFunctions1591 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_outputFunctions1593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIE_in_outputFunctions1602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_outputFunctions1605 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_commaList_in_outputFunctions1608 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_outputFunctions1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_commaList1628 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_COMMA_in_commaList1631 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_commaList1634 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_weakLogicalOr_in_expression1658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weakLogicalXor_in_weakLogicalOr1675 = new BitSet(new long[]{0x0000000000000002L,0x0208000000000000L});
    public static final BitSet FOLLOW_set_in_weakLogicalOr1678 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_weakLogicalXor_in_weakLogicalOr1685 = new BitSet(new long[]{0x0000000000000002L,0x0208000000000000L});
    public static final BitSet FOLLOW_weakLogicalAnd_in_weakLogicalXor1704 = new BitSet(new long[]{0x0000000000000002L,0x0810000000000000L});
    public static final BitSet FOLLOW_set_in_weakLogicalXor1707 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_weakLogicalAnd_in_weakLogicalXor1714 = new BitSet(new long[]{0x0000000000000002L,0x0810000000000000L});
    public static final BitSet FOLLOW_assignment_in_weakLogicalAnd1741 = new BitSet(new long[]{0x0000000000000002L,0x0024000000000000L});
    public static final BitSet FOLLOW_set_in_weakLogicalAnd1744 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_weakLogicalAnd1751 = new BitSet(new long[]{0x0000000000000002L,0x0024000000000000L});
    public static final BitSet FOLLOW_name_in_assignment1770 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_EQUALS_in_assignment1772 = new BitSet(new long[]{0x10000C4800422820L,0x0180452C0C0A4300L});
    public static final BitSet FOLLOW_simpleRequire_in_assignment1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_assignment1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_assignment1795 = new BitSet(new long[]{0x0000000200001000L});
    public static final BitSet FOLLOW_set_in_assignment1798 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_assignment1807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ternary_in_assignment1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOr_in_ternary1833 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_ternary1835 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_ternary1837 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_ternary1839 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_ternary1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOr_in_ternary1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalAnd_in_logicalOr1883 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_logicalOr1886 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_logicalAnd_in_logicalOr1889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_bitwiseOr_in_logicalAnd1908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_logicalAnd1911 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_bitwiseOr_in_logicalAnd1914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_bitWiseAnd_in_bitwiseOr1937 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_PIPE_in_bitwiseOr1940 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_bitWiseAnd_in_bitwiseOr1943 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_equalityCheck_in_bitWiseAnd1962 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AMPERSAND_in_bitWiseAnd1965 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_equalityCheck_in_bitWiseAnd1968 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_comparisionCheck_in_equalityCheck1987 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_EqualityOperator_in_equalityCheck1990 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_comparisionCheck_in_equalityCheck1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bitWiseShift_in_comparisionCheck2016 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_ComparisionOperator_in_comparisionCheck2019 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_bitWiseShift_in_comparisionCheck2022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addition_in_bitWiseShift2041 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_ShiftOperator_in_bitWiseShift2044 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_addition_in_bitWiseShift2047 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_multiplication_in_addition2070 = new BitSet(new long[]{0x0000008000000002L,0x0000000002004000L});
    public static final BitSet FOLLOW_set_in_addition2073 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_multiplication_in_addition2086 = new BitSet(new long[]{0x0000008000000002L,0x0000000002004000L});
    public static final BitSet FOLLOW_logicalNot_in_multiplication2105 = new BitSet(new long[]{0x0010000000000082L,0x0000000000800000L});
    public static final BitSet FOLLOW_set_in_multiplication2108 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_logicalNot_in_multiplication2121 = new BitSet(new long[]{0x0010000000000082L,0x0000000000800000L});
    public static final BitSet FOLLOW_BANG_in_logicalNot2140 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_logicalNot_in_logicalNot2143 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_EQUALS_in_logicalNot2146 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_logicalNot_in_logicalNot2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOf_in_logicalNot2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_negateOrCast_in_instanceOf2176 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_OF_in_instanceOf2179 = new BitSet(new long[]{0x10000C4800420820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_negateOrCast_in_instanceOf2182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_negateOrCast2201 = new BitSet(new long[]{0x10000C4800420820L,0x018041040C020300L});
    public static final BitSet FOLLOW_increment_in_negateOrCast2214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_negateOrCast2222 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_negateOrCast2224 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_negateOrCast2226 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_negateOrCast2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_negateOrCast2255 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_weakLogicalAnd_in_negateOrCast2258 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_negateOrCast2260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_in_negateOrCast2269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IncrementOperator_in_increment2286 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_increment2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_increment2306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_IncrementOperator_in_increment2308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_newOrClone_in_increment2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEW_in_newOrClone2343 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_nameOrFunctionCall_in_newOrClone2346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLONE_in_newOrClone2354 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_newOrClone2357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomOrReference_in_newOrClone2365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputFunctions_in_newOrClone2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_atomOrReference2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_reference_in_atomOrReference2398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ArrayWord_in_arrayDeclaration2415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_arrayDeclaration2417 = new BitSet(new long[]{0x10000C4800C22820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_arrayEntry_in_arrayDeclaration2420 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_COMMA_in_arrayDeclaration2423 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_arrayEntry_in_arrayDeclaration2425 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_arrayDeclaration2431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValuePair_in_arrayEntry2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayEntry2462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_keyValuePair2482 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ARRAY_ASSIGN_in_keyValuePair2484 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_keyValuePair2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_listDefinition2513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_listDefinition2515 = new BitSet(new long[]{0x1000044000820820L,0x0180410400000200L});
    public static final BitSet FOLLOW_atomOrReference_in_listDefinition2518 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_COMMA_in_listDefinition2521 = new BitSet(new long[]{0x1000044000020820L,0x0180410400000200L});
    public static final BitSet FOLLOW_atomOrReference_in_listDefinition2523 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_listDefinition2529 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_EQUALS_in_listDefinition2532 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_listEntry_in_listDefinition2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_listEntry2575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_listEntry2583 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_listEntry2585 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_COMMA_in_listEntry2588 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_listEntry2590 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_listEntry2594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SingleQuotedString_in_atom2615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DoubleQuotedString_in_atom2619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HereDoc_in_atom2623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Integer_in_atom2627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Real_in_atom2631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Boolean_in_atom2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayDeclaration_in_atom2639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listDefinition_in_atom2643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_atom2647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_reference2664 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_nameOrFunctionCall_in_reference2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameOrFunctionCall_in_reference2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_nameOrFunctionCall2692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_nameOrFunctionCall2694 = new BitSet(new long[]{0x10000C4800C22820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_nameOrFunctionCall2697 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_COMMA_in_nameOrFunctionCall2700 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_nameOrFunctionCall2702 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_nameOrFunctionCall2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_nameOrFunctionCall2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_staticMemberAccess_in_name2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberAccess_in_name2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_name2760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UnquotedString_in_staticMemberAccess2781 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_CLASS_MEMBER_in_staticMemberAccess2783 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_nameOrFunctionCall_in_staticMemberAccess2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccess_in_memberAccess2803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_INSTANCE_MEMBER_in_memberAccess2806 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_memberAccess2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_memberAccess2815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INSTANCE_MEMBER_in_memberAccess2817 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_memberAccess2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccess_in_arrayOrUnquotedStringOrFunctionCall2846 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_EQUALS_in_arrayOrUnquotedStringOrFunctionCall2849 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_arrayOrUnquotedStringOrFunctionCall2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_arrayOrUnquotedStringOrFunctionCall2862 = new BitSet(new long[]{0x0000400200001000L});
    public static final BitSet FOLLOW_set_in_arrayOrUnquotedStringOrFunctionCall2864 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_arrayOrUnquotedStringOrFunctionCall2877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectNameOrMethod_in_arrayOrUnquotedStringOrFunctionCall2887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INSTANCE_MEMBER_in_arrayOrUnquotedStringOrFunctionCall2889 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_arrayOrUnquotedStringOrFunctionCall2891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nameOrFunctionCall_in_arrayOrUnquotedStringOrFunctionCall2909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_in_arrayAccess2926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_OPEN_SQUARE_BRACE_in_arrayAccess2928 = new BitSet(new long[]{0x10000C4802422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_arrayAccess2930 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_SQUARE_BRACE_in_arrayAccess2933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_OPEN_SQUARE_BRACE_in_arrayAccess2937 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_arrayAccess2939 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_SQUARE_BRACE_in_arrayAccess2941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_nameOrFunctionCall_in_objectNameOrMethod2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_variable2986 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_variable_in_variable2989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UnquotedString_in_variable2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_MEMBER_in_instanceMember3013 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_instanceMember3015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PhpStatement_in_ignoreStatement3040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ignoreStatement_in_synpred2_Php256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleStatement_in_synpred4_Php264 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_BodyString_in_synpred4_Php267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_CURLY_BRACE_in_synpred6_Php275 = new BitSet(new long[]{0x94400C6800532830L,0x01804D6E2C1A4300L});
    public static final BitSet FOLLOW_statement_in_synpred6_Php277 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_CLOSE_CURLY_BRACE_in_synpred6_Php279 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred6_Php282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracketedBlock_in_synpred8_Php296 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred8_Php299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_complexStatement_in_synpred10_Php318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldModifier_in_synpred19_Php537 = new BitSet(new long[]{0x0040000000000110L,0x0440000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_synpred19_Php540 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_synpred19_Php542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_parametersDefinition_in_synpred19_Php544 = new BitSet(new long[]{0x0000000000000000L,0x0000001000100000L});
    public static final BitSet FOLLOW_bracketedBlock_in_synpred19_Php547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_synpred19_Php551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_synpred29_Php783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_synpred32_Php825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_EACH_in_synpred33_Php850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_synpred34_Php875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred41_Php1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_in_synpred52_Php1173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_synpred53_Php1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_IF_in_synpred54_Php1228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditional_in_synpred55_Php1242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred69_Php1631 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_synpred69_Php1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred71_Php1678 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_weakLogicalXor_in_synpred71_Php1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred73_Php1707 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_weakLogicalAnd_in_synpred73_Php1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred75_Php1744 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_synpred75_Php1751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RequireOperator_in_synpred76_Php1777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred77_Php1770 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_EQUALS_in_synpred77_Php1772 = new BitSet(new long[]{0x10000C4800422820L,0x0180452C0C0A4300L});
    public static final BitSet FOLLOW_simpleRequire_in_synpred77_Php1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_in_synpred77_Php1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred79_Php1795 = new BitSet(new long[]{0x0000000200001000L});
    public static final BitSet FOLLOW_set_in_synpred79_Php1798 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_synpred79_Php1807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_logicalOr_in_synpred80_Php1833 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_QUESTION_MARK_in_synpred80_Php1835 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_synpred80_Php1837 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_synpred80_Php1839 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_synpred80_Php1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_OR_in_synpred81_Php1886 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_logicalAnd_in_synpred81_Php1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LOGICAL_AND_in_synpred82_Php1911 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_bitwiseOr_in_synpred82_Php1914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PIPE_in_synpred83_Php1940 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_bitWiseAnd_in_synpred83_Php1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPERSAND_in_synpred84_Php1965 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_equalityCheck_in_synpred84_Php1968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EqualityOperator_in_synpred85_Php1990 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_comparisionCheck_in_synpred85_Php1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ComparisionOperator_in_synpred86_Php2019 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_bitWiseShift_in_synpred86_Php2022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ShiftOperator_in_synpred87_Php2044 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_addition_in_synpred87_Php2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred90_Php2073 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_multiplication_in_synpred90_Php2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred93_Php2108 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_logicalNot_in_synpred93_Php2121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_synpred94_Php2146 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_logicalNot_in_synpred94_Php2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_OF_in_synpred96_Php2179 = new BitSet(new long[]{0x10000C4800420820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_negateOrCast_in_synpred96_Php2182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_synpred100_Php2222 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_synpred100_Php2224 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_synpred100_Php2226 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_synpred100_Php2228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_synpred101_Php2255 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_weakLogicalAnd_in_synpred101_Php2258 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_synpred101_Php2260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred103_Php2306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_IncrementOperator_in_synpred103_Php2308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValuePair_in_synpred110_Php2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_synpred113_Php2532 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_listEntry_in_synpred113_Php2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_synpred114_Php2575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred127_Php2692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_OPEN_BRACE_in_synpred127_Php2694 = new BitSet(new long[]{0x10000C4800C22820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_synpred127_Php2697 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_COMMA_in_synpred127_Php2700 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_synpred127_Php2702 = new BitSet(new long[]{0x0000000008800000L});
    public static final BitSet FOLLOW_CLOSE_BRACE_in_synpred127_Php2708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberAccess_in_synpred129_Php2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_MEMBER_in_synpred130_Php2806 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_synpred130_Php2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccess_in_synpred131_Php2803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_INSTANCE_MEMBER_in_synpred131_Php2806 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_UnquotedString_in_synpred131_Php2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUALS_in_synpred132_Php2849 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_synpred132_Php2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccess_in_synpred133_Php2846 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_EQUALS_in_synpred133_Php2849 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_synpred133_Php2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred136_Php2862 = new BitSet(new long[]{0x0000400200001000L});
    public static final BitSet FOLLOW_set_in_synpred136_Php2864 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_assignment_in_synpred136_Php2877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectNameOrMethod_in_synpred137_Php2887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_INSTANCE_MEMBER_in_synpred137_Php2889 = new BitSet(new long[]{0x0000004000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_arrayOrUnquotedStringOrFunctionCall_in_synpred137_Php2891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPEN_SQUARE_BRACE_in_synpred140_Php2937 = new BitSet(new long[]{0x10000C4800422820L,0x018045240C0A4300L});
    public static final BitSet FOLLOW_expression_in_synpred140_Php2939 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_CLOSE_SQUARE_BRACE_in_synpred140_Php2941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});

}